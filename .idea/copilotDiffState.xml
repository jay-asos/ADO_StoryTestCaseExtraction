<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/API_DOCUMENTATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/API_DOCUMENTATION.md" />
              <option name="originalContent" value="## Starting and Stopping the API Server&#10;&#10;To interact with the API, you first need to start the server. The server can be easily started and stopped using the `monitor_daemon.py` script.&#10;&#10;### Starting the Server&#10;1. Open your terminal.&#10;2. Navigate to the directory where the ADO Story Extractor is located.&#10;3. Run the command to start the server:&#10;   ```bash&#10;   python monitor_daemon.py --mode api --host 0.0.0.0 --port 5000&#10;   ```&#10;   - This will start the server on all available network interfaces (`0.0.0.0`) at port `5000`.&#10;&#10;### Stopping the Server&#10;- To stop the server, you can simply terminate the process by pressing `Ctrl+C` in the terminal where it's running.&#10;&#10;# API Documentation&#10;&#10;The ADO Story Extractor provides a REST API for controlling and interacting with the EPIC change monitoring service. Below is a comprehensive description of the available endpoints and their usage.&#10;&#10;---&#10;&#10;### **GET /api/health**&#10;**Description**: Performs a health check on the API service.&#10;&#10;**Response**: &#10;- **200 OK**: Returns the health status with a timestamp and whether the monitor is running.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;status&quot;: &quot;healthy&quot;,&#10;  &quot;timestamp&quot;: &quot;2025-08-03T15:36:25Z&quot;,&#10;  &quot;monitor_running&quot;: true&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/status**&#10;**Description**: Retrieves the current status of the EPIC monitoring service.&#10;&#10;**Response**: &#10;- **200 OK**: Returns the monitoring status or indicates if the monitor is not initialized.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;is_running&quot;: true,&#10;  &quot;monitored_epics&quot;: [...]&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/start**&#10;**Description**: Starts the EPIC monitoring service.&#10;&#10;**Response**:&#10;- **200 OK**: Indicates that the monitor started successfully.&#10;- **400 BAD REQUEST**: Monitor is already running.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred starting the monitor.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Monitor started successfully&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/stop**&#10;**Description**: Stops the EPIC monitoring service.&#10;&#10;**Response**:&#10;- **200 OK**: Monitor stopped successfully.&#10;- **400 BAD REQUEST**: Monitor is not running.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred stopping the monitor.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Monitor stopped successfully&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/epics**&#10;**Description**: Lists all EPICs currently being monitored.&#10;&#10;**Response**:&#10;- **200 OK**: Returns a list of monitored EPICs.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;epics&quot;: [...],&#10;  &quot;details&quot;: {...}&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/epics/&lt;epic_id&gt;**&#10;**Description**: Adds an EPIC to the monitoring service.&#10;&#10;**Path Parameters**:&#10;- `&lt;epic_id&gt;`: The ID of the EPIC to add.&#10;&#10;**Response**:&#10;- **200 OK**: EPIC added to monitoring successfully.&#10;- **400 BAD REQUEST**: Failed to add EPIC.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred.&#10;&#10;---&#10;&#10;### **DELETE /api/epics/&lt;epic_id&gt;**&#10;**Description**: Removes an EPIC from the monitoring service.&#10;&#10;**Path Parameters**:&#10;- `&lt;epic_id&gt;`: The ID of the EPIC to remove.&#10;&#10;**Response**:&#10;- **200 OK**: EPIC removed successfully.&#10;- **400 BAD REQUEST**: EPIC was not being monitored or monitor not initialized.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred.&#10;&#10;---&#10;&#10;### **POST /api/check**&#10;**Description**: Forces a check on monitored EPICs to detect changes.&#10;&#10;**Request Body** (Optional):&#10;- `epic_id`: Specify an EPIC ID to check a specific EPIC.&#10;&#10;**Response**:&#10;- **200 OK**: Returns results of the force check.&#10;- **400 BAD REQUEST**: Monitor not initialized.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred during the check.&#10;&#10;---&#10;&#10;### **GET /api/config**&#10;**Description**: Retrieves the current configuration of the monitoring service.&#10;&#10;**Response**:&#10;- **200 OK**: Returns the current config.&#10;&#10;---&#10;&#10;### **PUT /api/config**&#10;**Description**: Updates the monitoring configuration (requires a restart to take effect).&#10;&#10;**Request Body**:&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;epic_ids&quot;: [...]&#10;}&#10;```&#10;&#10;**Response**:&#10;- **200 OK**: Configuration updated.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred updating the configuration.&#10;&#10;---&#10;&#10;### **GET /api/logs**&#10;**Description**: Retrieves recent entries from the application logs.&#10;&#10;**Query Parameters**:&#10;- `lines`: (Optional) Number of lines to retrieve. Default is 100.&#10;&#10;**Response**:&#10;- **200 OK**: Returns the requested log entries.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred accessing the logs.&#10;&#10;---&#10;&#10;Please replace `&lt;epic_id&gt;` in the URL with the actual EPIC ID you wish to interact with. Responses to all endpoints are in JSON format.&#10;" />
              <option name="updatedContent" value="## Starting and Stopping the API Server&#10;&#10;To interact with the API, you first need to start the server. The server can be easily started and stopped using the `monitor_daemon.py` script.&#10;&#10;### Starting the Server&#10;1. Open your terminal.&#10;2. Navigate to the directory where the ADO Story Extractor is located.&#10;3. Run the command to start the server:&#10;   ```bash&#10;   python monitor_daemon.py --mode api --host 0.0.0.0 --port 5001&#10;   ```&#10;   - This will start the server on all available network interfaces (`0.0.0.0`) at port `5001`.&#10;   - Note: Use port 5001 instead of 5000 to avoid conflicts with macOS AirPlay Receiver.&#10;&#10;### Stopping the Server&#10;- To stop the server, you can simply terminate the process by pressing `Ctrl+C` in the terminal where it's running.&#10;&#10;# API Documentation&#10;&#10;The ADO Story Extractor provides a REST API for controlling and interacting with the EPIC change monitoring service. Below is a comprehensive description of the available endpoints and their usage.&#10;&#10;---&#10;&#10;### **GET /api/health**&#10;**Description**: Performs a health check on the API service.&#10;&#10;**Response**: &#10;- **200 OK**: Returns the health status with a timestamp and whether the monitor is running.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;status&quot;: &quot;healthy&quot;,&#10;  &quot;timestamp&quot;: &quot;2025-08-07T15:36:25Z&quot;,&#10;  &quot;monitor_running&quot;: true&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/status**&#10;**Description**: Retrieves the current status of the EPIC monitoring service.&#10;&#10;**Response**: &#10;- **200 OK**: Returns the monitoring status or indicates if the monitor is not initialized.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;is_running&quot;: true,&#10;  &quot;config&quot;: {&#10;    &quot;poll_interval_seconds&quot;: 300,&#10;    &quot;auto_sync&quot;: true,&#10;    &quot;story_extraction_type&quot;: &quot;User Story&quot;,&#10;    &quot;test_case_extraction_type&quot;: &quot;Issue&quot;&#10;  },&#10;  &quot;monitored_epics&quot;: {&#10;    &quot;123&quot;: {&#10;      &quot;last_check&quot;: &quot;2025-08-07T15:30:00Z&quot;,&#10;      &quot;consecutive_errors&quot;: 0,&#10;      &quot;has_snapshot&quot;: true,&#10;      &quot;last_sync_result&quot;: {&#10;        &quot;timestamp&quot;: &quot;2025-08-07T15:30:00Z&quot;,&#10;        &quot;success&quot;: true,&#10;        &quot;created_stories&quot;: [&quot;456&quot;, &quot;789&quot;]&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/start**&#10;**Description**: Starts the EPIC monitoring service.&#10;&#10;**Response**:&#10;- **200 OK**: Indicates that the monitor started successfully.&#10;- **400 BAD REQUEST**: Monitor is already running.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred starting the monitor.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Monitor started successfully&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/stop**&#10;**Description**: Stops the EPIC monitoring service.&#10;&#10;**Response**:&#10;- **200 OK**: Monitor stopped successfully.&#10;- **400 BAD REQUEST**: Monitor is not running.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred stopping the monitor.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Monitor stopped successfully&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/epics**&#10;**Description**: Lists all EPICs currently being monitored.&#10;&#10;**Response**:&#10;- **200 OK**: Returns a list of monitored EPICs with details.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;epics&quot;: [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;],&#10;  &quot;details&quot;: {&#10;    &quot;123&quot;: {&#10;      &quot;last_check&quot;: &quot;2025-08-07T15:30:00Z&quot;,&#10;      &quot;consecutive_errors&quot;: 0,&#10;      &quot;has_snapshot&quot;: true,&#10;      &quot;last_sync_result&quot;: {&#10;        &quot;success&quot;: true,&#10;        &quot;created_stories&quot;: 3&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/epics/{epic_id}**&#10;**Description**: Adds an EPIC to the monitoring list.&#10;&#10;**Parameters**:&#10;- `epic_id` (path): The ID of the EPIC to add to monitoring.&#10;&#10;**Response**:&#10;- **200 OK**: EPIC added successfully.&#10;- **400 BAD REQUEST**: Failed to add EPIC or EPIC ID is invalid.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred adding the EPIC.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;EPIC 123 added to monitoring&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **DELETE /api/epics/{epic_id}**&#10;**Description**: Removes an EPIC from the monitoring list.&#10;&#10;**Parameters**:&#10;- `epic_id` (path): The ID of the EPIC to remove from monitoring.&#10;&#10;**Response**:&#10;- **200 OK**: EPIC removed successfully.&#10;- **404 NOT FOUND**: EPIC not found in monitoring list.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred removing the EPIC.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;EPIC 123 removed from monitoring&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/config**&#10;**Description**: Retrieves the current monitoring configuration.&#10;&#10;**Response**:&#10;- **200 OK**: Returns the current configuration settings and available work item types.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;config&quot;: {&#10;    &quot;poll_interval_seconds&quot;: 300,&#10;    &quot;auto_sync&quot;: true,&#10;    &quot;auto_extract_new_epics&quot;: true,&#10;    &quot;story_extraction_type&quot;: &quot;User Story&quot;,&#10;    &quot;test_case_extraction_type&quot;: &quot;Issue&quot;,&#10;    &quot;skip_duplicate_check&quot;: false,&#10;    &quot;retry_attempts&quot;: 3,&#10;    &quot;retry_delay_seconds&quot;: 60,&#10;    &quot;log_level&quot;: &quot;INFO&quot;&#10;  },&#10;  &quot;available_types&quot;: {&#10;    &quot;story_types&quot;: [&quot;User Story&quot;, &quot;Task&quot;],&#10;    &quot;test_case_types&quot;: [&quot;Issue&quot;, &quot;Test Case&quot;]&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/config**&#10;**Description**: Updates the monitoring configuration.&#10;&#10;**Request Body**:&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;story_extraction_type&quot;: &quot;Task&quot;,&#10;  &quot;test_case_extraction_type&quot;: &quot;Test Case&quot;,&#10;  &quot;skip_duplicate_check&quot;: false,&#10;  &quot;retry_attempts&quot;: 3,&#10;  &quot;retry_delay_seconds&quot;: 60,&#10;  &quot;log_level&quot;: &quot;INFO&quot;&#10;}&#10;```&#10;&#10;**Response**:&#10;- **200 OK**: Configuration updated successfully.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred updating the configuration.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Configuration updated successfully&quot;,&#10;  &quot;config&quot;: {&#10;    &quot;poll_interval_seconds&quot;: 300,&#10;    &quot;story_extraction_type&quot;: &quot;Task&quot;,&#10;    &quot;test_case_extraction_type&quot;: &quot;Test Case&quot;&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/force-check**&#10;**Description**: Forces an immediate check for changes across all monitored EPICs or a specific EPIC.&#10;&#10;**Request Body** (Optional):&#10;```json&#10;{&#10;  &quot;epic_id&quot;: &quot;123&quot;&#10;}&#10;```&#10;&#10;**Response**:&#10;- **200 OK**: Force check completed successfully.&#10;- **400 BAD REQUEST**: Monitor is not initialized.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred during the force check.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;results&quot;: {&#10;    &quot;123&quot;: {&#10;      &quot;has_changes&quot;: true,&#10;      &quot;check_time&quot;: &quot;2025-08-07T15:30:00Z&quot;,&#10;      &quot;sync_result&quot;: {&#10;        &quot;success&quot;: true,&#10;        &quot;created_stories&quot;: [&quot;456&quot;, &quot;789&quot;],&#10;        &quot;updated_stories&quot;: [],&#10;        &quot;error_message&quot;: null&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;### **GET /api/logs**&#10;**Description**: Retrieves recent log entries from the monitoring service.&#10;&#10;**Query Parameters**:&#10;- `lines` (optional): Number of recent log lines to retrieve (default: 50).&#10;&#10;**Response**:&#10;- **200 OK**: Returns recent log entries.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;logs&quot;: [&#10;    &quot;2025-08-07 15:30:00 - INFO - Starting EPIC monitoring loop&quot;,&#10;    &quot;2025-08-07 15:30:05 - INFO - Checking EPIC 123 for changes&quot;,&#10;    &quot;2025-08-07 15:30:10 - INFO - No changes detected for EPIC 123&quot;&#10;  ],&#10;  &quot;total_lines&quot;: 150&#10;}&#10;```&#10;&#10;---&#10;&#10;### **POST /api/test-cases/extract**&#10;**Description**: Extracts test cases for a specific user story using AI analysis.&#10;&#10;**Request Body**:&#10;```json&#10;{&#10;  &quot;story_id&quot;: &quot;456&quot;,&#10;  &quot;work_item_type&quot;: &quot;Test Case&quot;&#10;}&#10;```&#10;&#10;**Response**:&#10;- **200 OK**: Test cases extracted and uploaded successfully.&#10;- **400 BAD REQUEST**: Missing or invalid story_id.&#10;- **500 INTERNAL SERVER ERROR**: An error occurred during test case extraction.&#10;&#10;Example Response:&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Test cases extracted for story 456&quot;,&#10;  &quot;result&quot;: {&#10;    &quot;story_id&quot;: &quot;456&quot;,&#10;    &quot;story_title&quot;: &quot;User Login Feature&quot;,&#10;    &quot;test_cases&quot;: [&#10;      {&#10;        &quot;title&quot;: &quot;Valid Login with Correct Credentials&quot;,&#10;        &quot;description&quot;: &quot;Test successful login with valid email and password&quot;,&#10;        &quot;test_type&quot;: &quot;positive&quot;,&#10;        &quot;priority&quot;: &quot;High&quot;,&#10;        &quot;preconditions&quot;: [&quot;User has valid account&quot;],&#10;        &quot;test_steps&quot;: [&#10;          &quot;Navigate to login page&quot;,&#10;          &quot;Enter valid email&quot;,&#10;          &quot;Enter valid password&quot;,&#10;          &quot;Click login button&quot;&#10;        ],&#10;        &quot;expected_result&quot;: &quot;User successfully logged in and redirected to dashboard&quot;&#10;      }&#10;    ],&#10;    &quot;total_uploaded&quot;: 6,&#10;    &quot;total_errors&quot;: 0&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;## Configuration Parameters&#10;&#10;### Work Item Type Configuration&#10;The API now supports configurable work item types for maximum flexibility:&#10;&#10;| Parameter | Options | Default | Description |&#10;|-----------|---------|---------|-------------|&#10;| `story_extraction_type` | &quot;User Story&quot;, &quot;Task&quot; | &quot;User Story&quot; | Work item type for extracted stories |&#10;| `test_case_extraction_type` | &quot;Issue&quot;, &quot;Test Case&quot; | &quot;Issue&quot; | Work item type for extracted test cases |&#10;&#10;### Monitoring Configuration&#10;| Parameter | Type | Default | Description |&#10;|-----------|------|---------|-------------|&#10;| `poll_interval_seconds` | integer | 300 | How often to check for changes |&#10;| `auto_sync` | boolean | true | Automatically sync when changes detected |&#10;| `auto_extract_new_epics` | boolean | true | Automatically extract stories from new epics |&#10;| `skip_duplicate_check` | boolean | false | Skip duplicate detection (may create duplicates) |&#10;| `retry_attempts` | integer | 3 | Number of retry attempts on failure |&#10;| `retry_delay_seconds` | integer | 60 | Delay between retry attempts |&#10;| `log_level` | string | &quot;INFO&quot; | Logging level (DEBUG, INFO, WARNING, ERROR) |&#10;&#10;### Duplicate Prevention&#10;The API includes intelligent duplicate prevention:&#10;- **State Tracking**: Maintains `monitor_state.json` with processed epic information&#10;- **Epic Validation**: Checks if epics already have stories before extraction&#10;- **Smart Detection**: Uses multiple validation layers to prevent re-processing&#10;- **Persistent State**: Survives service restarts and maintains processing history&#10;&#10;## Error Handling&#10;&#10;All endpoints return consistent error responses:&#10;&#10;```json&#10;{&#10;  &quot;success&quot;: false,&#10;  &quot;error&quot;: &quot;Detailed error message&quot;,&#10;  &quot;timestamp&quot;: &quot;2025-08-07T15:30:00Z&quot;&#10;}&#10;```&#10;&#10;Common HTTP status codes:&#10;- **200**: Success&#10;- **400**: Bad Request (invalid parameters)&#10;- **404**: Not Found (resource doesn't exist)&#10;- **500**: Internal Server Error (system error)&#10;&#10;## Rate Limiting &amp; Performance&#10;&#10;- **Azure DevOps**: Respects ADO API rate limits with built-in retry logic&#10;- **OpenAI**: Implements exponential backoff for AI API calls&#10;- **Concurrent Processing**: Configurable max concurrent operations&#10;- **Efficient Polling**: Smart change detection minimizes unnecessary API calls" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DASHBOARD_ENHANCEMENTS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DASHBOARD_ENHANCEMENTS.md" />
              <option name="originalContent" value="# EPIC Monitor Dashboard - Enhancement Summary&#10;&#10;## Overview&#10;This document outlines the major enhancements made to the EPIC Change Monitor Dashboard to improve user experience, functionality, and visual appeal.&#10;&#10;##  **Visual &amp; UI Enhancements**&#10;&#10;### 1. **Interactive Charts and Data Visualization**&#10;- **Activity Timeline Chart**: 24-hour activity visualization using Chart.js&#10;- **EPIC Status Distribution**: Pie chart showing status breakdown&#10;- **Performance Metrics Dashboard**: Real-time metrics display with visual indicators&#10;- **Change History Charts**: Individual EPIC change tracking over time&#10;&#10;### 2. **Enhanced Statistics Cards**&#10;- **Performance Metrics Section**: &#10;  - Average Response Time&#10;  - Success Rate percentage  &#10;  - Changes Detected (24h)&#10;  - Total Checks (24h)&#10;- **Color-coded indicators** for different metric types&#10;- **Gradient backgrounds** for visual appeal&#10;&#10;### 3. **Improved EPIC Table**&#10;- **Dual View Modes**: Switch between table and grid layouts&#10;- **Enhanced Search/Filter**: Real-time filtering of EPICs&#10;- **Additional Data Columns**: Response times, change counts, detailed status&#10;- **Gradient Avatar Icons**: Modern visual indicators for each EPIC&#10;- **Action Buttons**: Quick access to details, removal, and other actions&#10;&#10;### 4. **EPIC Details Modal**&#10;- **Comprehensive Overview**: Status, checks, changes, performance metrics&#10;- **Recent Activity Timeline**: Visual activity feed with timestamps&#10;- **Performance Statistics**: Response time, success rate, uptime&#10;- **Quick Actions**: Force check, download reports, view snapshots&#10;- **Interactive Charts**: Individual EPIC performance visualization&#10;&#10;##  **Functional Enhancements**&#10;&#10;### 5. **Advanced Notification System**&#10;- **Multiple Notification Types**: Success, error, warning, info&#10;- **Rich Notifications**: Titles, messages, and action buttons&#10;- **Progress Indicators**: Auto-dismiss with visual progress bars&#10;- **Action Buttons**: Direct actions from notifications (e.g., &quot;Restart Monitor&quot;)&#10;- **Stacking Support**: Multiple notifications can be displayed simultaneously&#10;&#10;### 6. **Real-time Features**&#10;- **WebSocket Integration**: Placeholder for real-time updates&#10;- **Auto-refresh Enhancements**: Smarter refresh logic with loading states&#10;- **Live Status Indicators**: Animated status dots and indicators&#10;- **Background Process Monitoring**: Enhanced status tracking&#10;&#10;### 7. **Enhanced User Experience**&#10;- **Dark Mode Improvements**: Better contrast and visual hierarchy&#10;- **Responsive Design**: Improved mobile and tablet compatibility&#10;- **Loading States**: Better feedback during async operations&#10;- **Error Handling**: More informative error messages and recovery options&#10;&#10;##  **New Features**&#10;&#10;### 8. **Analytics Dashboard**&#10;- **Performance Monitoring**: Track system performance over time&#10;- **Usage Analytics**: Monitor check frequency and patterns  &#10;- **Trend Analysis**: Visual representation of monitoring trends&#10;- **Historical Data**: Access to past performance data&#10;&#10;### 9. **Advanced Controls**&#10;- **Individual EPIC Actions**: Per-EPIC force checks and management&#10;- **Bulk Operations**: Handle multiple EPICs simultaneously&#10;- **Configuration Presets**: Quick configuration templates&#10;- **Export/Import**: Data export and configuration backup&#10;&#10;### 10. **Enhanced Accessibility**&#10;- **Keyboard Navigation**: Full keyboard support for all functions&#10;- **Screen Reader Support**: Proper ARIA labels and descriptions&#10;- **High Contrast Mode**: Better visibility options&#10;- **Focus Management**: Proper focus handling in modals and forms&#10;&#10;##  **Technical Improvements**&#10;&#10;### 11. **Performance Optimizations**&#10;- **Lazy Loading**: Charts and heavy components load on demand&#10;- **Debounced Search**: Efficient filtering with reduced API calls&#10;- **Memory Management**: Proper cleanup of chart instances and timers&#10;- **Caching Strategy**: Smart caching of frequently accessed data&#10;&#10;### 12. **Code Organization**&#10;- **Modular JavaScript**: Well-organized Alpine.js components&#10;- **Enhanced CSS**: Modern CSS with custom properties and animations&#10;- **Better Error Handling**: Comprehensive try-catch blocks and user feedback&#10;- **Type Safety**: Better data validation and type checking&#10;&#10;##  **Visual Design System**&#10;&#10;### 13. **Modern Styling**&#10;- **Gradient Backgrounds**: Modern gradient effects for cards and buttons&#10;- **Hover Effects**: Subtle animations and state changes&#10;- **Glass Morphism**: Modern translucent effects&#10;- **Custom Animations**: Smooth transitions and micro-interactions&#10;- **Status Indicators**: Animated pulse effects for real-time status&#10;&#10;### 14. **Typography &amp; Iconography**&#10;- **Enhanced Font Hierarchy**: Better text sizing and contrast&#10;- **Icon Consistency**: FontAwesome icons throughout the interface&#10;- **Color System**: Consistent color palette with semantic meanings&#10;- **Spacing System**: Consistent padding and margins&#10;&#10;##  **Backend Integration Points**&#10;&#10;### 15. **API Enhancements Needed**&#10;To fully utilize all frontend enhancements, the following backend endpoints should be implemented:&#10;&#10;```&#10;GET /api/metrics - Performance metrics data&#10;GET /api/epics/{id}/details - Individual EPIC details&#10;POST /api/epics/{id}/check - Force check individual EPIC&#10;GET /api/analytics - Dashboard analytics data&#10;WebSocket /ws/updates - Real-time updates&#10;```&#10;&#10;### 16. **Data Structure Enhancements**&#10;Enhanced data models for:&#10;- EPIC details with performance metrics&#10;- Activity history tracking&#10;- User preference storage&#10;- Analytics data aggregation&#10;&#10;##  **Future Enhancement Opportunities**&#10;&#10;1. **Advanced Filtering**: Multi-criteria filtering and sorting&#10;2. **Custom Dashboards**: User-configurable dashboard layouts&#10;3. **Alerting System**: Email/SMS notifications for critical changes&#10;4. **API Integration**: Connect with external monitoring tools&#10;5. **Team Collaboration**: Multi-user support with role-based access&#10;6. **Data Export**: Advanced reporting and data export features&#10;7. **Mobile App**: Companion mobile application&#10;8. **AI Integration**: Predictive analytics and anomaly detection&#10;&#10;##  **Impact Summary**&#10;&#10;The enhanced dashboard provides:&#10;- **50% more visual information** at a glance&#10;- **Improved user interaction** with modal dialogs and enhanced forms&#10;- **Real-time feedback** through advanced notifications&#10;- **Better decision making** with charts and analytics&#10;- **Modern user experience** matching contemporary web standards&#10;- **Mobile-friendly interface** for on-the-go monitoring&#10;- **Accessibility compliance** for all user types&#10;&#10;##  **Technologies Used**&#10;&#10;- **Frontend**: HTML5, CSS3, JavaScript (ES6+)&#10;- **UI Framework**: TailwindCSS for styling&#10;- **JavaScript Framework**: Alpine.js for reactivity&#10;- **Charts**: Chart.js for data visualization&#10;- **Icons**: FontAwesome for consistent iconography&#10;- **Animations**: CSS animations and transitions&#10;- **Dark Mode**: CSS custom properties and class-based theming&#10;&#10;This enhanced dashboard transforms the basic monitoring interface into a comprehensive, modern, and user-friendly application suitable for professional environments.&#10;" />
              <option name="updatedContent" value="# EPIC Monitor Dashboard - Enhancement Summary&#13;&#10;&#13;&#10;## Overview&#13;&#10;This document outlines the major enhancements made to the EPIC Change Monitor Dashboard to improve user experience, functionality, and visual appeal.&#13;&#10;&#13;&#10;##  **Visual &amp; UI Enhancements**&#13;&#10;&#13;&#10;### 1. **Interactive Charts and Data Visualization**&#13;&#10;- **Activity Timeline Chart**: 24-hour activity visualization using Chart.js&#13;&#10;- **EPIC Status Distribution**: Pie chart showing status breakdown&#13;&#10;- **Performance Metrics Dashboard**: Real-time metrics display with visual indicators&#13;&#10;- **Change History Charts**: Individual EPIC change tracking over time&#13;&#10;&#13;&#10;### 2. **Enhanced Statistics Cards**&#13;&#10;- **Performance Metrics Section**: &#13;&#10;  - Average Response Time&#13;&#10;  - Success Rate percentage  &#13;&#10;  - Changes Detected (24h)&#13;&#10;  - Total Checks (24h)&#13;&#10;- **Color-coded indicators** for different metric types&#13;&#10;- **Gradient backgrounds** for visual appeal&#13;&#10;&#13;&#10;### 3. **Improved EPIC Table**&#13;&#10;- **Dual View Modes**: Switch between table and grid layouts&#13;&#10;- **Enhanced Search/Filter**: Real-time filtering of EPICs&#13;&#10;- **Additional Data Columns**: Response times, change counts, detailed status&#13;&#10;- **Gradient Avatar Icons**: Modern visual indicators for each EPIC&#13;&#10;- **Action Buttons**: Quick access to details, removal, and other actions&#13;&#10;&#13;&#10;### 4. **EPIC Details Modal**&#13;&#10;- **Comprehensive Overview**: Status, checks, changes, performance metrics&#13;&#10;- **Recent Activity Timeline**: Visual activity feed with timestamps&#13;&#10;- **Performance Statistics**: Response time, success rate, uptime&#13;&#10;- **Quick Actions**: Force check, download reports, view snapshots&#13;&#10;- **Interactive Charts**: Individual EPIC performance visualization&#13;&#10;&#13;&#10;##  **Functional Enhancements**&#13;&#10;&#13;&#10;### 5. **Advanced Notification System**&#13;&#10;- **Multiple Notification Types**: Success, error, warning, info&#13;&#10;- **Rich Notifications**: Titles, messages, and action buttons&#13;&#10;- **Progress Indicators**: Auto-dismiss with visual progress bars&#13;&#10;- **Action Buttons**: Direct actions from notifications (e.g., &quot;Restart Monitor&quot;)&#13;&#10;- **Stacking Support**: Multiple notifications can be displayed simultaneously&#13;&#10;&#13;&#10;### 6. **Real-time Features**&#13;&#10;- **WebSocket Integration**: Placeholder for real-time updates&#13;&#10;- **Auto-refresh Enhancements**: Smarter refresh logic with loading states&#13;&#10;- **Live Status Indicators**: Animated status dots and indicators&#13;&#10;- **Background Process Monitoring**: Enhanced status tracking&#13;&#10;&#13;&#10;### 7. **Enhanced User Experience**&#13;&#10;- **Dark Mode Improvements**: Better contrast and visual hierarchy&#13;&#10;- **Responsive Design**: Improved mobile and tablet compatibility&#13;&#10;- **Loading States**: Better feedback during async operations&#13;&#10;- **Error Handling**: More informative error messages and recovery options&#13;&#10;&#13;&#10;##  **New Features**&#13;&#10;&#13;&#10;### 8. **Work Item Type Configuration** ⭐ NEW&#13;&#10;- **Configurable Story Types**: Choose between &quot;User Story&quot; and &quot;Task&quot; for story extraction&#13;&#10;- **Configurable Test Case Types**: Choose between &quot;Issue&quot; and &quot;Test Case&quot; for test case extraction&#13;&#10;- **Dashboard Integration**: Complete UI for managing work item type preferences&#13;&#10;- **Real-time Updates**: Configuration changes apply immediately without restart&#13;&#10;- **Visual Indicators**: Clear display of current work item type settings&#13;&#10;&#13;&#10;### 9. **Test Case Extraction Integration** ⭐ NEW&#13;&#10;- **Built-in Test Case Generation**: AI-powered test case extraction from user stories&#13;&#10;- **Preview Mode**: Extract and preview test cases before uploading to ADO&#13;&#10;- **Direct Upload**: Extract and upload test cases directly to Azure DevOps&#13;&#10;- **Comprehensive Test Coverage**: Generates positive, negative, and edge test cases&#13;&#10;- **Rich Test Details**: Includes preconditions, test steps, expected results, and priority&#13;&#10;&#13;&#10;### 10. **Advanced Duplicate Prevention** ⭐ NEW&#13;&#10;- **Smart State Tracking**: Prevents duplicate story extraction across restarts&#13;&#10;- **Epic Processing History**: Maintains persistent record of processed epics&#13;&#10;- **Configurable Duplicate Checks**: Option to skip or enforce duplicate detection&#13;&#10;- **Visual Status Indicators**: Clear indication of epic processing status&#13;&#10;- **Audit Trail**: Complete logging of what was processed and when&#13;&#10;&#13;&#10;### 11. **Enhanced Configuration Management**&#13;&#10;- **Complete Config UI**: Manage all settings through the web dashboard&#13;&#10;- **Real-time Validation**: Instant feedback on configuration changes&#13;&#10;- **Persistent Settings**: Configuration survives service restarts&#13;&#10;- **Export/Import**: Configuration backup and restore capabilities&#13;&#10;- **Setting Categories**: Organized configuration sections for better usability&#13;&#10;&#13;&#10;##  **Technical Improvements**&#13;&#10;&#13;&#10;### 12. **API Enhancement**&#13;&#10;- **New Endpoints**: `/api/config` POST for configuration updates&#13;&#10;- **Enhanced Status API**: Includes work item type information&#13;&#10;- **Test Case APIs**: Dedicated endpoints for test case management&#13;&#10;- **Better Error Handling**: Comprehensive error responses with details&#13;&#10;- **Configuration Validation**: Server-side validation of all settings&#13;&#10;&#13;&#10;### 13. **Performance Optimizations**&#13;&#10;- **Lazy Loading**: Charts and heavy components load on demand&#13;&#10;- **Debounced Search**: Efficient filtering with reduced API calls&#13;&#10;- **Memory Management**: Proper cleanup of chart instances and timers&#13;&#10;- **Caching Strategy**: Smart caching of frequently accessed data&#13;&#10;- **Optimized Polling**: Reduced API calls through smart change detection&#13;&#10;&#13;&#10;### 14. **Code Organization**&#13;&#10;- **Modular JavaScript**: Well-organized Alpine.js components&#13;&#10;- **Enhanced CSS**: Modern CSS with custom properties and animations&#13;&#10;- **Better Error Handling**: Comprehensive try-catch blocks and user feedback&#13;&#10;- **Type Safety**: Better data validation and type checking&#13;&#10;&#13;&#10;##  **Visual Design System**&#13;&#10;&#13;&#10;### 15. **Modern Styling**&#13;&#10;- **Gradient Backgrounds**: Modern gradient effects for cards and buttons&#13;&#10;- **Hover Effects**: Subtle animations and state changes&#13;&#10;- **Glass Morphism**: Modern translucent effects&#13;&#10;- **Custom Animations**: Smooth transitions and micro-interactions&#13;&#10;- **Status Indicators**: Animated pulse effects for real-time status&#13;&#10;&#13;&#10;### 16. **Enhanced User Interface**&#13;&#10;- **Improved Modal Design**: Better spacing, typography, and visual hierarchy&#13;&#10;- **Consistent Color Scheme**: Unified color palette across all components&#13;&#10;- **Better Form Controls**: Enhanced input fields, toggles, and dropdowns&#13;&#10;- **Professional Icons**: Font Awesome integration for consistent iconography&#13;&#10;- **Mobile-First Design**: Responsive layout that works on all devices&#13;&#10;&#13;&#10;##  **Configuration Features**&#13;&#10;&#13;&#10;### 17. **Work Item Type Management**&#13;&#10;- **Story Extraction Types**: &#13;&#10;  - User Story (traditional agile stories)&#13;&#10;  - Task (granular task-based tracking)&#13;&#10;- **Test Case Extraction Types**:&#13;&#10;  - Issue (general issue tracking)&#13;&#10;  - Test Case (dedicated test case work items)&#13;&#10;- **Live Preview**: See current settings before applying changes&#13;&#10;- **Validation**: Prevents invalid configurations&#13;&#10;&#13;&#10;### 18. **Advanced Settings**&#13;&#10;- **Duplicate Prevention Controls**: Toggle duplicate checking on/off&#13;&#10;- **Auto-Extraction Settings**: Control automatic story extraction for new epics&#13;&#10;- **Retry Configuration**: Configurable retry attempts and delays&#13;&#10;- **Logging Controls**: Adjustable log levels and output settings&#13;&#10;&#13;&#10;##  **Monitoring Enhancements**&#13;&#10;&#13;&#10;### 19. **Real-time Status Tracking**&#13;&#10;- **Epic Processing Status**: Visual indicators for each epic's state&#13;&#10;- **Live Configuration Display**: Current settings shown in real-time&#13;&#10;- **Performance Metrics**: Response times, success rates, and throughput&#13;&#10;- **Error Tracking**: Comprehensive error logging and display&#13;&#10;&#13;&#10;### 20. **Enhanced Analytics**&#13;&#10;- **Processing History**: Track what epics have been processed&#13;&#10;- **Success Metrics**: Monitor extraction success rates over time&#13;&#10;- **Performance Trends**: Visual representation of system performance&#13;&#10;- **Usage Patterns**: Analytics on epic processing frequency&#13;&#10;&#13;&#10;##  **Developer Experience**&#13;&#10;&#13;&#10;### 21. **Better Documentation Integration**&#13;&#10;- **Inline Help**: Contextual help text throughout the interface&#13;&#10;- **Configuration Tooltips**: Detailed explanations for each setting&#13;&#10;- **Error Messages**: Clear, actionable error descriptions&#13;&#10;- **API Integration**: Seamless integration with backend services&#13;&#10;&#13;&#10;### 22. **Debugging Tools**&#13;&#10;- **Console Logging**: Comprehensive client-side logging&#13;&#10;- **Network Request Monitoring**: Visual feedback for all API calls&#13;&#10;- **State Inspection**: Easy debugging of application state&#13;&#10;- **Error Recovery**: Graceful handling of network and API errors&#13;&#10;&#13;&#10;##  **Business Value**&#13;&#10;&#13;&#10;### 23. **Operational Efficiency**&#13;&#10;- **Reduced Manual Work**: Automated configuration and monitoring&#13;&#10;- **Faster Setup**: Intuitive interface reduces learning curve&#13;&#10;- **Better Visibility**: Clear status and progress indicators&#13;&#10;- **Improved Reliability**: Enhanced error handling and recovery&#13;&#10;&#13;&#10;### 24. **User Experience**&#13;&#10;- **Professional Interface**: Modern, clean design that users love&#13;&#10;- **Intuitive Navigation**: Logical flow and clear information hierarchy&#13;&#10;- **Responsive Design**: Works seamlessly across all devices&#13;&#10;- **Accessibility**: Better support for screen readers and keyboard navigation&#13;&#10;&#13;&#10;##  **Summary of Major Changes**&#13;&#10;&#13;&#10;1. **✅ Work Item Type Configuration**: Complete UI for managing story and test case types&#13;&#10;2. **✅ Test Case Integration**: Built-in AI-powered test case generation and management&#13;&#10;3. **✅ Duplicate Prevention**: Intelligent state tracking to prevent duplicate extractions&#13;&#10;4. **✅ Enhanced Configuration**: Comprehensive settings management through the dashboard&#13;&#10;5. **✅ Improved API**: New endpoints and better error handling&#13;&#10;6. **✅ Better UX**: Enhanced notifications, loading states, and error recovery&#13;&#10;7. **✅ Visual Improvements**: Modern design with better typography and spacing&#13;&#10;8. **✅ Performance**: Optimized API calls and better memory management&#13;&#10;&#13;&#10;The dashboard has evolved from a basic monitoring interface to a comprehensive, production-ready management platform that provides complete control over the EPIC story extraction process." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ADO Story Extractor &#10;&#10;## Overview&#10;&#10;A **Python-based Azure DevOps (ADO) Story Extractor** that uses AI to automatically extract user stories from requirements/epics and manage them in Azure DevOps. The system provides intelligent monitoring, change detection, and synchronization capabilities with both CLI and API interfaces.&#10;&#10;##  Key Features&#10;&#10;- ** Modern Web Dashboard**: Beautiful, responsive interface with dark theme support&#10;- ** AI-Powered Extraction**: Uses OpenAI GPT to analyze requirements and generate user stories&#10;- ** Change Detection**: Monitors epics using content hashing for automatic updates&#10;- **⚡ Automatic Synchronization**: Creates, updates, and manages user stories in ADO&#10;- ** Snapshot Tracking**: Maintains history for change detection and rollback&#10;- **️ Persistent State Management**: Tracks processed epics to prevent duplicate extractions&#10;- ** Graceful Shutdown**: Saves snapshots before shutdown and resumes from last state&#10;- ** Smart Epic Processing**: Skips unchanged epics and prevents re-extraction of existing stories&#10;- ** REST API**: Provides API endpoints for integration with other systems&#10;- **⌨️ Comprehensive CLI**: Multiple interfaces for different use cases&#10;- ** Background Monitoring**: Continuous epic monitoring with configurable polling&#10;- ** Production Ready**: Comprehensive logging, error handling, and retry mechanisms&#10;- ** Real-time UI**: Live updates, toast notifications, and intuitive controls&#10;- ** Safe Log Management**: UI-only log clearing that preserves files and snapshots&#10;&#10;##  Project Structure&#10;&#10;```&#10;ado-story-extractor/&#10;├── src/                    # Core application logic&#10;│   ├── agent.py           # Main orchestrator/coordinator&#10;│   ├── ado_client.py      # Azure DevOps API client&#10;│   ├── story_extractor.py # AI-powered story extraction&#10;│   ├── models.py          # Data models (Pydantic)&#10;│   ├── monitor.py         # Background monitoring service&#10;│   └── monitor_api.py     # REST API for monitoring&#10;├── templates/             # Web dashboard templates&#10;│   └── dashboard.html     # Modern web interface&#10;├── static/                # Static assets for web dashboard&#10;│   └── styles.css         # Custom CSS styles&#10;├── config/&#10;│   └── settings.py        # Configuration management&#10;├── tests/                 # Test suite&#10;├── snapshots/             # Epic snapshots for change detection&#10;├── logs/                  # Application logs&#10;├── monitor_state.json     # Persistent state tracking for processed epics&#10;├── monitor_config.json    # Monitor configuration settings&#10;├── main.py               # Basic CLI interface&#10;├── main_enhanced.py      # Enhanced CLI with epic sync&#10;├── monitor_daemon.py     # Monitoring daemon runner&#10;└── demo_epic_sync.py     # Demo/showcase script&#10;```&#10;&#10;##  Quick Start&#10;&#10;### Prerequisites&#10;&#10;1. **Python 3.8+** installed&#10;2. **Azure DevOps** account with appropriate permissions&#10;3. **OpenAI API** key for story extraction&#10;&#10;### Setup&#10;&#10;1. **Clone and Install Dependencies**:&#10;   ```bash&#10;   git clone &lt;your-repo&gt;&#10;   cd ado-story-extractor&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;   **Dependencies include:**&#10;   - `flask` - Web framework for the dashboard&#10;   - `azure-devops` - Azure DevOps integration&#10;   - `openai` - AI-powered story extraction&#10;   - `requests` - HTTP client for API calls&#10;   - `pydantic` - Data validation and modeling&#10;   - `pytest` - Testing framework&#10;&#10;2. **Configure Environment**:&#10;   ```bash&#10;   cp .env.example .env&#10;   # Edit .env with your credentials&#10;   ```&#10;&#10;   Required variables:&#10;   ```env&#10;   ADO_ORGANIZATION=your-organization&#10;   ADO_PROJECT=your-project&#10;   ADO_PAT=your-personal-access-token&#10;   OPENAI_API_KEY=your-openai-api-key&#10;   ```&#10;&#10;3. **Validate Setup**:&#10;   ```bash&#10;   python main.py validate-config&#10;   ```&#10;&#10;###  Starting Points&#10;&#10;#### **Option 1: Web Dashboard (Recommended for New Users)**&#10;**Modern, user-friendly interface with no command-line required:**&#10;&#10;```bash&#10;# Start the web dashboard&#10;python monitor_daemon.py --mode api --host 127.0.0.1 --port 5000&#10;&#10;# Open your browser to: http://127.0.0.1:5000/&#10;```&#10;&#10;**Features available in the dashboard:**&#10;- ✅ Start/stop monitoring with one click&#10;- ✅ Add/remove epics visually&#10;- ✅ Edit configuration through forms&#10;- ✅ View real-time logs&#10;- ✅ Dark/light theme toggle&#10;- ✅ Responsive design for all devices&#10;&#10;#### **Option 2: Demo Mode (Great for Understanding the System)**&#10;**Best way to understand the system without real credentials:**&#10;&#10;```bash&#10;python demo_epic_sync.py&#10;```&#10;&#10;This showcases all features with mock data and explains the workflow.&#10;&#10;#### **Option 3: Basic CLI Usage**&#10;**Primary entry point for basic functionality:**&#10;&#10;```bash&#10;# Validate your configuration&#10;python main.py validate-config&#10;&#10;# Check available work item types in your project&#10;python main.py check-types&#10;&#10;# Process a single requirement/epic&#10;python main.py process 123&#10;&#10;# Preview stories without uploading to ADO&#10;python main.py preview 123&#10;&#10;# Process all requirements with filtering&#10;python main.py process-all --state Active&#10;&#10;# Get requirement summary&#10;python main.py summary 123&#10;&#10;# Show how stories will appear in ADO&#10;python main.py show-format 123&#10;```&#10;&#10;#### **Option 3: Enhanced Epic Synchronization**&#10;**For advanced epic synchronization with change detection:**&#10;&#10;```bash&#10;# Synchronize an epic with automatic change detection&#10;python main_enhanced.py sync-epic 12345&#10;&#10;# Synchronize with snapshot tracking for history&#10;python main_enhanced.py sync-epic 12345 --snapshot snapshots/epic_12345.json&#10;&#10;# Preview what changes would be made&#10;python main_enhanced.py preview-epic 12345&#10;&#10;# Process single requirement (original functionality)&#10;python main_enhanced.py process 12345&#10;```&#10;&#10;#### **Option 4: Continuous Monitoring**&#10;**For background monitoring and automatic synchronization:**&#10;&#10;```bash&#10;# Create default monitoring configuration&#10;python monitor_daemon.py --create-config&#10;&#10;# Edit monitor_config.json to add your epic IDs&#10;# Then run in standalone mode&#10;python monitor_daemon.py --mode standalone&#10;&#10;# Or run with REST API for external integration&#10;python monitor_daemon.py --mode api --host 0.0.0.0 --port 8080&#10;```&#10;&#10;##  Usage Examples&#10;&#10;### Basic Story Extraction&#10;```bash&#10;# Extract stories from a requirement and upload to ADO&#10;python main.py process 456&#10;&#10;# Just extract and preview (no upload)&#10;python main.py preview 456&#10;```&#10;&#10;### Epic Synchronization with Change Detection&#10;```bash&#10;# Initial sync of an epic&#10;python main_enhanced.py sync-epic 789&#10;&#10;# Subsequent syncs will detect changes automatically&#10;python main_enhanced.py sync-epic 789 --snapshot snapshots/epic_789.json&#10;```&#10;&#10;### Monitoring Setup&#10;```bash&#10;# Setup monitoring configuration&#10;python monitor_daemon.py --create-config&#10;&#10;# Edit monitor_config.json:&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;],&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;log_level&quot;: &quot;INFO&quot;&#10;}&#10;&#10;# Start monitoring&#10;python monitor_daemon.py --mode standalone&#10;```&#10;&#10;### API Integration&#10;```bash&#10;# Start API server&#10;python monitor_daemon.py --mode api --port 5000&#10;&#10;# API endpoints will be available at:&#10;# http://localhost:5000/api/health&#10;# http://localhost:5000/api/status&#10;# http://localhost:5000/api/force-check&#10;```&#10;&#10;### Web Dashboard Integration&#10;```bash&#10;# Start API server with web dashboard&#10;python monitor_daemon.py --mode api --port 5000&#10;&#10;# Access the modern web dashboard at:&#10;# http://localhost:5000/&#10;&#10;# API endpoints available at:&#10;# http://localhost:5000/api/health&#10;# http://localhost:5000/api/status&#10;# http://localhost:5000/api/force-check&#10;```&#10;&#10;##  Web Dashboard&#10;&#10;### Modern Management Interface&#10;The system now includes a **beautiful, modern web dashboard** built with Tailwind CSS and Alpine.js for comprehensive EPIC monitoring management.&#10;&#10;####  Dashboard Features&#10;- **Monitor Control Panel**: Start/stop monitoring service with real-time status&#10;- **Epic Management**: Add/remove epics from monitoring with live updates&#10;- **Configuration Editor**: Edit monitor settings through an intuitive modal interface&#10;- **Live Log Viewer**: Real-time log streaming with UI-only clearing (preserves files)&#10;- **Dark Theme Support**: Toggle between light and dark modes with persistence&#10;- **Toast Notifications**: User-friendly feedback for all actions&#10;- **Responsive Design**: Works perfectly on desktop, tablet, and mobile&#10;- **Real-time Updates**: Auto-refreshing status and epic information&#10;&#10;####  Dashboard Sections&#10;&#10;1. **Monitor Status Panel**&#10;   - Current monitoring state (Running/Stopped)&#10;   - Start/stop buttons with loading states&#10;   - Real-time status indicators&#10;&#10;2. **Epic Management**&#10;   - List all monitored epics with details&#10;   - Add new epics with validation&#10;   - Remove epics with confirmation&#10;   - Epic status and last sync information&#10;&#10;3. **Configuration Panel**&#10;   - Edit poll intervals, retry settings&#10;   - Toggle auto-sync and auto-extraction&#10;   - Modify log levels and epic lists&#10;   - Validation and error handling&#10;&#10;4. **Log Viewer**&#10;   - Real-time log streaming (last 50 lines)&#10;   - Clear logs from display (preserves actual log files)&#10;   - Formatted log display with timestamps&#10;   - Auto-scroll to latest entries&#10;&#10;5. **System Information**&#10;   - Health status monitoring&#10;   - Configuration summary&#10;   - Performance metrics&#10;&#10;####  Dashboard Configuration&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 30,&#10;  &quot;max_concurrent_syncs&quot;: 3,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;log_level&quot;: &quot;INFO&quot;,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;]&#10;}&#10;```&#10;&#10;####  Getting Started with Dashboard&#10;1. **Start the API server**:&#10;   ```bash&#10;   python monitor_daemon.py --mode api --host 127.0.0.1 --port 5000&#10;   ```&#10;&#10;2. **Open your browser** to `http://127.0.0.1:5000/`&#10;&#10;3. **Key Features Available**:&#10;   - ✅ Start/stop monitor with one click&#10;   - ✅ Add/remove epics dynamically&#10;   - ✅ Edit configuration without restarting&#10;   - ✅ View real-time logs&#10;   - ✅ Toggle dark/light theme&#10;   - ✅ Clear log display (keeps files intact)&#10;&#10;####  Dashboard Benefits&#10;- **User-Friendly**: No command-line knowledge required&#10;- **Real-time**: Live updates and instant feedback&#10;- **Professional**: Modern, clean interface design&#10;- **Responsive**: Works on all screen sizes&#10;- **Safe**: UI-only log clearing preserves snapshots&#10;- **Persistent**: Settings and preferences saved locally&#10;&#10;##  Configuration&#10;&#10;### Environment Variables&#10;&#10;| Variable | Description | Required |&#10;|----------|-------------|----------|&#10;| `ADO_ORGANIZATION` | Azure DevOps organization name | Yes |&#10;| `ADO_PROJECT` | Project name in ADO | Yes |&#10;| `ADO_PAT` | Personal Access Token with work item permissions | Yes |&#10;| `OPENAI_API_KEY` | OpenAI API key for GPT access | Yes |&#10;| `ADO_REQUIREMENT_TYPE` | Work item type for requirements (default: &quot;Epic&quot;) | No |&#10;| `ADO_USER_STORY_TYPE` | Work item type for user stories (default: &quot;User Story&quot;) | No |&#10;| `OPENAI_MAX_RETRIES` | Max retry attempts for OpenAI API (default: 3) | No |&#10;| `OPENAI_RETRY_DELAY` | Delay between retries in seconds (default: 5) | No |&#10;&#10;### Monitor Configuration (`monitor_config.json`)&#10;&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;max_concurrent_syncs&quot;: 3,&#10;  &quot;snapshot_directory&quot;: &quot;snapshots&quot;,&#10;  &quot;log_level&quot;: &quot;INFO&quot;,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;],&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;notification_webhook&quot;: null,&#10;  &quot;retry_attempts&quot;: 3,&#10;  &quot;retry_delay_seconds&quot;: 60&#10;}&#10;```&#10;&#10;##  Testing&#10;&#10;```bash&#10;# Run all tests&#10;pytest&#10;&#10;# Run with coverage&#10;pytest --cov=src&#10;&#10;# Run specific test file&#10;pytest tests/test_story_extractor.py&#10;```&#10;&#10;##  How It Works&#10;&#10;### Story Extraction Process&#10;1. **Fetch Requirement**: Retrieves epic/requirement from Azure DevOps&#10;2. **AI Analysis**: Uses OpenAI GPT to analyze content and extract user stories&#10;3. **Story Generation**: Creates structured user stories with acceptance criteria&#10;4. **ADO Integration**: Uploads stories as work items linked to parent requirement&#10;5. **Relationship Management**: Maintains parent-child relationships in ADO&#10;&#10;### Change Detection &amp; Monitoring&#10;1. **Content Hashing**: Generates SHA256 hash of epic title + description&#10;2. **Snapshot Comparison**: Compares current hash with stored snapshot&#10;3. **Change Triggering**: Automatic re-extraction when changes detected&#10;4. **Smart Synchronization**: Updates existing stories or creates new ones&#10;5. **Continuous Monitoring**: Background service polls for changes&#10;6. **Graceful Shutdown**: Saves all snapshots before stopping&#10;7. **Persistent State**: Tracks processed epics to prevent duplicate extractions&#10;8. **Resume Capability**: Continues monitoring from last known state after restart&#10;&#10;### Story Synchronization Logic&#10;- **New Stories**: Creates fresh work items in ADO&#10;- **Similar Stories**: Uses fuzzy matching to identify existing stories&#10;- **Updates**: Modifies existing stories when content changes significantly&#10;- **Preservation**: Leaves unchanged stories untouched&#10;&#10;## ️ Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **Configuration Errors**:&#10;   ```bash&#10;   python main.py validate-config&#10;   ```&#10;&#10;2. **ADO Connection Issues**:&#10;   ```bash&#10;   python main.py check-types&#10;   ```&#10;&#10;3. **Work Item Type Mismatches**:&#10;   - Check available types with `check-types` command&#10;   - Update `ADO_REQUIREMENT_TYPE` and `ADO_USER_STORY_TYPE` in `.env`&#10;&#10;4. **OpenAI API Issues**:&#10;   - Verify API key is valid&#10;   - Check rate limits and quotas&#10;   - Review logs for specific error messages&#10;&#10;### Logs&#10;- Application logs: `logs/epic_monitor.log`&#10;- Console output with debug information&#10;- Structured logging with timestamps and levels&#10;&#10;##  Data Safety Features&#10;&#10;### UI-Only Log Clearing&#10;The dashboard includes a **safe log clearing feature** that preserves important data:&#10;&#10;- **Display Clearing**: Clears logs from the web interface only&#10;- **File Preservation**: Actual log files remain untouched&#10;- **Snapshot Protection**: All epic snapshots and history are preserved&#10;- **User Confirmation**: Clear confirmation dialog explains the behavior&#10;- **Status Messages**: Success notifications confirm files are safe&#10;&#10;```javascript&#10;// Dashboard implementation ensures data safety&#10;clearLogs() {&#10;    // Only clears UI display: this.logs = []&#10;    // Never deletes: logs/epic_monitor.log&#10;    // Never deletes: snapshots/*.json&#10;}&#10;```&#10;&#10;### Duplicate Prevention System&#10;Advanced state management prevents duplicate story extraction:&#10;&#10;- **State Tracking**: `monitor_state.json` tracks processed epics&#10;- **Epic Flags**: Each epic has a `stories_extracted` boolean flag&#10;- **Persistent Storage**: State survives service restarts&#10;- **Smart Checks**: Multiple validation layers prevent re-processing&#10;- **Logging**: Clear audit trail of what was processed when&#10;&#10;## Daemon Enhancement: Smart State Management and Snapshot Handling&#10;&#10;The Enhanced ADO Story Extractor daemon now includes sophisticated state management that prevents duplicate story extractions and ensures reliable operation across restarts.&#10;&#10;###  **LATEST**: Persistent State Management&#10;- **Snapshot on Shutdown**: Automatically saves all epic snapshots before stopping&#10;- **State Persistence**: Tracks which epics have been processed to prevent re-extraction&#10;- **Resume from Last State**: Continues monitoring exactly where it left off after restart&#10;- **Skip Unchanged Epics**: Only processes epics that have actual content changes&#10;- **Duplicate Prevention**: Never re-extracts stories for epics that already have them&#10;&#10;###  **ENHANCED**: Auto-Extract Stories from New Epics&#10;&#10;## Features&#10;&#10;###  **NEW**: Auto-Extract Stories from New Epics&#10;- **Automatic Discovery**: Daemon continuously scans Azure DevOps for new epics&#10;- **Immediate Processing**: When a new epic is detected, stories are automatically extracted using AI&#10;- **Configurable**: Can be enabled/disabled via the `auto_extract_new_epics` configuration option&#10;- **Smart Integration**: Works alongside existing change detection for modified epics&#10;&#10;###  **EXISTING**: Change Detection and Sync&#10;- **Content Monitoring**: Tracks changes in epic title and description using SHA256 hashing&#10;- **Automatic Re-sync**: Re-extracts and updates stories when epic content changes&#10;- **Snapshot Management**: Maintains historical snapshots for change comparison&#10;&#10;## Configuration&#10;&#10;### New Configuration Option&#10;&#10;Add the following to your `monitor_config.json`:&#10;&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 30,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;epic_ids&quot;: [&quot;1&quot;],&#10;  ...&#10;}&#10;```&#10;&#10;### Configuration Parameters&#10;&#10;| Parameter | Type | Default | Description |&#10;|-----------|------|---------|-------------|&#10;| `auto_extract_new_epics` | boolean | `true` | Enable/disable automatic story extraction for new epics |&#10;| `auto_sync` | boolean | `true` | Enable/disable automatic sync for changed epics |&#10;| `poll_interval_seconds` | integer | `300` | How often to check for new epics and changes |&#10;&#10;## How It Works&#10;&#10;### 1. Epic Detection Process&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Scan Azure DevOps│ -[200d&gt;[200d│ Compare with    │ -[200d&gt;[200d│ Identify New    │&#10;│ for All Epics   │    │ Monitored List  │    │ Epics           │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 2. New Epic Processing&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Add Epic to     │ -[200d&gt;[200d│ Extract Stories │ -[200d&gt;[200d│ Create Stories  │&#10;│ Monitoring      │    │ using AI        │    │ in Azure DevOps │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 3. Ongoing Monitoring&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Monitor for     │ -[200d&gt;[200d│ Detect Changes  │ -[200d&gt;[200d│ Re-sync Stories │&#10;│ Content Changes │    │ via Hashing     │    │ if Changed      │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 4. Test Case Generation Process&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ User Story      │ -[200d&gt;[200d│ AI Analysis     │ -[200d&gt;[200d│ Generate Test   │&#10;│ Created         │    │ &amp; Test Planning │    │ Cases           │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;         ↓                       ↓                       ↓&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Upload to ADO   │ ←--│ Categorize by   │ ←--│ Include:        │&#10;│ as Child Items  │    │ Type &amp; Priority │    │ • Positive Tests│&#10;└─────────────────┘    └─────────────────┘    │ • Negative Tests│&#10;                                              │ • Edge Cases    │&#10;                                              └─────────────────┘&#10;```&#10;&#10;###  Test Case Extraction Workflow&#10;&#10;#### Automatic Integration&#10;- **Seamless Workflow**: Test cases are automatically generated after each user story creation&#10;- **Smart Analysis**: AI analyzes user story content, description, and acceptance criteria&#10;- **Comprehensive Coverage**: Generates positive, negative, and edge test scenarios&#10;&#10;#### Test Case Types&#10;- **Positive Tests**: Happy path scenarios with valid inputs and expected user behavior&#10;- **Negative Tests**: Error conditions, invalid inputs, and unauthorized access scenarios  &#10;- **Edge Cases**: Boundary values, extreme conditions, and limit testing scenarios&#10;&#10;#### Generated Information&#10;Each test case includes:&#10;- **Title**: Clear, descriptive test case name&#10;- **Description**: What the test case validates&#10;- **Type**: positive, negative, or edge&#10;- **Priority**: High, Medium, or Low&#10;- **Preconditions**: Prerequisites for test execution&#10;- **Test Steps**: Detailed step-by-step instructions&#10;- **Expected Results**: Clear description of expected outcomes&#10;&#10;#### ADO Integration&#10;- Test cases are created as &quot;Test Case&quot; work items in Azure DevOps&#10;- Automatically linked as child items to their parent user stories&#10;- Properly formatted with HTML for rich text display in ADO&#10;- Include all test metadata and categorization&#10;&#10;## Benefits&#10;&#10;### For Development Teams&#10;- **Zero Manual Intervention**: New epics are automatically processed&#10;- **Consistent Story Quality**: AI-powered extraction ensures consistent user story format&#10;- **Real-time Updates**: Stories are available immediately after epic creation&#10;- **Change Tracking**: Modifications to epics trigger automatic story updates&#10;&#10;### For Project Managers&#10;- **Complete Coverage**: No epics are missed or forgotten&#10;- **Audit Trail**: Full history of when stories were created/updated&#10;- **Flexible Control**: Can disable auto-extraction if manual review is preferred&#10;- **Status Visibility**: Clear logging shows what was processed and when&#10;&#10;## Migration Guide&#10;&#10;### Existing Users&#10;1. Update your `monitor_config.json` to include `&quot;auto_extract_new_epics&quot;: true`&#10;2. Restart the daemon - no other changes required&#10;3. New epics will be automatically processed on the next polling cycle&#10;&#10;### New Users&#10;1. Follow the standard setup process in the main README&#10;2. The enhanced functionality is enabled by default&#10;3. Start the daemon with `python3 monitor_daemon.py --mode standalone`&#10;&#10;## Technical Details&#10;&#10;### Epic Detection Algorithm&#10;- Fetches all epics from Azure DevOps using work item type filtering&#10;- Compares against currently monitored epic set&#10;- Identifies new epics using set difference operation&#10;- Processes new epics immediately upon detection&#10;&#10;### Story Extraction Process&#10;- Uses OpenAI GPT to analyze epic content&#10;- Generates structured user stories with acceptance criteria&#10;- Creates work items in Azure DevOps with proper parent-child relationships&#10;- Maintains snapshots for future change detection&#10;&#10;### Error Handling&#10;- Retry logic for failed API calls (configurable attempts and delays)&#10;- Graceful handling of epic access issues&#10;- Automatic removal of epics that become inaccessible&#10;- Comprehensive logging for troubleshooting&#10;&#10;## Performance Considerations&#10;&#10;- **Polling Frequency**: Default 30-second intervals balance responsiveness with API usage&#10;- **Concurrent Processing**: Configurable max concurrent syncs (default: 3)&#10;- **API Rate Limits**: Built-in retry logic respects Azure DevOps and OpenAI limits&#10;- **Memory Usage**: Efficient snapshot storage and cleanup&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **Stories not being extracted for new epics**&#10;   - Check `auto_extract_new_epics` is set to `true`&#10;   - Verify Azure DevOps and OpenAI credentials&#10;   - Review logs for specific error messages&#10;&#10;2. **Duplicate processing**&#10;   - Daemon prevents duplicate processing through state tracking&#10;   - Snapshots ensure epics are only processed when actually new&#10;&#10;3. **Performance issues**&#10;   - Adjust `poll_interval_seconds` to reduce API calls&#10;   - Decrease `max_concurrent_syncs` if hitting rate limits&#10;&#10;### Log Analysis&#10;```bash&#10;# Monitor daemon activity&#10;tail -f logs/epic_monitor.log&#10;&#10;# Check for specific epic processing&#10;grep &quot;Epic 42&quot; logs/epic_monitor.log&#10;```&#10;&#10;## Future Enhancements&#10;&#10;- Webhook support for real-time epic notifications&#10;- Custom story templates per epic type&#10;- Integration with project management tools&#10;- Advanced story prioritization based on epic metadata&#10;&#10;##  Contributing&#10;&#10;Feel free to explore the code and adapt it to your needs! The project is well-structured with:&#10;- Comprehensive test coverage&#10;- Clean separation of concerns&#10;- Extensive documentation&#10;- Production-ready error handling&#10;&#10;---&#10;&#10;**Ready to get started? Run the demo first:** `python demo_epic_sync.py` &#10;&#10;##  REST API Endpoints&#10;&#10;### Test Case Management&#10;&#10;#### Extract Test Cases&#10;```http&#10;POST /api/stories/{story_id}/test-cases&#10;```&#10;&#10;Extracts comprehensive test cases for a specific user story without uploading to ADO.&#10;&#10;**Response Example:**&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;story_id&quot;: &quot;12345&quot;,&#10;  &quot;story_title&quot;: &quot;User Login Feature&quot;,&#10;  &quot;test_cases&quot;: [&#10;    {&#10;      &quot;title&quot;: &quot;Valid Login with Email and Password&quot;,&#10;      &quot;description&quot;: &quot;Test successful login with valid credentials&quot;,&#10;      &quot;test_type&quot;: &quot;positive&quot;,&#10;      &quot;preconditions&quot;: [&quot;User has valid account&quot;, &quot;System is online&quot;],&#10;      &quot;test_steps&quot;: [&#10;        &quot;Navigate to login page&quot;,&#10;        &quot;Enter valid email address&quot;,&#10;        &quot;Enter valid password&quot;,&#10;        &quot;Click login button&quot;&#10;      ],&#10;      &quot;expected_result&quot;: &quot;User is successfully logged in and redirected to dashboard&quot;,&#10;      &quot;priority&quot;: &quot;High&quot;&#10;    },&#10;    {&#10;      &quot;title&quot;: &quot;Login with Invalid Credentials&quot;,&#10;      &quot;description&quot;: &quot;Test system behavior with incorrect login information&quot;,&#10;      &quot;test_type&quot;: &quot;negative&quot;,&#10;      &quot;preconditions&quot;: [&quot;System is online&quot;],&#10;      &quot;test_steps&quot;: [&#10;        &quot;Navigate to login page&quot;,&#10;        &quot;Enter invalid email address&quot;,&#10;        &quot;Enter incorrect password&quot;,&#10;        &quot;Click login button&quot;&#10;      ],&#10;      &quot;expected_result&quot;: &quot;Error message displayed: 'Invalid credentials'&quot;,&#10;      &quot;priority&quot;: &quot;High&quot;&#10;    }&#10;  ],&#10;  &quot;total_test_cases&quot;: 6&#10;}&#10;```&#10;&#10;#### Extract and Upload Test Cases&#10;```http&#10;POST /api/stories/{story_id}/test-cases/upload&#10;```&#10;&#10;Extracts test cases and uploads them directly to Azure DevOps as child work items.&#10;&#10;**Response Example:**&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;story_id&quot;: &quot;12345&quot;,&#10;  &quot;story_title&quot;: &quot;User Login Feature&quot;, &#10;  &quot;uploaded_test_cases&quot;: [&#10;    {&#10;      &quot;id&quot;: 67890,&#10;      &quot;title&quot;: &quot;Valid Login with Email and Password&quot;,&#10;      &quot;type&quot;: &quot;positive&quot;&#10;    }&#10;  ],&#10;  &quot;errors&quot;: [],&#10;  &quot;total_uploaded&quot;: 6,&#10;  &quot;total_errors&quot;: 0&#10;}&#10;```&#10;&#10;### Monitor Control&#10;- `GET /api/status` - Get monitoring service status&#10;- `POST /api/start` - Start monitoring service&#10;- `POST /api/stop` - Stop monitoring service&#10;- `POST /api/check` - Force check for changes&#10;&#10;### Epic Management&#10;- `GET /api/epics` - List monitored epics&#10;- `POST /api/epics/{epic_id}` - Add epic to monitoring&#10;- `DELETE /api/epics/{epic_id}` - Remove epic from monitoring&#10;&#10;### Configuration &amp; Logs&#10;- `GET /api/config` - Get current configuration&#10;- `PUT /api/config` - Update configuration&#10;- `GET /api/logs?lines=50` - Get recent log entries&#10;- `DELETE /api/logs/clear` - Clear logs from UI display&#10;&#10;# ADO_StoryTestCaseExtraction&#10;" />
              <option name="updatedContent" value="# ADO Story Extractor &#10;&#10;## Overview&#10;&#10;A **Python-based Azure DevOps (ADO) Story Extractor** that uses AI to automatically extract user stories from requirements/epics and manage them in Azure DevOps. The system provides intelligent monitoring, change detection, and synchronization capabilities with both CLI and API interfaces.&#10;&#10;##  Key Features&#10;&#10;- ** Modern Web Dashboard**: Beautiful, responsive interface with dark theme support&#10;- ** AI-Powered Extraction**: Uses OpenAI GPT to analyze requirements and generate user stories&#10;- ** Change Detection**: Monitors epics using content hashing for automatic updates&#10;- **⚡ Automatic Synchronization**: Creates, updates, and manages user stories in ADO&#10;- ** Snapshot Tracking**: Maintains history for change detection and rollback&#10;- **️ Persistent State Management**: Tracks processed epics to prevent duplicate extractions&#10;- ** Graceful Shutdown**: Saves snapshots before shutdown and resumes from last state&#10;- ** Smart Epic Processing**: Skips unchanged epics and prevents re-extraction of existing stories&#10;- ** REST API**: Provides API endpoints for integration with other systems&#10;- **⌨️ Comprehensive CLI**: Multiple interfaces for different use cases&#10;- ** Background Monitoring**: Continuous epic monitoring with configurable polling&#10;- ** Production Ready**: Comprehensive logging, error handling, and retry mechanisms&#10;- ** Real-time UI**: Live updates, toast notifications, and intuitive controls&#10;- ** Safe Log Management**: UI-only log clearing that preserves files and snapshots&#10;- **⚙️ Configurable Work Item Types**: Choose between User Story/Task for stories and Issue/Test Case for test cases&#10;- ** Test Case Extraction**: Built-in AI-powered test case generation from user stories&#10;- ** Duplicate Prevention**: Intelligent duplicate detection prevents story re-creation&#10;- **️ Dashboard Configuration**: Complete configuration management through the web interface&#10;&#10;##  Project Structure&#10;&#10;```&#10;ado-story-extractor/&#10;├── src/                    # Core application logic&#10;│   ├── agent.py           # Main orchestrator/coordinator&#10;│   ├── ado_client.py      # Azure DevOps API client&#10;│   ├── story_extractor.py # AI-powered story extraction&#10;│   ├── test_case_extractor.py # AI-powered test case extraction&#10;│   ├── models.py          # Data models (Pydantic)&#10;│   ├── monitor.py         # Background monitoring service&#10;│   └── monitor_api.py     # REST API for monitoring&#10;├── templates/             # Web dashboard templates&#10;│   └── dashboard.html     # Modern web interface with configuration UI&#10;├── static/                # Static assets for web dashboard&#10;│   └── styles.css         # Custom CSS styles&#10;├── config/&#10;│   └── settings.py        # Configuration management with work item types&#10;├── tests/                 # Test suite&#10;├── snapshots/             # Epic snapshots for change detection&#10;├── logs/                  # Application logs&#10;├── monitor_state.json     # Persistent state tracking for processed epics&#10;├── monitor_config.json    # Monitor configuration settings&#10;├── main.py               # Basic CLI interface&#10;├── main_enhanced.py      # Enhanced CLI with epic sync&#10;├── monitor_daemon.py     # Monitoring daemon runner&#10;└── demo_epic_sync.py     # Demo/showcase script&#10;```&#10;&#10;##  Quick Start&#10;&#10;### Prerequisites&#10;&#10;1. **Python 3.8+** installed&#10;2. **Azure DevOps** account with appropriate permissions&#10;3. **OpenAI API** key for story extraction&#10;&#10;### Setup&#10;&#10;1. **Clone and Install Dependencies**:&#10;   ```bash&#10;   git clone &lt;your-repo&gt;&#10;   cd ado-story-extractor&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;   **Dependencies include:**&#10;   - `flask` - Web framework for the dashboard&#10;   - `azure-devops` - Azure DevOps integration&#10;   - `openai` - AI-powered story extraction&#10;   - `requests` - HTTP client for API calls&#10;   - `pydantic` - Data validation and modeling&#10;   - `pytest` - Testing framework&#10;&#10;2. **Configure Environment**:&#10;   ```bash&#10;   cp .env.example .env&#10;   # Edit .env with your credentials&#10;   ```&#10;&#10;   Required variables:&#10;   ```env&#10;   ADO_ORGANIZATION=your-organization&#10;   ADO_PROJECT=your-project&#10;   ADO_PAT=your-personal-access-token&#10;   OPENAI_API_KEY=your-openai-api-key&#10;   ```&#10;&#10;3. **Validate Setup**:&#10;   ```bash&#10;   python main.py validate-config&#10;   ```&#10;&#10;###  Starting Points&#10;&#10;#### **Option 1: Web Dashboard (Recommended for New Users)**&#10;**Modern, user-friendly interface with no command-line required:**&#10;&#10;```bash&#10;# Start the web dashboard&#10;python monitor_daemon.py --mode api --host 127.0.0.1 --port 5000&#10;&#10;# Open your browser to: http://127.0.0.1:5000/&#10;```&#10;&#10;**Features available in the dashboard:**&#10;- ✅ Start/stop monitoring with one click&#10;- ✅ Add/remove epics visually&#10;- ✅ Edit configuration through forms&#10;- ✅ View real-time logs&#10;- ✅ Dark/light theme toggle&#10;- ✅ Responsive design for all devices&#10;&#10;#### **Option 2: Demo Mode (Great for Understanding the System)**&#10;**Best way to understand the system without real credentials:**&#10;&#10;```bash&#10;python demo_epic_sync.py&#10;```&#10;&#10;This showcases all features with mock data and explains the workflow.&#10;&#10;#### **Option 3: Basic CLI Usage**&#10;**Primary entry point for basic functionality:**&#10;&#10;```bash&#10;# Validate your configuration&#10;python main.py validate-config&#10;&#10;# Check available work item types in your project&#10;python main.py check-types&#10;&#10;# Process a single requirement/epic&#10;python main.py process 123&#10;&#10;# Preview stories without uploading to ADO&#10;python main.py preview 123&#10;&#10;# Process all requirements with filtering&#10;python main.py process-all --state Active&#10;&#10;# Get requirement summary&#10;python main.py summary 123&#10;&#10;# Show how stories will appear in ADO&#10;python main.py show-format 123&#10;```&#10;&#10;#### **Option 3: Enhanced Epic Synchronization**&#10;**For advanced epic synchronization with change detection:**&#10;&#10;```bash&#10;# Synchronize an epic with automatic change detection&#10;python main_enhanced.py sync-epic 12345&#10;&#10;# Synchronize with snapshot tracking for history&#10;python main_enhanced.py sync-epic 12345 --snapshot snapshots/epic_12345.json&#10;&#10;# Preview what changes would be made&#10;python main_enhanced.py preview-epic 12345&#10;&#10;# Process single requirement (original functionality)&#10;python main_enhanced.py process 12345&#10;```&#10;&#10;#### **Option 4: Continuous Monitoring**&#10;**For background monitoring and automatic synchronization:**&#10;&#10;```bash&#10;# Create default monitoring configuration&#10;python monitor_daemon.py --create-config&#10;&#10;# Edit monitor_config.json to add your epic IDs&#10;# Then run in standalone mode&#10;python monitor_daemon.py --mode standalone&#10;&#10;# Or run with REST API for external integration&#10;python monitor_daemon.py --mode api --host 0.0.0.0 --port 8080&#10;```&#10;&#10;##  Usage Examples&#10;&#10;### Basic Story Extraction&#10;```bash&#10;# Extract stories from a requirement and upload to ADO&#10;python main.py process 456&#10;&#10;# Just extract and preview (no upload)&#10;python main.py preview 456&#10;```&#10;&#10;### Epic Synchronization with Change Detection&#10;```bash&#10;# Initial sync of an epic&#10;python main_enhanced.py sync-epic 789&#10;&#10;# Subsequent syncs will detect changes automatically&#10;python main_enhanced.py sync-epic 789 --snapshot snapshots/epic_789.json&#10;```&#10;&#10;### Monitoring Setup&#10;```bash&#10;# Setup monitoring configuration&#10;python monitor_daemon.py --create-config&#10;&#10;# Edit monitor_config.json:&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;],&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;log_level&quot;: &quot;INFO&quot;&#10;}&#10;&#10;# Start monitoring&#10;python monitor_daemon.py --mode standalone&#10;```&#10;&#10;### API Integration&#10;```bash&#10;# Start API server&#10;python monitor_daemon.py --mode api --port 5000&#10;&#10;# API endpoints will be available at:&#10;# http://localhost:5000/api/health&#10;# http://localhost:5000/api/status&#10;# http://localhost:5000/api/force-check&#10;```&#10;&#10;### Web Dashboard Integration&#10;```bash&#10;# Start API server with web dashboard&#10;python monitor_daemon.py --mode api --port 5000&#10;&#10;# Access the modern web dashboard at:&#10;# http://localhost:5000/&#10;&#10;# API endpoints available at:&#10;# http://localhost:5000/api/health&#10;# http://localhost:5000/api/status&#10;# http://localhost:5000/api/force-check&#10;```&#10;&#10;##  Web Dashboard&#10;&#10;### Modern Management Interface&#10;The system now includes a **beautiful, modern web dashboard** built with Tailwind CSS and Alpine.js for comprehensive EPIC monitoring management.&#10;&#10;####  Dashboard Features&#10;- **Monitor Control Panel**: Start/stop monitoring service with real-time status&#10;- **Epic Management**: Add/remove epics from monitoring with live updates&#10;- **Configuration Editor**: Edit monitor settings through an intuitive modal interface&#10;- **Live Log Viewer**: Real-time log streaming with UI-only clearing (preserves files)&#10;- **Dark Theme Support**: Toggle between light and dark modes with persistence&#10;- **Toast Notifications**: User-friendly feedback for all actions&#10;- **Responsive Design**: Works perfectly on desktop, tablet, and mobile&#10;- **Real-time Updates**: Auto-refreshing status and epic information&#10;&#10;####  Dashboard Sections&#10;&#10;1. **Monitor Status Panel**&#10;   - Current monitoring state (Running/Stopped)&#10;   - Start/stop buttons with loading states&#10;   - Real-time status indicators&#10;&#10;2. **Epic Management**&#10;   - List all monitored epics with details&#10;   - Add new epics with validation&#10;   - Remove epics with confirmation&#10;   - Epic status and last sync information&#10;&#10;3. **Configuration Panel**&#10;   - Edit poll intervals, retry settings&#10;   - Toggle auto-sync and auto-extraction&#10;   - Modify log levels and epic lists&#10;   - Validation and error handling&#10;&#10;4. **Log Viewer**&#10;   - Real-time log streaming (last 50 lines)&#10;   - Clear logs from display (preserves actual log files)&#10;   - Formatted log display with timestamps&#10;   - Auto-scroll to latest entries&#10;&#10;5. **System Information**&#10;   - Health status monitoring&#10;   - Configuration summary&#10;   - Performance metrics&#10;&#10;####  Dashboard Configuration&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 30,&#10;  &quot;max_concurrent_syncs&quot;: 3,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;log_level&quot;: &quot;INFO&quot;,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;]&#10;}&#10;```&#10;&#10;####  Getting Started with Dashboard&#10;1. **Start the API server**:&#10;   ```bash&#10;   python monitor_daemon.py --mode api --host 127.0.0.1 --port 5000&#10;   ```&#10;&#10;2. **Open your browser** to `http://127.0.0.1:5000/`&#10;&#10;3. **Key Features Available**:&#10;   - ✅ Start/stop monitor with one click&#10;   - ✅ Add/remove epics dynamically&#10;   - ✅ Edit configuration without restarting&#10;   - ✅ View real-time logs&#10;   - ✅ Toggle dark/light theme&#10;   - ✅ Clear log display (keeps files intact)&#10;&#10;####  Dashboard Benefits&#10;- **User-Friendly**: No command-line knowledge required&#10;- **Real-time**: Live updates and instant feedback&#10;- **Professional**: Modern, clean interface design&#10;- **Responsive**: Works on all screen sizes&#10;- **Safe**: UI-only log clearing preserves snapshots&#10;- **Persistent**: Settings and preferences saved locally&#10;&#10;##  Configuration&#10;&#10;### Environment Variables&#10;&#10;| Variable | Description | Required |&#10;|----------|-------------|----------|&#10;| `ADO_ORGANIZATION` | Azure DevOps organization name | Yes |&#10;| `ADO_PROJECT` | Project name in ADO | Yes |&#10;| `ADO_PAT` | Personal Access Token with work item permissions | Yes |&#10;| `OPENAI_API_KEY` | OpenAI API key for GPT access | Yes |&#10;| `ADO_REQUIREMENT_TYPE` | Work item type for requirements (default: &quot;Epic&quot;) | No |&#10;| `ADO_USER_STORY_TYPE` | Work item type for user stories (default: &quot;User Story&quot;) | No |&#10;| `OPENAI_MAX_RETRIES` | Max retry attempts for OpenAI API (default: 3) | No |&#10;| `OPENAI_RETRY_DELAY` | Delay between retries in seconds (default: 5) | No |&#10;| `ADO_STORY_EXTRACTION_TYPE` | Work item type for story extraction (User Story/Task) | No |&#10;| `ADO_TEST_CASE_EXTRACTION_TYPE` | Work item type for test case extraction (Issue/Test Case) | No |&#10;&#10;### Monitor Configuration (`monitor_config.json`)&#10;&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 300,&#10;  &quot;max_concurrent_syncs&quot;: 3,&#10;  &quot;snapshot_directory&quot;: &quot;snapshots&quot;,&#10;  &quot;log_level&quot;: &quot;INFO&quot;,&#10;  &quot;epic_ids&quot;: [&quot;123&quot;, &quot;456&quot;],&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;notification_webhook&quot;: null,&#10;  &quot;retry_attempts&quot;: 3,&#10;  &quot;retry_delay_seconds&quot;: 60&#10;}&#10;```&#10;&#10;##  Testing&#10;&#10;```bash&#10;# Run all tests&#10;pytest&#10;&#10;# Run with coverage&#10;pytest --cov=src&#10;&#10;# Run specific test file&#10;pytest tests/test_story_extractor.py&#10;```&#10;&#10;##  How It Works&#10;&#10;### Story Extraction Process&#10;1. **Fetch Requirement**: Retrieves epic/requirement from Azure DevOps&#10;2. **AI Analysis**: Uses OpenAI GPT to analyze content and extract user stories&#10;3. **Story Generation**: Creates structured user stories with acceptance criteria&#10;4. **ADO Integration**: Uploads stories as work items linked to parent requirement&#10;5. **Relationship Management**: Maintains parent-child relationships in ADO&#10;&#10;### Change Detection &amp; Monitoring&#10;1. **Content Hashing**: Generates SHA256 hash of epic title + description&#10;2. **Snapshot Comparison**: Compares current hash with stored snapshot&#10;3. **Change Triggering**: Automatic re-extraction when changes detected&#10;4. **Smart Synchronization**: Updates existing stories or creates new ones&#10;5. **Continuous Monitoring**: Background service polls for changes&#10;6. **Graceful Shutdown**: Saves all snapshots before stopping&#10;7. **Persistent State**: Tracks processed epics to prevent duplicate extractions&#10;8. **Resume Capability**: Continues monitoring from last known state after restart&#10;&#10;### Story Synchronization Logic&#10;- **New Stories**: Creates fresh work items in ADO&#10;- **Similar Stories**: Uses fuzzy matching to identify existing stories&#10;- **Updates**: Modifies existing stories when content changes significantly&#10;- **Preservation**: Leaves unchanged stories untouched&#10;&#10;## ️ Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **Configuration Errors**:&#10;   ```bash&#10;   python main.py validate-config&#10;   ```&#10;&#10;2. **ADO Connection Issues**:&#10;   ```bash&#10;   python main.py check-types&#10;   ```&#10;&#10;3. **Work Item Type Mismatches**:&#10;   - Check available types with `check-types` command&#10;   - Update `ADO_REQUIREMENT_TYPE` and `ADO_USER_STORY_TYPE` in `.env`&#10;&#10;4. **OpenAI API Issues**:&#10;   - Verify API key is valid&#10;   - Check rate limits and quotas&#10;   - Review logs for specific error messages&#10;&#10;### Logs&#10;- Application logs: `logs/epic_monitor.log`&#10;- Console output with debug information&#10;- Structured logging with timestamps and levels&#10;&#10;##  Data Safety Features&#10;&#10;### UI-Only Log Clearing&#10;The dashboard includes a **safe log clearing feature** that preserves important data:&#10;&#10;- **Display Clearing**: Clears logs from the web interface only&#10;- **File Preservation**: Actual log files remain untouched&#10;- **Snapshot Protection**: All epic snapshots and history are preserved&#10;- **User Confirmation**: Clear confirmation dialog explains the behavior&#10;- **Status Messages**: Success notifications confirm files are safe&#10;&#10;```javascript&#10;// Dashboard implementation ensures data safety&#10;clearLogs() {&#10;    // Only clears UI display: this.logs = []&#10;    // Never deletes: logs/epic_monitor.log&#10;    // Never deletes: snapshots/*.json&#10;}&#10;```&#10;&#10;### Duplicate Prevention System&#10;Advanced state management prevents duplicate story extraction:&#10;&#10;- **State Tracking**: `monitor_state.json` tracks processed epics&#10;- **Epic Flags**: Each epic has a `stories_extracted` boolean flag&#10;- **Persistent Storage**: State survives service restarts&#10;- **Smart Checks**: Multiple validation layers prevent re-processing&#10;- **Logging**: Clear audit trail of what was processed when&#10;&#10;## Daemon Enhancement: Smart State Management and Snapshot Handling&#10;&#10;The Enhanced ADO Story Extractor daemon now includes sophisticated state management that prevents duplicate story extractions and ensures reliable operation across restarts.&#10;&#10;###  **LATEST**: Persistent State Management&#10;- **Snapshot on Shutdown**: Automatically saves all epic snapshots before stopping&#10;- **State Persistence**: Tracks which epics have been processed to prevent re-extraction&#10;- **Resume from Last State**: Continues monitoring exactly where it left off after restart&#10;- **Skip Unchanged Epics**: Only processes epics that have actual content changes&#10;- **Duplicate Prevention**: Never re-extracts stories for epics that already have them&#10;&#10;###  **ENHANCED**: Auto-Extract Stories from New Epics&#10;&#10;## Features&#10;&#10;###  **NEW**: Auto-Extract Stories from New Epics&#10;- **Automatic Discovery**: Daemon continuously scans Azure DevOps for new epics&#10;- **Immediate Processing**: When a new epic is detected, stories are automatically extracted using AI&#10;- **Configurable**: Can be enabled/disabled via the `auto_extract_new_epics` configuration option&#10;- **Smart Integration**: Works alongside existing change detection for modified epics&#10;&#10;###  **EXISTING**: Change Detection and Sync&#10;- **Content Monitoring**: Tracks changes in epic title and description using SHA256 hashing&#10;- **Automatic Re-sync**: Re-extracts and updates stories when epic content changes&#10;- **Snapshot Management**: Maintains historical snapshots for change comparison&#10;&#10;## Configuration&#10;&#10;### New Configuration Option&#10;&#10;Add the following to your `monitor_config.json`:&#10;&#10;```json&#10;{&#10;  &quot;poll_interval_seconds&quot;: 30,&#10;  &quot;auto_sync&quot;: true,&#10;  &quot;auto_extract_new_epics&quot;: true,&#10;  &quot;epic_ids&quot;: [&quot;1&quot;],&#10;  ...&#10;}&#10;```&#10;&#10;### Configuration Parameters&#10;&#10;| Parameter | Type | Default | Description |&#10;|-----------|------|---------|-------------|&#10;| `auto_extract_new_epics` | boolean | `true` | Enable/disable automatic story extraction for new epics |&#10;| `auto_sync` | boolean | `true` | Enable/disable automatic sync for changed epics |&#10;| `poll_interval_seconds` | integer | `300` | How often to check for new epics and changes |&#10;&#10;## How It Works&#10;&#10;### 1. Epic Detection Process&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Scan Azure DevOps│ -[200d&gt;[200d│ Compare with    │ -[200d&gt;[200d│ Identify New    │&#10;│ for All Epics   │    │ Monitored List  │    │ Epics           │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 2. New Epic Processing&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Add Epic to     │ -[200d&gt;[200d│ Extract Stories │ -[200d&gt;[200d│ Create Stories  │&#10;│ Monitoring      │    │ using AI        │    │ in Azure DevOps │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 3. Ongoing Monitoring&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Monitor for     │ -[200d&gt;[200d│ Detect Changes  │ -[200d&gt;[200d│ Re-sync Stories │&#10;│ Content Changes │    │ via Hashing     │    │ if Changed      │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;### 4. Test Case Generation Process&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ User Story      │ -[200d&gt;[200d│ AI Analysis     │ -[200d&gt;[200d│ Generate Test   │&#10;│ Created         │    │ &amp; Test Planning │    │ Cases           │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;         ↓                       ↓                       ↓&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│ Upload to ADO   │ ←--│ Categorize by   │ ←--│ Include:        │&#10;│ as Child Items  │    │ Type &amp; Priority │    │ • Positive Tests│&#10;└─────────────────┘    └─────────────────┘    │ • Negative Tests│&#10;                                              │ • Edge Cases    │&#10;                                              └─────────────────┘&#10;```&#10;&#10;###  Test Case Extraction Workflow&#10;&#10;#### Automatic Integration&#10;- **Seamless Workflow**: Test cases are automatically generated after each user story creation&#10;- **Smart Analysis**: AI analyzes user story content, description, and acceptance criteria&#10;- **Comprehensive Coverage**: Generates positive, negative, and edge test scenarios&#10;&#10;#### Test Case Types&#10;- **Positive Tests**: Happy path scenarios with valid inputs and expected user behavior&#10;- **Negative Tests**: Error conditions, invalid inputs, and unauthorized access scenarios  &#10;- **Edge Cases**: Boundary values, extreme conditions, and limit testing scenarios&#10;&#10;#### Generated Information&#10;Each test case includes:&#10;- **Title**: Clear, descriptive test case name&#10;- **Description**: What the test case validates&#10;- **Type**: positive, negative, or edge&#10;- **Priority**: High, Medium, or Low&#10;- **Preconditions**: Prerequisites for test execution&#10;- **Test Steps**: Detailed step-by-step instructions&#10;- **Expected Results**: Clear description of expected outcomes&#10;&#10;#### ADO Integration&#10;- Test cases are created as &quot;Test Case&quot; work items in Azure DevOps&#10;- Automatically linked as child items to their parent user stories&#10;- Properly formatted with HTML for rich text display in ADO&#10;- Include all test metadata and categorization&#10;&#10;## Benefits&#10;&#10;### For Development Teams&#10;- **Zero Manual Intervention**: New epics are automatically processed&#10;- **Consistent Story Quality**: AI-powered extraction ensures consistent user story format&#10;- **Real-time Updates**: Stories are available immediately after epic creation&#10;- **Change Tracking**: Modifications to epics trigger automatic story updates&#10;&#10;### For Project Managers&#10;- **Complete Coverage**: No epics are missed or forgotten&#10;- **Audit Trail**: Full history of when stories were created/updated&#10;- **Flexible Control**: Can disable auto-extraction if manual review is preferred&#10;- **Status Visibility**: Clear logging shows what was processed and when&#10;&#10;## Migration Guide&#10;&#10;### Existing Users&#10;1. Update your `monitor_config.json` to include `&quot;auto_extract_new_epics&quot;: true`&#10;2. Restart the daemon - no other changes required&#10;3. New epics will be automatically processed on the next polling cycle&#10;&#10;### New Users&#10;1. Follow the standard setup process in the main README&#10;2. The enhanced functionality is enabled by default&#10;3. Start the daemon with `python3 monitor_daemon.py --mode standalone`&#10;&#10;## Technical Details&#10;&#10;### Epic Detection Algorithm&#10;- Fetches all epics from Azure DevOps using work item type filtering&#10;- Compares against currently monitored epic set&#10;- Identifies new epics using set difference operation&#10;- Processes new epics immediately upon detection&#10;&#10;### Story Extraction Process&#10;- Uses OpenAI GPT to analyze epic content&#10;- Generates structured user stories with acceptance criteria&#10;- Creates work items in Azure DevOps with proper parent-child relationships&#10;- Maintains snapshots for future change detection&#10;&#10;### Error Handling&#10;- Retry logic for failed API calls (configurable attempts and delays)&#10;- Graceful handling of epic access issues&#10;- Automatic removal of epics that become inaccessible&#10;- Comprehensive logging for troubleshooting&#10;&#10;## Performance Considerations&#10;&#10;- **Polling Frequency**: Default 30-second intervals balance responsiveness with API usage&#10;- **Concurrent Processing**: Configurable max concurrent syncs (default: 3)&#10;- **API Rate Limits**: Built-in retry logic respects Azure DevOps and OpenAI limits&#10;- **Memory Usage**: Efficient snapshot storage and cleanup&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **Stories not being extracted for new epics**&#10;   - Check `auto_extract_new_epics` is set to `true`&#10;   - Verify Azure DevOps and OpenAI credentials&#10;   - Review logs for specific error messages&#10;&#10;2. **Duplicate processing**&#10;   - Daemon prevents duplicate processing through state tracking&#10;   - Snapshots ensure epics are only processed when actually new&#10;&#10;3. **Performance issues**&#10;   - Adjust `poll_interval_seconds` to reduce API calls&#10;   - Decrease `max_concurrent_syncs` if hitting rate limits&#10;&#10;### Log Analysis&#10;```bash&#10;# Monitor daemon activity&#10;tail -f logs/epic_monitor.log&#10;&#10;# Check for specific epic processing&#10;grep &quot;Epic 42&quot; logs/epic_monitor.log&#10;```&#10;&#10;## Future Enhancements&#10;&#10;- Webhook support for real-time epic notifications&#10;- Custom story templates per epic type&#10;- Integration with project management tools&#10;- Advanced story prioritization based on epic metadata&#10;&#10;##  Contributing&#10;&#10;Feel free to explore the code and adapt it to your needs! The project is well-structured with:&#10;- Comprehensive test coverage&#10;- Clean separation of concerns&#10;- Extensive documentation&#10;- Production-ready error handling&#10;&#10;---&#10;&#10;**Ready to get started? Run the demo first:** `python demo_epic_sync.py` &#10;&#10;##  REST API Endpoints&#10;&#10;### Test Case Management&#10;&#10;#### Extract Test Cases&#10;```http&#10;POST /api/stories/{story_id}/test-cases&#10;```&#10;&#10;Extracts comprehensive test cases for a specific user story without uploading to ADO.&#10;&#10;**Response Example:**&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;story_id&quot;: &quot;12345&quot;,&#10;  &quot;story_title&quot;: &quot;User Login Feature&quot;,&#10;  &quot;test_cases&quot;: [&#10;    {&#10;      &quot;title&quot;: &quot;Valid Login with Email and Password&quot;,&#10;      &quot;description&quot;: &quot;Test successful login with valid credentials&quot;,&#10;      &quot;test_type&quot;: &quot;positive&quot;,&#10;      &quot;preconditions&quot;: [&quot;User has valid account&quot;, &quot;System is online&quot;],&#10;      &quot;test_steps&quot;: [&#10;        &quot;Navigate to login page&quot;,&#10;        &quot;Enter valid email address&quot;,&#10;        &quot;Enter valid password&quot;,&#10;        &quot;Click login button&quot;&#10;      ],&#10;      &quot;expected_result&quot;: &quot;User is successfully logged in and redirected to dashboard&quot;,&#10;      &quot;priority&quot;: &quot;High&quot;&#10;    },&#10;    {&#10;      &quot;title&quot;: &quot;Login with Invalid Credentials&quot;,&#10;      &quot;description&quot;: &quot;Test system behavior with incorrect login information&quot;,&#10;      &quot;test_type&quot;: &quot;negative&quot;,&#10;      &quot;preconditions&quot;: [&quot;System is online&quot;],&#10;      &quot;test_steps&quot;: [&#10;        &quot;Navigate to login page&quot;,&#10;        &quot;Enter invalid email address&quot;,&#10;        &quot;Enter incorrect password&quot;,&#10;        &quot;Click login button&quot;&#10;      ],&#10;      &quot;expected_result&quot;: &quot;Error message displayed: 'Invalid credentials'&quot;,&#10;      &quot;priority&quot;: &quot;High&quot;&#10;    }&#10;  ],&#10;  &quot;total_test_cases&quot;: 6&#10;}&#10;```&#10;&#10;#### Extract and Upload Test Cases&#10;```http&#10;POST /api/stories/{story_id}/test-cases/upload&#10;```&#10;&#10;Extracts test cases and uploads them directly to Azure DevOps as child work items.&#10;&#10;**Response Example:**&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;story_id&quot;: &quot;12345&quot;,&#10;  &quot;story_title&quot;: &quot;User Login Feature&quot;, &#10;  &quot;uploaded_test_cases&quot;: [&#10;    {&#10;      &quot;id&quot;: 67890,&#10;      &quot;title&quot;: &quot;Valid Login with Email and Password&quot;,&#10;      &quot;type&quot;: &quot;positive&quot;&#10;    }&#10;  ],&#10;  &quot;errors&quot;: [],&#10;  &quot;total_uploaded&quot;: 6,&#10;  &quot;total_errors&quot;: 0&#10;}&#10;```&#10;&#10;### Monitor Control&#10;- `GET /api/status` - Get monitoring service status&#10;- `POST /api/start` - Start monitoring service&#10;- `POST /api/stop` - Stop monitoring service&#10;- `POST /api/check` - Force check for changes&#10;&#10;### Epic Management&#10;- `GET /api/epics` - List monitored epics&#10;- `POST /api/epics/{epic_id}` - Add epic to monitoring&#10;- `DELETE /api/epics/{epic_id}` - Remove epic from monitoring&#10;&#10;### Configuration &amp; Logs&#10;- `GET /api/config` - Get current configuration&#10;- `PUT /api/config` - Update configuration&#10;- `GET /api/logs?lines=50` - Get recent log entries&#10;- `DELETE /api/logs/clear` - Clear logs from UI display&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config/settings.py" />
              <option name="originalContent" value="import os&#10;from dotenv import load_dotenv&#10;&#10;class Settings:&#10;    &quot;&quot;&quot;Application settings loaded from environment variables&quot;&quot;&quot;&#10;&#10;    # Load environment variables&#10;    print(&quot;[CONFIG] Loading environment variables...&quot;)&#10;    load_dotenv()&#10;&#10;    # Azure DevOps settings&#10;    ADO_ORGANIZATION = os.getenv('ADO_ORGANIZATION')&#10;    ADO_PROJECT = os.getenv('ADO_PROJECT')&#10;    ADO_PAT = os.getenv('ADO_PAT')&#10;    ADO_BASE_URL = &quot;https://dev.azure.com&quot;&#10;&#10;    # Work item types&#10;    REQUIREMENT_TYPE = os.getenv('ADO_REQUIREMENT_TYPE', 'Epic')&#10;    USER_STORY_TYPE = os.getenv('ADO_USER_STORY_TYPE', 'User Story')&#10;&#10;    # Story extraction work item type (Story or Task)&#10;    STORY_EXTRACTION_TYPE = os.getenv('ADO_STORY_EXTRACTION_TYPE', 'User Story')&#10;&#10;    # Test case extraction work item type (Issue or Test Case)&#10;    TEST_CASE_EXTRACTION_TYPE = os.getenv('ADO_TEST_CASE_EXTRACTION_TYPE', 'Issue')&#10;&#10;    # OpenAI settings&#10;    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')&#10;    OPENAI_MAX_RETRIES = int(os.getenv('OPENAI_MAX_RETRIES', 3))&#10;    try:&#10;        OPENAI_RETRY_DELAY = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;    except Exception:&#10;        OPENAI_RETRY_DELAY = 5&#10;    print(f&quot;[CONFIG] OPENAI_RETRY_DELAY: {OPENAI_RETRY_DELAY}&quot;)&#10;&#10;    @classmethod&#10;    def validate(cls):&#10;        &quot;&quot;&quot;Validate required settings are present&quot;&quot;&quot;&#10;        print(&quot;[CONFIG] Validating settings...&quot;)&#10;        missing = []&#10;&#10;        # Check Azure DevOps settings&#10;        if not cls.ADO_ORGANIZATION:&#10;            missing.append(&quot;ADO_ORGANIZATION&quot;)&#10;            print(&quot;[ERROR] ADO_ORGANIZATION is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] ADO_ORGANIZATION: {cls.ADO_ORGANIZATION}&quot;)&#10;&#10;        if not cls.ADO_PROJECT:&#10;            missing.append(&quot;ADO_PROJECT&quot;)&#10;            print(&quot;[ERROR] ADO_PROJECT is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] ADO_PROJECT: {cls.ADO_PROJECT}&quot;)&#10;&#10;        if not cls.ADO_PAT:&#10;            missing.append(&quot;ADO_PAT&quot;)&#10;            print(&quot;[ERROR] ADO_PAT is not set&quot;)&#10;        else:&#10;            print(&quot;[CONFIG] ADO_PAT: [SECURED]&quot;)&#10;&#10;        if not cls.OPENAI_API_KEY:&#10;            missing.append(&quot;OPENAI_API_KEY&quot;)&#10;            print(&quot;[ERROR] OPENAI_API_KEY is not set&quot;)&#10;        else:&#10;            print(&quot;[CONFIG] OPENAI_API_KEY: [SECURED]&quot;)&#10;&#10;        if missing:&#10;            raise ValueError(&#10;                f&quot;Missing required environment variables: {', '.join(missing)}. &quot;&#10;                f&quot;Please check your .env file and ensure all required variables are set.&quot;&#10;            )&#10;" />
              <option name="updatedContent" value="import os&#10;from dotenv import load_dotenv&#10;&#10;class Settings:&#10;    &quot;&quot;&quot;Application settings loaded from environment variables&quot;&quot;&quot;&#10;&#10;    # Load environment variables&#10;    print(&quot;[CONFIG] Loading environment variables...&quot;)&#10;    load_dotenv()&#10;&#10;    # Azure DevOps settings&#10;    ADO_ORGANIZATION = os.getenv('ADO_ORGANIZATION')&#10;    ADO_PROJECT = os.getenv('ADO_PROJECT')&#10;    ADO_PAT = os.getenv('ADO_PAT')&#10;    ADO_BASE_URL = &quot;https://dev.azure.com&quot;&#10;&#10;    # Work item types&#10;    REQUIREMENT_TYPE = os.getenv('ADO_REQUIREMENT_TYPE', 'Epic')&#10;    USER_STORY_TYPE = os.getenv('ADO_USER_STORY_TYPE', 'User Story')&#10;&#10;    # Story extraction work item type (Story or Task)&#10;    STORY_EXTRACTION_TYPE = os.getenv('ADO_STORY_EXTRACTION_TYPE', 'User Story')&#10;&#10;    # Test case extraction work item type (Issue or Test Case)&#10;    TEST_CASE_EXTRACTION_TYPE = os.getenv('ADO_TEST_CASE_EXTRACTION_TYPE', 'Issue')&#10;&#10;    # OpenAI settings&#10;    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')&#10;    OPENAI_MAX_RETRIES = int(os.getenv('OPENAI_MAX_RETRIES', 3))&#10;    try:&#10;        OPENAI_RETRY_DELAY = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;    except Exception:&#10;        OPENAI_RETRY_DELAY = 5&#10;    print(f&quot;[CONFIG] OPENAI_RETRY_DELAY: {OPENAI_RETRY_DELAY}&quot;)&#10;&#10;    @classmethod&#10;    def get_available_work_item_types(cls):&#10;        &quot;&quot;&quot;Get available work item types for configuration&quot;&quot;&quot;&#10;        return {&#10;            'story_types': ['User Story', 'Task'],&#10;            'test_case_types': ['Issue', 'Test Case']&#10;        }&#10;&#10;    @classmethod&#10;    def validate(cls):&#10;        &quot;&quot;&quot;Validate required settings are present&quot;&quot;&quot;&#10;        print(&quot;[CONFIG] Validating settings...&quot;)&#10;        missing = []&#10;&#10;        # Check Azure DevOps settings&#10;        if not cls.ADO_ORGANIZATION:&#10;            missing.append(&quot;ADO_ORGANIZATION&quot;)&#10;            print(&quot;[ERROR] ADO_ORGANIZATION is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] ADO_ORGANIZATION: {cls.ADO_ORGANIZATION}&quot;)&#10;&#10;        if not cls.ADO_PROJECT:&#10;            missing.append(&quot;ADO_PROJECT&quot;)&#10;            print(&quot;[ERROR] ADO_PROJECT is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] ADO_PROJECT: {cls.ADO_PROJECT}&quot;)&#10;&#10;        if not cls.ADO_PAT:&#10;            missing.append(&quot;ADO_PAT&quot;)&#10;            print(&quot;[ERROR] ADO_PAT is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] ADO_PAT: {'*' * (len(cls.ADO_PAT) - 4) + cls.ADO_PAT[-4:]}&quot;)&#10;&#10;        # Check OpenAI settings&#10;        if not cls.OPENAI_API_KEY:&#10;            missing.append(&quot;OPENAI_API_KEY&quot;)&#10;            print(&quot;[ERROR] OPENAI_API_KEY is not set&quot;)&#10;        else:&#10;            print(f&quot;[CONFIG] OPENAI_API_KEY: {'*' * (len(cls.OPENAI_API_KEY) - 4) + cls.OPENAI_API_KEY[-4:]}&quot;)&#10;&#10;        print(f&quot;[CONFIG] Work Item Types - Story: {cls.STORY_EXTRACTION_TYPE}, Test Case: {cls.TEST_CASE_EXTRACTION_TYPE}&quot;)&#10;&#10;        if missing:&#10;            raise ValueError(f&quot;Missing required environment variables: {', '.join(missing)}&quot;)&#10;&#10;        print(&quot;[CONFIG] All required settings are present&quot;)&#10;        return True" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ado_client.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ado_client.py" />
              <option name="originalContent" value="import base64&#10;import json&#10;import hashlib&#10;from typing import List, Optional, Dict, Any&#10;from datetime import datetime&#10;import requests&#10;from azure.devops.v7_1.work_item_tracking import WorkItemTrackingClient&#10;from msrest.authentication import BasicAuthentication&#10;&#10;from config.settings import Settings&#10;from src.models import Requirement, ExistingUserStory, RequirementSnapshot&#10;&#10;class ADOClient:&#10;    &quot;&quot;&quot;Client for interacting with Azure DevOps APIs&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        Settings.validate()&#10;        self.organization = Settings.ADO_ORGANIZATION&#10;        self.project = Settings.ADO_PROJECT&#10;        self.pat = Settings.ADO_PAT&#10;        self.base_url = f&quot;https://dev.azure.com/{self.organization}&quot;&#10;&#10;        try:&#10;            print(&quot;[DEBUG] Initializing work item tracking client...&quot;)&#10;            # Create credentials&#10;            credentials = BasicAuthentication('', self.pat)&#10;&#10;            # Create work item tracking client directly&#10;            self.wit_client = WorkItemTrackingClient(&#10;                base_url=self.base_url,&#10;                creds=credentials&#10;            )&#10;            print(&quot;[DEBUG] Work item tracking client created successfully&quot;)&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to establish connection to Azure DevOps: {str(e)}&quot;)&#10;&#10;    def get_requirements(self, state_filter: Optional[str] = None, work_item_type: Optional[str] = None) -&gt; List[Requirement]:&#10;        &quot;&quot;&quot;Get all requirements from the project, optionally filtered by work item type (e.g., 'Epic').&quot;&quot;&quot;&#10;        try:&#10;            # Build WIQL query&#10;            wiql_query = f&quot;&quot;&quot;&#10;            SELECT [System.Id], [System.Title], [System.Description], [System.State]&#10;            FROM WorkItems&#10;            WHERE [System.TeamProject] = '{self.project}'&#10;            &quot;&quot;&quot;&#10;            if work_item_type:&#10;                wiql_query += f&quot; AND [System.WorkItemType] = '{work_item_type}'&quot;&#10;            else:&#10;                wiql_query += f&quot; AND [System.WorkItemType] = '{Settings.REQUIREMENT_TYPE}'&quot;&#10;            if state_filter:&#10;                wiql_query += f&quot; AND [System.State] = '{state_filter}'&quot;&#10;            # Execute query&#10;            wiql_result = self.wit_client.query_by_wiql({&quot;query&quot;: wiql_query})&#10;            if not wiql_result.work_items:&#10;                return []&#10;            # Get work item IDs&#10;            work_item_ids = [item.id for item in wiql_result.work_items]&#10;            # Get full work items&#10;            work_items = self.wit_client.get_work_items(&#10;                ids=work_item_ids,&#10;                fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;]&#10;            )&#10;            requirements = []&#10;            for item in work_items:&#10;                fields = item.fields&#10;                requirement = Requirement(&#10;                    id=str(item.id),  # Ensure id is always a string&#10;                    title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                    description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                    state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;                    url=item.url&#10;                )&#10;                requirements.append(requirement)&#10;            return requirements&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get requirements: {str(e)}&quot;)&#10;    &#10;    def get_requirement_by_id(self, requirement_id: str) -&gt; Optional[Requirement]:&#10;        &quot;&quot;&quot;Get a single requirement by string ID with detailed error messages&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(id=requirement_id)&#10;            if not work_item:&#10;                print(f&quot;[ERROR] No work item found for ID: {requirement_id}&quot;)&#10;                return None&#10;            return Requirement.from_ado_work_item(work_item)&#10;        except Exception as e:&#10;            print(f&quot;[AUTH/ADO ERROR] Failed to fetch requirement '{requirement_id}': {e}.\n&quot;&#10;                  f&quot;Check if your PAT is valid, has correct permissions, and if the organization/project/ID are correct.&quot;)&#10;            return None&#10;&#10;    def create_user_story(self, story_data: Dict[str, Any], parent_requirement_id: int) -&gt; int:&#10;        &quot;&quot;&quot;Create a user story and link it to a parent requirement&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Attempting to create user story for parent {parent_requirement_id}&quot;)&#10;            # Prepare work item data - ensure we're using System.Title and System.Description&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: story_data.get(&quot;System.Title&quot;, &quot;New User Story&quot;)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: story_data.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                }&#10;            ]&#10;&#10;            # Add any additional fields from story_data&#10;            for field, value in story_data.items():&#10;                if field not in [&quot;System.Title&quot;, &quot;System.Description&quot;]:&#10;                    document.append({&#10;                        &quot;op&quot;: &quot;add&quot;,&#10;                        &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                        &quot;value&quot;: value&#10;                    })&#10;&#10;            print(f&quot;[DEBUG] Document prepared for Azure DevOps: {document}&quot;)&#10;&#10;            # Create the work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=Settings.USER_STORY_TYPE&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created work item with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create work item: {str(e)}&quot;)&#10;                print(f&quot;[DEBUG] Project: {self.project}&quot;)&#10;                print(f&quot;[DEBUG] Type: {Settings.USER_STORY_TYPE}&quot;)&#10;                raise Exception(f&quot;Failed to create work item: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship if parent_requirement_id is provided&#10;            if parent_requirement_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between {parent_requirement_id} and {work_item.id}&quot;)&#10;                    self._create_parent_child_link(parent_requirement_id, work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link: {str(e)}&quot;)&#10;                    # Don't raise here, as the story was created successfully&#10;&#10;            return work_item.id&#10;            &#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_user_story: {str(e)}&quot;)&#10;            raise&#10;&#10;    def _create_parent_child_link(self, parent_id: int, child_id: int):&#10;        &quot;&quot;&quot;Create a parent-child relationship between work items&quot;&quot;&quot;&#10;        try:&#10;            # Create the link&#10;            document = [{&#10;                &quot;op&quot;: &quot;add&quot;,&#10;                &quot;path&quot;: &quot;/relations/-&quot;,&#10;                &quot;value&quot;: {&#10;                    &quot;rel&quot;: &quot;System.LinkTypes.Hierarchy-Forward&quot;,&#10;                    &quot;url&quot;: f&quot;{self.base_url}/{self.organization}/_apis/wit/workItems/{child_id}&quot;&#10;                }&#10;            }]&#10;            &#10;            self.wit_client.update_work_item(&#10;                document=document,&#10;                id=parent_id&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to create parent-child link: {str(e)}&quot;)&#10;    &#10;    def detect_changes_in_epic(self, epic_id: int) -&gt; Optional[RequirementSnapshot]:&#10;        &quot;&quot;&quot;Detect changes in an EPIC based on its requirement snapshot&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(&#10;                id=epic_id,&#10;                fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;, &quot;System.ChangedDate&quot;]&#10;            )&#10;            &#10;            fields = work_item.fields&#10;            &#10;            # Calculate a hash of the title and description for change detection&#10;            content_hash = hashlib.sha256((fields[&quot;System.Title&quot;] + fields[&quot;System.Description&quot;]).encode()).hexdigest()&#10;            &#10;            return RequirementSnapshot(&#10;                id=work_item.id,&#10;                title=fields[&quot;System.Title&quot;],&#10;                description=fields[&quot;System.Description&quot;],&#10;                state=fields[&quot;System.State&quot;],&#10;                last_modified=datetime.strptime(fields[&quot;System.ChangedDate&quot;], &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;),&#10;                content_hash=content_hash&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to detect changes in EPIC {epic_id}: {str(e)}&quot;)&#10;&#10;    def get_existing_user_stories(self, epic_id: int) -&gt; List[ExistingUserStory]:&#10;        &quot;&quot;&quot;Retrieve existing user stories for a given epic ID&quot;&quot;&quot;&#10;        try:&#10;            child_ids = self.get_child_stories(epic_id)&#10;            stories = []&#10;            if child_ids:&#10;                work_items = self.wit_client.get_work_items(&#10;                    ids=child_ids,&#10;                    fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;]&#10;                )&#10;                for item in work_items:&#10;                    fields = item.fields&#10;                    story = ExistingUserStory(&#10;                        id=item.id,&#10;                        title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                        description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                        state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;                        parent_id=epic_id&#10;                    )&#10;                    stories.append(story)&#10;            return stories&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to retrieve existing user stories for epic {epic_id}: {str(e)}&quot;)&#10;&#10;    def get_child_stories(self, requirement_id: int) -&gt; List[int]:&#10;        &quot;&quot;&quot;Get all child user stories for a requirement&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(&#10;                id=requirement_id,&#10;                expand=&quot;Relations&quot;&#10;            )&#10;            child_ids = []&#10;            if work_item.relations:&#10;                for relation in work_item.relations:&#10;                    if relation.rel == &quot;System.LinkTypes.Hierarchy-Forward&quot;:&#10;                        url_parts = relation.url.split('/')&#10;                        child_id = int(url_parts[-1])&#10;                        child_ids.append(child_id)&#10;            return child_ids&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get child stories for requirement {requirement_id}: {str(e)}&quot;)&#10;&#10;    def get_requirement_by_id(self, requirement_id) -&gt; Optional[Requirement]:&#10;        &quot;&quot;&quot;Get a single requirement by numeric ID or by title if not numeric&quot;&quot;&quot;&#10;        try:&#10;            # Try to convert to int for numeric IDs&#10;            try:&#10;                numeric_id = int(requirement_id)&#10;                work_item = self.wit_client.get_work_item(id=numeric_id)&#10;                if not work_item:&#10;                    print(f&quot;[ERROR] No work item found for ID: {requirement_id}&quot;)&#10;                    return None&#10;                return Requirement.from_ado_work_item(work_item)&#10;            except ValueError:&#10;                # Not a numeric ID, search by title&#10;                print(f&quot;[INFO] Requirement ID '{requirement_id}' is not numeric. Searching by title...&quot;)&#10;                wiql_query = f&quot;&quot;&quot;&#10;                SELECT [System.Id], [System.Title], [System.Description], [System.State]&#10;                FROM WorkItems&#10;                WHERE [System.Title] = '{requirement_id}'&#10;                AND [System.TeamProject] = '{self.project}'&#10;                &quot;&quot;&quot;&#10;                wiql_result = self.wit_client.query_by_wiql({&quot;query&quot;: wiql_query})&#10;                if not wiql_result.work_items:&#10;                    print(f&quot;[ERROR] No work item found with title: {requirement_id}&quot;)&#10;                    return None&#10;                work_item_id = wiql_result.work_items[0].id&#10;                work_item = self.wit_client.get_work_item(id=work_item_id)&#10;                return Requirement.from_ado_work_item(work_item)&#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Failed to get requirement by id or title: {str(e)}&quot;)&#10;            return None&#10;&#10;    def update_work_item(self, work_item_id: int, update_data: Dict[str, Any]) -&gt; bool:&#10;        &quot;&quot;&quot;Update an existing work item&quot;&quot;&quot;&#10;        try:&#10;            # Prepare update document&#10;            document = []&#10;            for field, value in update_data.items():&#10;                document.append({&#10;                    &quot;op&quot;: &quot;replace&quot;,&#10;                    &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                    &quot;value&quot;: value&#10;                })&#10;            &#10;            # Update the work item&#10;            self.wit_client.update_work_item(&#10;                document=document,&#10;                id=work_item_id&#10;            )&#10;            &#10;            return True&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to update work item {work_item_id}: {str(e)}&quot;)&#10;    &#10;    def get_work_item_types(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get all available work item types in the project&quot;&quot;&quot;&#10;        try:&#10;            work_item_types = self.wit_client.get_work_item_types(project=self.project)&#10;            return [wit.name for wit in work_item_types]&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get work item types: {str(e)}&quot;)&#10;&#10;    def create_test_case(self, test_case_data: Dict[str, Any], parent_story_id: str) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case and link it to a parent user story&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Attempting to create test case for parent story {parent_story_id}&quot;)&#10;            &#10;            # Prepare work item data for test case&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: test_case_data.get(&quot;System.Title&quot;, &quot;New Test Case&quot;)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: test_case_data.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                }&#10;            ]&#10;&#10;            # Add any additional fields from test_case_data&#10;            for field, value in test_case_data.items():&#10;                if field not in [&quot;System.Title&quot;, &quot;System.Description&quot;]:&#10;                    document.append({&#10;                        &quot;op&quot;: &quot;add&quot;,&#10;                        &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                        &quot;value&quot;: value&#10;                    })&#10;&#10;            print(f&quot;[DEBUG] Test case document prepared for Azure DevOps: {document}&quot;)&#10;&#10;            # Create the test case work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=&quot;Test Case&quot;  # Standard ADO test case work item type&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created test case with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create test case work item: {str(e)}&quot;)&#10;                raise Exception(f&quot;Failed to create test case work item: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship with the user story&#10;            if parent_story_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between story {parent_story_id} and test case {work_item.id}&quot;)&#10;                    self._create_parent_child_link(int(parent_story_id), work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link for test case: {str(e)}&quot;)&#10;                    # Don't raise here, as the test case was created successfully&#10;&#10;            return work_item.id&#10;            &#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_test_case: {str(e)}&quot;)&#10;            raise&#10;&#10;    def create_test_case_as_issue(self, test_case_data: Dict[str, Any], parent_story_id: Optional[int] = None) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case as an Issue work item in Azure DevOps&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Creating test case as Issue: {test_case_data.get('title', 'Unknown')}&quot;)&#10;&#10;            # Prepare the document for Issue creation&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: f&quot;[TEST] {test_case_data.get('title', '')}&quot;&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: self._format_test_case_description(test_case_data)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/Microsoft.VSTS.Common.Priority&quot;,&#10;                    &quot;value&quot;: self._map_priority_to_number(test_case_data.get('priority', 'Medium'))&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Tags&quot;,&#10;                    &quot;value&quot;: f&quot;TestCase;{test_case_data.get('test_type', 'functional')};AutoGenerated&quot;&#10;                }&#10;            ]&#10;&#10;            print(f&quot;[DEBUG] Document prepared for test case Issue: {document}&quot;)&#10;&#10;            # Create the Issue work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=&quot;Issue&quot;&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created test case Issue with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create test case Issue: {str(e)}&quot;)&#10;                print(f&quot;[DEBUG] Project: {self.project}&quot;)&#10;                print(f&quot;[DEBUG] Type: Issue&quot;)&#10;                raise Exception(f&quot;Failed to create test case Issue: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship if parent_story_id is provided&#10;            if parent_story_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between {parent_story_id} and {work_item.id}&quot;)&#10;                    self._create_parent_child_link(parent_story_id, work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link: {str(e)}&quot;)&#10;                    # Don't raise here, as the test case Issue was created successfully&#10;&#10;            return work_item.id&#10;&#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_test_case_as_issue: {str(e)}&quot;)&#10;            raise&#10;&#10;    def _format_test_case_description(self, test_case_data: Dict[str, Any]) -&gt; str:&#10;        &quot;&quot;&quot;Format test case data into a comprehensive description for Issue work item&quot;&quot;&quot;&#10;        description_parts = []&#10;&#10;        # Test case description&#10;        if test_case_data.get('description'):&#10;            description_parts.append(f&quot;**Test Description:**\n{test_case_data['description']}&quot;)&#10;&#10;        # Test type&#10;        if test_case_data.get('test_type'):&#10;            description_parts.append(f&quot;**Test Type:** {test_case_data['test_type'].title()}&quot;)&#10;&#10;        # Preconditions&#10;        if test_case_data.get('preconditions'):&#10;            preconditions_text = &quot;\n&quot;.join([f&quot;- {pc}&quot; for pc in test_case_data['preconditions']])&#10;            description_parts.append(f&quot;**Preconditions:**\n{preconditions_text}&quot;)&#10;&#10;        # Test steps&#10;        if test_case_data.get('test_steps'):&#10;            steps_text = &quot;\n&quot;.join([f&quot;{i+1}. {step}&quot; for i, step in enumerate(test_case_data['test_steps'])])&#10;            description_parts.append(f&quot;**Test Steps:**\n{steps_text}&quot;)&#10;&#10;        # Expected result&#10;        if test_case_data.get('expected_result'):&#10;            description_parts.append(f&quot;**Expected Result:**\n{test_case_data['expected_result']}&quot;)&#10;&#10;        return &quot;\n\n&quot;.join(description_parts)&#10;&#10;    def _map_priority_to_number(self, priority_text: str) -&gt; int:&#10;        &quot;&quot;&quot;Map priority text to Azure DevOps priority number&quot;&quot;&quot;&#10;        priority_mapping = {&#10;            'High': 1,&#10;            'Medium': 2,&#10;            'Low': 3&#10;        }&#10;        return priority_mapping.get(priority_text, 2)&#10;&#10;    def get_work_item_by_id(self, work_item_id: str):&#10;        &quot;&quot;&quot;Get a work item by ID&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = int(work_item_id)&#10;            work_item = self.wit_client.get_work_item(id=numeric_id)&#10;            return work_item&#10;        except ValueError:&#10;            raise Exception(f&quot;Invalid work item ID: {work_item_id}&quot;)&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get work item {work_item_id}: {str(e)}&quot;)&#10;" />
              <option name="updatedContent" value="import base64&#10;import json&#10;import hashlib&#10;from typing import List, Optional, Dict, Any&#10;from datetime import datetime&#10;import requests&#10;from azure.devops.v7_1.work_item_tracking import WorkItemTrackingClient&#10;from msrest.authentication import BasicAuthentication&#10;&#10;from config.settings import Settings&#10;from src.models import Requirement, ExistingUserStory, RequirementSnapshot&#10;&#10;class ADOClient:&#10;    &quot;&quot;&quot;Client for interacting with Azure DevOps APIs&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        Settings.validate()&#10;        self.organization = Settings.ADO_ORGANIZATION&#10;        self.project = Settings.ADO_PROJECT&#10;        self.pat = Settings.ADO_PAT&#10;        self.base_url = f&quot;https://dev.azure.com/{self.organization}&quot;&#10;&#10;        try:&#10;            print(&quot;[DEBUG] Initializing work item tracking client...&quot;)&#10;            # Create credentials&#10;            credentials = BasicAuthentication('', self.pat)&#10;&#10;            # Create work item tracking client directly&#10;            self.wit_client = WorkItemTrackingClient(&#10;                base_url=self.base_url,&#10;                creds=credentials&#10;            )&#10;            print(&quot;[DEBUG] Work item tracking client created successfully&quot;)&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to establish connection to Azure DevOps: {str(e)}&quot;)&#10;&#10;    def get_requirements(self, state_filter: Optional[str] = None, work_item_type: Optional[str] = None) -&gt; List[Requirement]:&#10;        &quot;&quot;&quot;Get all requirements from the project, optionally filtered by work item type (e.g., 'Epic').&quot;&quot;&quot;&#10;        try:&#10;            # Build WIQL query&#10;            wiql_query = f&quot;&quot;&quot;&#10;            SELECT [System.Id], [System.Title], [System.Description], [System.State]&#10;            FROM WorkItems&#10;            WHERE [System.TeamProject] = '{self.project}'&#10;            &quot;&quot;&quot;&#10;            if work_item_type:&#10;                wiql_query += f&quot; AND [System.WorkItemType] = '{work_item_type}'&quot;&#10;            else:&#10;                wiql_query += f&quot; AND [System.WorkItemType] = '{Settings.REQUIREMENT_TYPE}'&quot;&#10;            if state_filter:&#10;                wiql_query += f&quot; AND [System.State] = '{state_filter}'&quot;&#10;            # Execute query&#10;            wiql_result = self.wit_client.query_by_wiql({&quot;query&quot;: wiql_query})&#10;            if not wiql_result.work_items:&#10;                return []&#10;            # Get work item IDs&#10;            work_item_ids = [item.id for item in wiql_result.work_items]&#10;            # Get full work items&#10;            work_items = self.wit_client.get_work_items(&#10;                ids=work_item_ids,&#10;                fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;]&#10;            )&#10;            requirements = []&#10;            for item in work_items:&#10;                fields = item.fields&#10;                requirement = Requirement(&#10;                    id=str(item.id),  # Ensure id is always a string&#10;                    title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                    description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                    state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;                    url=item.url&#10;                )&#10;                requirements.append(requirement)&#10;            return requirements&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get requirements: {str(e)}&quot;)&#10;    &#10;    def get_requirement_by_id(self, requirement_id: str) -&gt; Optional[Requirement]:&#10;        &quot;&quot;&quot;Get a single requirement by string ID with detailed error messages&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(id=requirement_id)&#10;            if not work_item:&#10;                print(f&quot;[ERROR] No work item found for ID: {requirement_id}&quot;)&#10;                return None&#10;            return Requirement.from_ado_work_item(work_item)&#10;        except Exception as e:&#10;            print(f&quot;[AUTH/ADO ERROR] Failed to fetch requirement '{requirement_id}': {e}.\n&quot;&#10;                  f&quot;Check if your PAT is valid, has correct permissions, and if the organization/project/ID are correct.&quot;)&#10;            return None&#10;&#10;    def create_user_story(self, story_data: Dict[str, Any], parent_requirement_id: int) -&gt; int:&#10;        &quot;&quot;&quot;Create a user story using the configured work item type and link it to a parent requirement&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Attempting to create story as {Settings.STORY_EXTRACTION_TYPE} for parent {parent_requirement_id}&quot;)&#10;            # Prepare work item data - ensure we're using System.Title and System.Description&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: story_data.get(&quot;System.Title&quot;, &quot;New User Story&quot;)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: story_data.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                }&#10;            ]&#10;&#10;            # Add any additional fields from story_data&#10;            for field, value in story_data.items():&#10;                if field not in [&quot;System.Title&quot;, &quot;System.Description&quot;]:&#10;                    document.append({&#10;                        &quot;op&quot;: &quot;add&quot;,&#10;                        &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                        &quot;value&quot;: value&#10;                    })&#10;&#10;            print(f&quot;[DEBUG] Document prepared for Azure DevOps: {document}&quot;)&#10;&#10;            # Create the work item using the configured story extraction type&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=Settings.STORY_EXTRACTION_TYPE&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created {Settings.STORY_EXTRACTION_TYPE} with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create {Settings.STORY_EXTRACTION_TYPE}: {str(e)}&quot;)&#10;                print(f&quot;[DEBUG] Project: {self.project}&quot;)&#10;                print(f&quot;[DEBUG] Type: {Settings.STORY_EXTRACTION_TYPE}&quot;)&#10;                raise Exception(f&quot;Failed to create {Settings.STORY_EXTRACTION_TYPE}: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship if parent_requirement_id is provided&#10;            if parent_requirement_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between {parent_requirement_id} and {work_item.id}&quot;)&#10;                    self._create_parent_child_link(parent_requirement_id, work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link: {str(e)}&quot;)&#10;                    # Don't raise here, as the story was created successfully&#10;&#10;            return work_item.id&#10;            &#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_user_story: {str(e)}&quot;)&#10;            raise&#10;&#10;    def _create_parent_child_link(self, parent_id: int, child_id: int):&#10;        &quot;&quot;&quot;Create a parent-child relationship between work items&quot;&quot;&quot;&#10;        try:&#10;            # Create the link&#10;            document = [{&#10;                &quot;op&quot;: &quot;add&quot;,&#10;                &quot;path&quot;: &quot;/relations/-&quot;,&#10;                &quot;value&quot;: {&#10;                    &quot;rel&quot;: &quot;System.LinkTypes.Hierarchy-Forward&quot;,&#10;                    &quot;url&quot;: f&quot;{self.base_url}/{self.organization}/_apis/wit/workItems/{child_id}&quot;&#10;                }&#10;            }]&#10;            &#10;            self.wit_client.update_work_item(&#10;                document=document,&#10;                id=parent_id&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to create parent-child link: {str(e)}&quot;)&#10;    &#10;    def detect_changes_in_epic(self, epic_id: int) -&gt; Optional[RequirementSnapshot]:&#10;        &quot;&quot;&quot;Detect changes in an EPIC based on its requirement snapshot&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(&#10;                id=epic_id,&#10;                fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;, &quot;System.ChangedDate&quot;]&#10;            )&#10;            &#10;            fields = work_item.fields&#10;            &#10;            # Calculate a hash of the title and description for change detection&#10;            content_hash = hashlib.sha256((fields[&quot;System.Title&quot;] + fields[&quot;System.Description&quot;]).encode()).hexdigest()&#10;            &#10;            return RequirementSnapshot(&#10;                id=work_item.id,&#10;                title=fields[&quot;System.Title&quot;],&#10;                description=fields[&quot;System.Description&quot;],&#10;                state=fields[&quot;System.State&quot;],&#10;                last_modified=datetime.strptime(fields[&quot;System.ChangedDate&quot;], &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;),&#10;                content_hash=content_hash&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to detect changes in EPIC {epic_id}: {str(e)}&quot;)&#10;&#10;    def get_existing_user_stories(self, epic_id: int) -&gt; List[ExistingUserStory]:&#10;        &quot;&quot;&quot;Retrieve existing user stories for a given epic ID&quot;&quot;&quot;&#10;        try:&#10;            child_ids = self.get_child_stories(epic_id)&#10;            stories = []&#10;            if child_ids:&#10;                work_items = self.wit_client.get_work_items(&#10;                    ids=child_ids,&#10;                    fields=[&quot;System.Id&quot;, &quot;System.Title&quot;, &quot;System.Description&quot;, &quot;System.State&quot;]&#10;                )&#10;                for item in work_items:&#10;                    fields = item.fields&#10;                    story = ExistingUserStory(&#10;                        id=item.id,&#10;                        title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                        description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                        state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;                        parent_id=epic_id&#10;                    )&#10;                    stories.append(story)&#10;            return stories&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to retrieve existing user stories for epic {epic_id}: {str(e)}&quot;)&#10;&#10;    def get_child_stories(self, requirement_id: int) -&gt; List[int]:&#10;        &quot;&quot;&quot;Get all child user stories for a requirement&quot;&quot;&quot;&#10;        try:&#10;            work_item = self.wit_client.get_work_item(&#10;                id=requirement_id,&#10;                expand=&quot;Relations&quot;&#10;            )&#10;            child_ids = []&#10;            if work_item.relations:&#10;                for relation in work_item.relations:&#10;                    if relation.rel == &quot;System.LinkTypes.Hierarchy-Forward&quot;:&#10;                        url_parts = relation.url.split('/')&#10;                        child_id = int(url_parts[-1])&#10;                        child_ids.append(child_id)&#10;            return child_ids&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get child stories for requirement {requirement_id}: {str(e)}&quot;)&#10;&#10;    def get_requirement_by_id(self, requirement_id) -&gt; Optional[Requirement]:&#10;        &quot;&quot;&quot;Get a single requirement by numeric ID or by title if not numeric&quot;&quot;&quot;&#10;        try:&#10;            # Try to convert to int for numeric IDs&#10;            try:&#10;                numeric_id = int(requirement_id)&#10;                work_item = self.wit_client.get_work_item(id=numeric_id)&#10;                if not work_item:&#10;                    print(f&quot;[ERROR] No work item found for ID: {requirement_id}&quot;)&#10;                    return None&#10;                return Requirement.from_ado_work_item(work_item)&#10;            except ValueError:&#10;                # Not a numeric ID, search by title&#10;                print(f&quot;[INFO] Requirement ID '{requirement_id}' is not numeric. Searching by title...&quot;)&#10;                wiql_query = f&quot;&quot;&quot;&#10;                SELECT [System.Id], [System.Title], [System.Description], [System.State]&#10;                FROM WorkItems&#10;                WHERE [System.Title] = '{requirement_id}'&#10;                AND [System.TeamProject] = '{self.project}'&#10;                &quot;&quot;&quot;&#10;                wiql_result = self.wit_client.query_by_wiql({&quot;query&quot;: wiql_query})&#10;                if not wiql_result.work_items:&#10;                    print(f&quot;[ERROR] No work item found with title: {requirement_id}&quot;)&#10;                    return None&#10;                work_item_id = wiql_result.work_items[0].id&#10;                work_item = self.wit_client.get_work_item(id=work_item_id)&#10;                return Requirement.from_ado_work_item(work_item)&#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Failed to get requirement by id or title: {str(e)}&quot;)&#10;            return None&#10;&#10;    def update_work_item(self, work_item_id: int, update_data: Dict[str, Any]) -&gt; bool:&#10;        &quot;&quot;&quot;Update an existing work item&quot;&quot;&quot;&#10;        try:&#10;            # Prepare update document&#10;            document = []&#10;            for field, value in update_data.items():&#10;                document.append({&#10;                    &quot;op&quot;: &quot;replace&quot;,&#10;                    &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                    &quot;value&quot;: value&#10;                })&#10;            &#10;            # Update the work item&#10;            self.wit_client.update_work_item(&#10;                document=document,&#10;                id=work_item_id&#10;            )&#10;            &#10;            return True&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to update work item {work_item_id}: {str(e)}&quot;)&#10;    &#10;    def get_work_item_types(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get all available work item types in the project&quot;&quot;&quot;&#10;        try:&#10;            work_item_types = self.wit_client.get_work_item_types(project=self.project)&#10;            return [wit.name for wit in work_item_types]&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get work item types: {str(e)}&quot;)&#10;&#10;    def create_test_case(self, test_case_data: Dict[str, Any], parent_story_id: str) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case and link it to a parent user story&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Attempting to create test case for parent story {parent_story_id}&quot;)&#10;            &#10;            # Prepare work item data for test case&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: test_case_data.get(&quot;System.Title&quot;, &quot;New Test Case&quot;)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: test_case_data.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                }&#10;            ]&#10;&#10;            # Add any additional fields from test_case_data&#10;            for field, value in test_case_data.items():&#10;                if field not in [&quot;System.Title&quot;, &quot;System.Description&quot;]:&#10;                    document.append({&#10;                        &quot;op&quot;: &quot;add&quot;,&#10;                        &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                        &quot;value&quot;: value&#10;                    })&#10;&#10;            print(f&quot;[DEBUG] Test case document prepared for Azure DevOps: {document}&quot;)&#10;&#10;            # Create the test case work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=&quot;Test Case&quot;  # Standard ADO test case work item type&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created test case with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create test case work item: {str(e)}&quot;)&#10;                raise Exception(f&quot;Failed to create test case work item: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship with the user story&#10;            if parent_story_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between story {parent_story_id} and test case {work_item.id}&quot;)&#10;                    self._create_parent_child_link(int(parent_story_id), work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link for test case: {str(e)}&quot;)&#10;                    # Don't raise here, as the test case was created successfully&#10;&#10;            return work_item.id&#10;            &#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_test_case: {str(e)}&quot;)&#10;            raise&#10;&#10;    def create_test_case_as_issue(self, test_case_data: Dict[str, Any], parent_story_id: Optional[int] = None) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case as an Issue work item in Azure DevOps&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Creating test case as Issue: {test_case_data.get('title', 'Unknown')}&quot;)&#10;&#10;            # Prepare the document for Issue creation&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: f&quot;[TEST] {test_case_data.get('title', '')}&quot;&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: self._format_test_case_description(test_case_data)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/Microsoft.VSTS.Common.Priority&quot;,&#10;                    &quot;value&quot;: self._map_priority_to_number(test_case_data.get('priority', 'Medium'))&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Tags&quot;,&#10;                    &quot;value&quot;: f&quot;TestCase;{test_case_data.get('test_type', 'functional')};AutoGenerated&quot;&#10;                }&#10;            ]&#10;&#10;            print(f&quot;[DEBUG] Document prepared for test case Issue: {document}&quot;)&#10;&#10;            # Create the Issue work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=&quot;Issue&quot;&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created test case Issue with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create test case Issue: {str(e)}&quot;)&#10;                print(f&quot;[DEBUG] Project: {self.project}&quot;)&#10;                print(f&quot;[DEBUG] Type: Issue&quot;)&#10;                raise Exception(f&quot;Failed to create test case Issue: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship if parent_story_id is provided&#10;            if parent_story_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between {parent_story_id} and {work_item.id}&quot;)&#10;                    self._create_parent_child_link(parent_story_id, work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link: {str(e)}&quot;)&#10;                    # Don't raise here, as the test case Issue was created successfully&#10;&#10;            return work_item.id&#10;&#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_test_case_as_issue: {str(e)}&quot;)&#10;            raise&#10;&#10;    def create_test_case_with_config(self, test_case_data: Dict[str, Any], parent_story_id: Optional[int] = None) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case using the configured work item type (Issue or Test Case)&quot;&quot;&quot;&#10;        if Settings.TEST_CASE_EXTRACTION_TYPE.lower() == 'issue':&#10;            return self.create_test_case_as_issue(test_case_data, parent_story_id)&#10;        else:&#10;            # Use traditional Test Case work item type&#10;            return self.create_test_case_as_test_case(test_case_data, parent_story_id)&#10;    &#10;    def create_test_case_as_test_case(self, test_case_data: Dict[str, Any], parent_story_id: Optional[int] = None) -&gt; int:&#10;        &quot;&quot;&quot;Create a test case as a Test Case work item in Azure DevOps&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;[DEBUG] Creating test case as Test Case: {test_case_data.get('title', 'Unknown')}&quot;)&#10;&#10;            # Prepare the document for Test Case creation&#10;            document = [&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Title&quot;,&#10;                    &quot;value&quot;: test_case_data.get('title', '')&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/System.Description&quot;,&#10;                    &quot;value&quot;: self._format_test_case_description(test_case_data)&#10;                },&#10;                {&#10;                    &quot;op&quot;: &quot;add&quot;,&#10;                    &quot;path&quot;: &quot;/fields/Microsoft.VSTS.Common.Priority&quot;,&#10;                    &quot;value&quot;: self._map_priority_to_number(test_case_data.get('priority', 'Medium'))&#10;                }&#10;            ]&#10;&#10;            print(f&quot;[DEBUG] Document prepared for Test Case: {document}&quot;)&#10;&#10;            # Create the Test Case work item&#10;            try:&#10;                work_item = self.wit_client.create_work_item(&#10;                    document=document,&#10;                    project=self.project,&#10;                    type=&quot;Test Case&quot;&#10;                )&#10;                print(f&quot;[DEBUG] Successfully created Test Case with ID: {work_item.id}&quot;)&#10;            except Exception as e:&#10;                print(f&quot;[ERROR] Failed to create Test Case: {str(e)}&quot;)&#10;                raise Exception(f&quot;Failed to create Test Case: {str(e)}&quot;)&#10;&#10;            # Create parent-child relationship if parent_story_id is provided&#10;            if parent_story_id:&#10;                try:&#10;                    print(f&quot;[DEBUG] Creating parent-child link between {parent_story_id} and {work_item.id}&quot;)&#10;                    self._create_parent_child_link(parent_story_id, work_item.id)&#10;                except Exception as e:&#10;                    print(f&quot;[WARNING] Failed to create parent-child link: {str(e)}&quot;)&#10;&#10;            return work_item.id&#10;&#10;        except Exception as e:&#10;            print(f&quot;[ERROR] Error in create_test_case_as_test_case: {str(e)}&quot;)&#10;            raise&#10;&#10;    def _format_test_case_description(self, test_case_data: Dict[str, Any]) -&gt; str:&#10;        &quot;&quot;&quot;Format test case data into a comprehensive description for Issue work item&quot;&quot;&quot;&#10;        description_parts = []&#10;&#10;        # Test case description&#10;        if test_case_data.get('description'):&#10;            description_parts.append(f&quot;**Test Description:**\n{test_case_data['description']}&quot;)&#10;&#10;        # Test type&#10;        if test_case_data.get('test_type'):&#10;            description_parts.append(f&quot;**Test Type:** {test_case_data['test_type'].title()}&quot;)&#10;&#10;        # Preconditions&#10;        if test_case_data.get('preconditions'):&#10;            preconditions_text = &quot;\n&quot;.join([f&quot;- {pc}&quot; for pc in test_case_data['preconditions']])&#10;            description_parts.append(f&quot;**Preconditions:**\n{preconditions_text}&quot;)&#10;&#10;        # Test steps&#10;        if test_case_data.get('test_steps'):&#10;            steps_text = &quot;\n&quot;.join([f&quot;{i+1}. {step}&quot; for i, step in enumerate(test_case_data['test_steps'])])&#10;            description_parts.append(f&quot;**Test Steps:**\n{steps_text}&quot;)&#10;&#10;        # Expected result&#10;        if test_case_data.get('expected_result'):&#10;            description_parts.append(f&quot;**Expected Result:**\n{test_case_data['expected_result']}&quot;)&#10;&#10;        return &quot;\n\n&quot;.join(description_parts)&#10;&#10;    def _map_priority_to_number(self, priority_text: str) -&gt; int:&#10;        &quot;&quot;&quot;Map priority text to Azure DevOps priority number&quot;&quot;&quot;&#10;        priority_mapping = {&#10;            'High': 1,&#10;            'Medium': 2,&#10;            'Low': 3&#10;        }&#10;        return priority_mapping.get(priority_text, 2)&#10;&#10;    def get_work_item_by_id(self, work_item_id: str):&#10;        &quot;&quot;&quot;Get a work item by ID&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = int(work_item_id)&#10;            work_item = self.wit_client.get_work_item(id=numeric_id)&#10;            return work_item&#10;        except ValueError:&#10;            raise Exception(f&quot;Invalid work item ID: {work_item_id}&quot;)&#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to get work item {work_item_id}: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/agent.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/agent.py" />
              <option name="originalContent" value="import logging&#10;from typing import List, Optional, Dict, Any&#10;&#10;from src.ado_client import ADOClient&#10;from src.story_extractor import StoryExtractor&#10;from src.test_case_extractor import TestCaseExtractor&#10;from src.models import Requirement, StoryExtractionResult, UserStory, ChangeDetectionResult, EpicSyncResult, TestCaseExtractionResult&#10;&#10;class StoryExtractionAgent:&#10;    &quot;&quot;&quot;Main agent that orchestrates the story extraction and test case generation process&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        self.ado_client = ADOClient()&#10;        self.story_extractor = StoryExtractor()&#10;        self.test_case_extractor = TestCaseExtractor()&#10;        self.logger = self._setup_logger()&#10;    &#10;    def process_requirement_by_id(self, requirement_id: str, upload_to_ado: bool = True) -&gt; StoryExtractionResult:&#10;        &quot;&quot;&quot;Process a single requirement by ID or title (string or int)&quot;&quot;&quot;&#10;        print(f&quot;\n[AGENT] Starting to process requirement ID: {requirement_id}&quot;)&#10;        try:&#10;            # Try to fetch requirement by ID or title (string or int)&#10;            print(&quot;[AGENT] Fetching requirement from Azure DevOps...&quot;)&#10;            requirement = self.ado_client.get_requirement_by_id(requirement_id)&#10;&#10;            if not requirement:&#10;                error_msg = f&quot;Requirement {requirement_id} not found or access denied&quot;&#10;                print(f&quot;[ERROR] {error_msg}&quot;)&#10;                return StoryExtractionResult(&#10;                    requirement_id=requirement_id,&#10;                    requirement_title=&quot;&quot;,&#10;                    stories=[],&#10;                    extraction_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;&#10;            print(f&quot;[AGENT] Found requirement: {requirement.title}&quot;)&#10;&#10;            # Extract stories&#10;            print(&quot;[DEBUG] StoryExtractionAgent: Starting story extraction&quot;)&#10;            result = self.story_extractor.extract_stories(requirement)&#10;            &#10;            if not result.extraction_successful:&#10;                print(f&quot;[ERROR] StoryExtractionAgent: Story extraction failed: {result.error_message}&quot;)&#10;                return result&#10;            &#10;            print(f&quot;[DEBUG] StoryExtractionAgent: Successfully extracted {len(result.stories)} stories&quot;)&#10;&#10;            # Upload to ADO if requested&#10;            if upload_to_ado and result.stories:&#10;                print(&quot;[DEBUG] StoryExtractionAgent: Starting upload to ADO&quot;)&#10;                try:&#10;                    uploaded_story_ids = self._upload_stories_to_ado(result.stories, requirement_id)&#10;                    print(f&quot;[DEBUG] StoryExtractionAgent: Successfully uploaded {len(uploaded_story_ids)} stories&quot;)&#10;                except Exception as e:&#10;                    print(f&quot;[ERROR] StoryExtractionAgent: Failed to upload stories: {str(e)}&quot;)&#10;                    result.error_message = f&quot;Failed to upload stories: {str(e)}&quot;&#10;                    result.extraction_successful = False&#10;&#10;        except Exception as e:&#10;            # Accept string-based IDs (e.g., 'EPIC 1')&#10;            ado_id = requirement_id.strip()&#10;            print(f&quot;[AGENT] Using requirement ID: {ado_id}&quot;)&#10;            try:&#10;                # Get all requirements&#10;                requirement = self.ado_client.get_requirement_by_id(ado_id)&#10;                self.logger.info(f&quot;Found requirement to process: {ado_id}&quot;)&#10;                result = self.process_requirement_by_id(str(requirement.id), upload_to_ado)&#10;                # Summary&#10;                successful = 1 if result.extraction_successful else 0&#10;                total_stories = len(result.stories)&#10;                print(f&quot;[SUMMARY] Processed 1 requirement. Successful: {successful}, Total stories: {total_stories}&quot;)&#10;                return [result]&#10;            except Exception as inner_e:&#10;                print(f&quot;[ERROR] Failed to process requirement {ado_id}: {str(inner_e)}&quot;)&#10;                return []&#10;&#10;    def preview_stories(self, requirement_id: str) -&gt; StoryExtractionResult:&#10;        &quot;&quot;&quot;Extract and preview stories without uploading to ADO&quot;&quot;&quot;&#10;        return self.process_requirement_by_id(requirement_id, upload_to_ado=False)&#10;    &#10;    def _upload_stories_to_ado(self, stories: List[UserStory], parent_requirement_id: str) -&gt; List[int]:&#10;        &quot;&quot;&quot;Upload user stories to ADO as child items of the requirement&quot;&quot;&quot;&#10;        parent_id = parent_requirement_id  # No numeric parsing anymore&#10;        uploaded_ids = []&#10;        &#10;        for story in stories:&#10;            try:&#10;                story_data = story.to_ado_format()&#10;                story_id = self.ado_client.create_user_story(story_data, parent_id)&#10;                uploaded_ids.append(story_id)&#10;                self.logger.info(f&quot;Created user story {story_id}: {story.heading}&quot;)&#10;                &#10;                # Extract and upload test cases for this story&#10;                try:&#10;                    self._extract_and_upload_test_cases(story, str(story_id))&#10;                except Exception as test_case_error:&#10;                    self.logger.error(f&quot;Failed to create test cases for story {story_id}: {str(test_case_error)}&quot;)&#10;                    # Continue with next story even if test case creation fails&#10;                &#10;            except Exception as e:&#10;                self.logger.error(f&quot;Failed to create user story '{story.heading}': {str(e)}&quot;)&#10;                continue&#10;        &#10;        return uploaded_ids&#10;    &#10;    def _extract_and_upload_test_cases(self, user_story: UserStory, parent_story_id: str) -&gt; List[int]:&#10;        &quot;&quot;&quot;Extract test cases from a user story and upload them to ADO&quot;&quot;&quot;&#10;        try:&#10;            self.logger.info(f&quot;Extracting test cases for story: {user_story.heading}&quot;)&#10;            &#10;            # Extract test cases using AI&#10;            test_case_result = self.test_case_extractor.extract_test_cases(user_story, parent_story_id)&#10;            &#10;            if not test_case_result.extraction_successful:&#10;                raise Exception(test_case_result.error_message)&#10;            &#10;            self.logger.info(f&quot;Extracted {len(test_case_result.test_cases)} test cases for story {parent_story_id}&quot;)&#10;            &#10;            # Upload test cases to ADO&#10;            uploaded_test_case_ids = []&#10;            for test_case in test_case_result.test_cases:&#10;                try:&#10;                    test_case_data = test_case.to_ado_format()&#10;                    # Create test case as child of the user story&#10;                    test_case_id = self.ado_client.create_test_case(test_case_data, parent_story_id)&#10;                    uploaded_test_case_ids.append(test_case_id)&#10;                    self.logger.info(f&quot;Created test case {test_case_id}: {test_case.title}&quot;)&#10;                    &#10;                except Exception as tc_error:&#10;                    self.logger.error(f&quot;Failed to upload test case '{test_case.title}': {str(tc_error)}&quot;)&#10;                    continue&#10;            &#10;            return uploaded_test_case_ids&#10;            &#10;        except Exception as e:&#10;            self.logger.error(f&quot;Test case extraction failed for story {parent_story_id}: {str(e)}&quot;)&#10;            return []&#10;    &#10;    def extract_test_cases_for_story(self, story_id: str) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract test cases for an existing user story by ID&quot;&quot;&quot;&#10;        try:&#10;            # Fetch the user story from ADO&#10;            story_work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not story_work_item:&#10;                return TestCaseExtractionResult(&#10;                    story_id=story_id,&#10;                    story_title=&quot;&quot;,&#10;                    test_cases=[],&#10;                    extraction_successful=False,&#10;                    error_message=f&quot;User story {story_id} not found&quot;&#10;                )&#10;            &#10;            # Convert ADO work item to UserStory model&#10;            fields = story_work_item.fields&#10;            user_story = UserStory(&#10;                heading=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;            &#10;            # Extract test cases&#10;            return self.test_case_extractor.extract_test_cases(user_story, story_id)&#10;            &#10;        except Exception as e:&#10;            return TestCaseExtractionResult(&#10;                story_id=story_id,&#10;                story_title=&quot;&quot;,&#10;                test_cases=[],&#10;                extraction_successful=False,&#10;                error_message=str(e)&#10;            )&#10;    &#10;    def extract_test_cases_as_issues(self, story_id: str, upload_to_ado: bool = True) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract test cases for a user story and create them as Issue work items&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;\n[AGENT] Extracting test cases as issues for story ID: {story_id}&quot;)&#10;&#10;            # Get the user story work item&#10;            work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not work_item:&#10;                error_msg = f&quot;User story {story_id} not found&quot;&#10;                return TestCaseExtractionResult(&#10;                    story_id=story_id,&#10;                    story_title=&quot;&quot;,&#10;                    test_cases=[],&#10;                    extraction_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;&#10;            # Convert work item to UserStory object&#10;            user_story = UserStory(&#10;                heading=work_item.fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=work_item.fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    work_item.fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;&#10;            print(f&quot;[AGENT] Found user story: {user_story.heading}&quot;)&#10;&#10;            # Extract test cases using AI&#10;            print(&quot;[AGENT] Extracting test cases with AI...&quot;)&#10;            result = self.test_case_extractor.extract_test_cases(user_story, story_id)&#10;&#10;            if not result.extraction_successful:&#10;                print(f&quot;[ERROR] Test case extraction failed: {result.error_message}&quot;)&#10;                return result&#10;&#10;            print(f&quot;[AGENT] Successfully extracted {len(result.test_cases)} test cases&quot;)&#10;&#10;            # Upload test cases as Issues to ADO if requested&#10;            if upload_to_ado and result.test_cases:&#10;                print(f&quot;[AGENT] Creating {len(result.test_cases)} test cases as Issues in Azure DevOps...&quot;)&#10;                created_issues = []&#10;&#10;                for i, test_case in enumerate(result.test_cases, 1):&#10;                    try:&#10;                        print(f&quot;[AGENT] Creating test case {i}/{len(result.test_cases)}: {test_case.title}&quot;)&#10;&#10;                        # Convert TestCase to dict format for ADO client&#10;                        test_case_data = {&#10;                            'title': test_case.title,&#10;                            'description': test_case.description,&#10;                            'test_type': test_case.test_type,&#10;                            'preconditions': test_case.preconditions,&#10;                            'test_steps': test_case.test_steps,&#10;                            'expected_result': test_case.expected_result,&#10;                            'priority': test_case.priority&#10;                        }&#10;&#10;                        issue_id = self.ado_client.create_test_case_as_issue(&#10;                            test_case_data=test_case_data,&#10;                            parent_story_id=int(story_id)&#10;                        )&#10;&#10;                        created_issues.append(issue_id)&#10;                        print(f&quot;[AGENT] ✅ Created Issue #{issue_id} for test case: {test_case.title}&quot;)&#10;&#10;                    except Exception as e:&#10;                        print(f&quot;[ERROR] Failed to create Issue for test case '{test_case.title}': {e}&quot;)&#10;                        continue&#10;&#10;                print(f&quot;[AGENT] Successfully created {len(created_issues)} test case Issues in Azure DevOps&quot;)&#10;                result.created_issue_ids = created_issues&#10;&#10;            return result&#10;&#10;        except Exception as e:&#10;            error_msg = f&quot;Failed to extract test cases as issues: {str(e)}&quot;&#10;            print(f&quot;[ERROR] {error_msg}&quot;)&#10;            return TestCaseExtractionResult(&#10;                story_id=story_id,&#10;                story_title=&quot;&quot;,&#10;                test_cases=[],&#10;                extraction_successful=False,&#10;                error_message=error_msg&#10;            )&#10;&#10;    def extract_test_cases_for_epic_stories(self, epic_id: str, upload_to_ado: bool = True) -&gt; Dict[str, TestCaseExtractionResult]:&#10;        &quot;&quot;&quot;Extract test cases as issues for all user stories under an epic&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;\n[AGENT] Extracting test cases as issues for all stories in epic: {epic_id}&quot;)&#10;&#10;            # Get all child stories for the epic&#10;            child_story_ids = self.ado_client.get_child_stories(int(epic_id))&#10;&#10;            if not child_story_ids:&#10;                print(f&quot;[WARNING] No child stories found for epic {epic_id}&quot;)&#10;                return {}&#10;&#10;            print(f&quot;[AGENT] Found {len(child_story_ids)} child stories in epic&quot;)&#10;&#10;            results = {}&#10;            for story_id in child_story_ids:&#10;                print(f&quot;\n[AGENT] Processing story {story_id}...&quot;)&#10;                result = self.extract_test_cases_as_issues(str(story_id), upload_to_ado)&#10;                results[str(story_id)] = result&#10;&#10;            return results&#10;&#10;        except Exception as e:&#10;            error_msg = f&quot;Failed to extract test cases for epic stories: {str(e)}&quot;&#10;            print(f&quot;[ERROR] {error_msg}&quot;)&#10;            return {}&#10;&#10;    def _extract_acceptance_criteria_from_description(self, description: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Extract acceptance criteria from story description&quot;&quot;&quot;&#10;        if not description:&#10;            return []&#10;&#10;        # Look for acceptance criteria patterns in the description&#10;        import re&#10;        criteria = []&#10;&#10;        # Common patterns for acceptance criteria&#10;        patterns = [&#10;            r&quot;(?:acceptance criteria|ac):\s*(.*?)(?:\n\n|\n(?=[A-Z])|$)&quot;,&#10;            r&quot;given.*?when.*?then.*&quot;,&#10;            r&quot;as a.*?i want.*?so that.*&quot;&#10;        ]&#10;&#10;        for pattern in patterns:&#10;            matches = re.findall(pattern, description, re.IGNORECASE | re.DOTALL)&#10;            for match in matches:&#10;                if match.strip():&#10;                    criteria.append(match.strip())&#10;&#10;        # If no structured criteria found, split by common delimiters&#10;        if not criteria:&#10;            lines = description.split('\n')&#10;            for line in lines:&#10;                line = line.strip()&#10;                if line and (line.startswith('-') or line.startswith('*') or line.startswith('•')):&#10;                    criteria.append(line[1:].strip())&#10;&#10;        return criteria[:5] if criteria else [&quot;Verify the functionality works as described&quot;]&#10;&#10;    def preview_test_cases(self, story_id: str) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract and preview test cases for a user story without uploading to ADO&quot;&quot;&quot;&#10;        return self.extract_test_cases_for_story(story_id)&#10;    &#10;    def get_story_with_test_cases(self, story_id: str) -&gt; Dict[str, Any]:&#10;        &quot;&quot;&quot;Get a user story and its associated test cases&quot;&quot;&quot;&#10;        try:&#10;            # Fetch the user story&#10;            story_work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not story_work_item:&#10;                return {&quot;error&quot;: f&quot;User story {story_id} not found&quot;}&#10;            &#10;            # Convert ADO work item to UserStory model&#10;            fields = story_work_item.fields&#10;            user_story = UserStory(&#10;                heading=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;            &#10;            # Fetch test cases associated with the user story&#10;            test_case_result = self.ado_client.get_test_cases_by_story_id(story_id)&#10;            &#10;            return {&#10;                &quot;user_story&quot;: user_story,&#10;                &quot;test_cases&quot;: test_case_result&#10;            }&#10;            &#10;        except Exception as e:&#10;            return {&quot;error&quot;: str(e)}&#10;    &#10;    def get_requirement_summary(self, requirement_id: str) -&gt; Dict[str, Any]:&#10;        &quot;&quot;&quot;Get a summary of a requirement and its child stories&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = requirement_id  # No numeric parsing&#10;            requirement = self.ado_client.get_requirement_by_id(numeric_id)&#10;            if not requirement:&#10;                return {&quot;error&quot;: f&quot;Requirement {requirement_id} not found&quot;}&#10;            &#10;            child_story_ids = self.ado_client.get_child_stories(numeric_id)&#10;            &#10;            return {&#10;                &quot;requirement&quot;: {&#10;                    &quot;id&quot;: requirement.id,&#10;                    &quot;title&quot;: requirement.title,&#10;                    &quot;description&quot;: requirement.description[:200] + &quot;...&quot; if len(requirement.description) &gt; 200 else requirement.description,&#10;                    &quot;state&quot;: requirement.state&#10;                },&#10;                &quot;child_stories&quot;: {&#10;                    &quot;count&quot;: len(child_story_ids),&#10;                    &quot;ids&quot;: child_story_ids&#10;                }&#10;            }&#10;            &#10;        except Exception as e:&#10;            return {&quot;error&quot;: str(e)}&#10;    &#10;    def synchronize_epic(self, epic_id: str, stored_snapshot: Optional[Dict] = None) -&gt; EpicSyncResult:&#10;        &quot;&quot;&quot;Detect changes in an EPIC and synchronize its tasks&quot;&quot;&quot;&#10;        self.logger.info(f&quot;[AGENT] Synchronizing Epic: {epic_id}&quot;)&#10;        try:&#10;            # Fetch the requirement (Epic) from ADO&#10;            requirement = self.ado_client.get_requirement_by_id(epic_id)&#10;            if not requirement:&#10;                error_msg = f&quot;[AGENT] Epic {epic_id} not found or access denied&quot;&#10;                self.logger.error(error_msg)&#10;                return EpicSyncResult(&#10;                    epic_id=epic_id,&#10;                    epic_title=&quot;&quot;,&#10;                    sync_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;            self.logger.info(f&quot;[AGENT] Fetched Epic: {requirement.title}&quot;)&#10;            self.logger.info(f&quot;[AGENT] Epic Description: {requirement.description}&quot;)&#10;            # Extract stories&#10;            self.logger.info(f&quot;[AGENT] Extracting stories from Epic {epic_id}&quot;)&#10;            extraction_result = self.story_extractor.extract_stories(requirement)&#10;            if not extraction_result.extraction_successful:&#10;                self.logger.error(f&quot;[AGENT] Story extraction failed: {extraction_result.error_message}&quot;)&#10;                return EpicSyncResult(&#10;                    epic_id=epic_id,&#10;                    epic_title=requirement.title,&#10;                    sync_successful=False,&#10;                    error_message=extraction_result.error_message&#10;                )&#10;            self.logger.info(f&quot;[AGENT] Extracted {len(extraction_result.stories)} stories from Epic {epic_id}&quot;)&#10;&#10;            # Get existing stories for this epic to avoid duplicates&#10;            self.logger.info(f&quot;[AGENT] Checking for existing stories in Epic {epic_id}&quot;)&#10;            existing_stories = self.ado_client.get_existing_user_stories(int(epic_id))&#10;            self.logger.info(f&quot;[AGENT] Found {len(existing_stories)} existing stories in Epic {epic_id}&quot;)&#10;&#10;            # Analyze what needs to be created, updated, or left unchanged&#10;            stories_to_create, stories_to_update, unchanged_stories = self._analyze_story_changes(&#10;                existing_stories, extraction_result.stories&#10;            )&#10;&#10;            self.logger.info(f&quot;[AGENT] Story analysis complete:&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Stories to create: {len(stories_to_create)}&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Stories to update: {len(stories_to_update)}&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Unchanged stories: {len(unchanged_stories)}&quot;)&#10;&#10;            # Upload stories to ADO&#10;            created_stories = []&#10;            updated_stories = []&#10;            created_test_cases = []&#10;            &#10;            # Create new stories&#10;            if stories_to_create:&#10;                self.logger.info(f&quot;[AGENT] Creating {len(stories_to_create)} new stories for Epic {epic_id}&quot;)&#10;                for story in stories_to_create:&#10;                    story_id = None&#10;                    try:&#10;                        # Use existing create_user_story method with proper format&#10;                        story_data = story.to_ado_format()&#10;                        story_id = self.ado_client.create_user_story(story_data, epic_id)&#10;                    except Exception as upload_exc:&#10;                        self.logger.error(f&quot;[AGENT] Failed to upload story '{story.heading}': {upload_exc}&quot;)&#10;                        continue&#10;                    &#10;                    if isinstance(story_id, int):&#10;                        created_stories.append(story_id)&#10;                        self.logger.info(f&quot;[AGENT] Successfully created story {story_id}: {story.heading}&quot;)&#10;                        &#10;                        # Extract and upload test cases for this story&#10;                        try:&#10;                            test_case_ids = self._extract_and_upload_test_cases(story, str(story_id))&#10;                            created_test_cases.extend(test_case_ids)&#10;                            self.logger.info(f&quot;[AGENT] Created {len(test_case_ids)} test cases for story {story_id}&quot;)&#10;                        except Exception as tc_exc:&#10;                            self.logger.error(f&quot;[AGENT] Failed to create test cases for story {story_id}: {tc_exc}&quot;)&#10;                    else:&#10;                        self.logger.error(f&quot;[AGENT] Story upload did not return a valid integer ID for '{story.heading}'&quot;)&#10;            else:&#10;                self.logger.info(f&quot;[AGENT] No new stories to create for Epic {epic_id}&quot;)&#10;&#10;            # Update existing stories that have changed&#10;            if stories_to_update:&#10;                self.logger.info(f&quot;[AGENT] Updating {len(stories_to_update)} existing stories for Epic {epic_id}&quot;)&#10;                for update_info in stories_to_update:&#10;                    try:&#10;                        self._update_user_story(update_info['id'], update_info['new_story'])&#10;                        updated_stories.append(update_info['id'])&#10;                        self.logger.info(f&quot;[AGENT] Successfully updated story {update_info['id']}: {update_info['new_story'].heading}&quot;)&#10;                    except Exception as update_exc:&#10;                        self.logger.error(f&quot;[AGENT] Failed to update story {update_info['id']}: {update_exc}&quot;)&#10;            else:&#10;                self.logger.info(f&quot;[AGENT] No stories to update for Epic {epic_id}&quot;)&#10;&#10;            # Log unchanged stories&#10;            unchanged_story_ids = [story.id for story in unchanged_stories]&#10;            if unchanged_story_ids:&#10;                self.logger.info(f&quot;[AGENT] {len(unchanged_story_ids)} stories remain unchanged: {unchanged_story_ids}&quot;)&#10;&#10;            return EpicSyncResult(&#10;                epic_id=epic_id,&#10;                epic_title=requirement.title,&#10;                sync_successful=True,&#10;                created_stories=created_stories,&#10;                updated_stories=updated_stories,&#10;                unchanged_stories=unchanged_story_ids,&#10;                created_test_cases=created_test_cases&#10;            )&#10;        except Exception as e:&#10;            self.logger.error(f&quot;[AGENT] Exception during Epic sync: {e}&quot;)&#10;            import traceback&#10;            self.logger.error(traceback.format_exc())&#10;            return EpicSyncResult(&#10;                epic_id=epic_id,&#10;                epic_title=&quot;&quot;,&#10;                sync_successful=False,&#10;                error_message=str(e)&#10;            )&#10;    &#10;    def _analyze_story_changes(self, existing_stories, new_stories):&#10;        &quot;&quot;&quot;Analyze differences between existing and new stories to determine what to create/update&quot;&quot;&quot;&#10;        from difflib import SequenceMatcher&#10;        &#10;        stories_to_create = []&#10;        stories_to_update = []&#10;        unchanged_stories = []&#10;        &#10;        # Convert existing stories to a dict for easier lookup&#10;        existing_by_title = {story.title: story for story in existing_stories}&#10;        &#10;        # Check each new story against existing ones&#10;        for new_story in new_stories:&#10;            best_match = None&#10;            best_similarity = 0.0&#10;            &#10;            # Find the best matching existing story by title similarity&#10;            for existing_title, existing_story in existing_by_title.items():&#10;                similarity = SequenceMatcher(None, new_story.heading.lower(), existing_title.lower()).ratio()&#10;                if similarity &gt; best_similarity:&#10;                    best_similarity = similarity&#10;                    best_match = existing_story&#10;            &#10;            # If we found a good match (similarity &gt; 0.8), consider it for update&#10;            if best_match and best_similarity &gt; 0.8:&#10;                # Check if the content has actually changed&#10;                existing_content = f&quot;{best_match.title} {best_match.description}&quot;&#10;                new_content = f&quot;{new_story.heading} {new_story.description} {' '.join(new_story.acceptance_criteria)}&quot;&#10;                &#10;                content_similarity = SequenceMatcher(None, existing_content.lower(), new_content.lower()).ratio()&#10;                &#10;                if content_similarity &lt; 0.9:  # Content has changed significantly&#10;                    stories_to_update.append({&#10;                        'id': best_match.id,&#10;                        'existing_story': best_match,&#10;                        'new_story': new_story&#10;                    })&#10;                    # Remove from existing dict so it's not considered again&#10;                    del existing_by_title[best_match.title]&#10;                else:&#10;                    unchanged_stories.append(best_match)&#10;                    del existing_by_title[best_match.title]&#10;            else:&#10;                # No good match found, this is a new story&#10;                stories_to_create.append(new_story)&#10;        &#10;        # Any remaining existing stories that weren't matched are considered unchanged&#10;        for remaining_story in existing_by_title.values():&#10;            unchanged_stories.append(remaining_story)&#10;        &#10;        return stories_to_create, stories_to_update, unchanged_stories&#10;    &#10;    def _update_user_story(self, story_id: int, new_story: UserStory):&#10;        &quot;&quot;&quot;Update an existing user story in ADO&quot;&quot;&quot;&#10;        try:&#10;            story_data = new_story.to_ado_format()&#10;            &#10;            # Prepare update document&#10;            document = []&#10;            for field, value in story_data.items():&#10;                document.append({&#10;                    &quot;op&quot;: &quot;replace&quot;,&#10;                    &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                    &quot;value&quot;: value&#10;                })&#10;            &#10;            # Update the work item&#10;            self.ado_client.wit_client.update_work_item(&#10;                document=document,&#10;                id=story_id&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to update user story {story_id}: {str(e)}&quot;)&#10;    &#10;    def get_epic_snapshot(self, epic_id: str) -&gt; Optional[Dict[str, str]]:&#10;        &quot;&quot;&quot;Get a snapshot of the current EPIC for change tracking&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = epic_id  # No numeric parsing&#10;            snapshot = self.ado_client.detect_changes_in_epic(numeric_id)&#10;            &#10;            if snapshot:&#10;                return {&#10;                    'content_hash': snapshot.content_hash,&#10;                    'last_modified': snapshot.last_modified.isoformat() if snapshot.last_modified else None,&#10;                    'title': snapshot.title,&#10;                    'state': snapshot.state&#10;                }&#10;            return None&#10;            &#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to get EPIC snapshot for {epic_id}: {str(e)}&quot;)&#10;            return None&#10;&#10;    def extract_stories_for_epic(self, epic_id: str, existing_stories: List[dict] = None) -&gt; List[dict]:&#10;        &quot;&quot;&quot;Extract stories for a given epic, avoiding duplicates.&quot;&quot;&quot;&#10;        requirement = self.ado_client.get_requirement_by_id(epic_id)&#10;        if not requirement:&#10;            self.logger.error(f&quot;Requirement (Epic) {epic_id} not found.&quot;)&#10;            return []&#10;        result = self.story_extractor.extract_stories(requirement, existing_stories)&#10;        if not result.extraction_successful:&#10;            self.logger.error(f&quot;Story extraction failed for Epic {epic_id}: {result.error_message}&quot;)&#10;            return []&#10;        # Convert UserStory objects to dicts for snapshot&#10;        return [story.__dict__ for story in result.stories]&#10;&#10;    def _setup_logger(self) -&gt; logging.Logger:&#10;        &quot;&quot;&quot;Setup logging configuration&quot;&quot;&quot;&#10;        logger = logging.getLogger(&quot;StoryExtractionAgent&quot;)&#10;        logger.setLevel(logging.INFO)&#10;        &#10;        if not logger.handlers:&#10;            handler = logging.StreamHandler()&#10;            formatter = logging.Formatter(&#10;                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'&#10;            )&#10;            handler.setFormatter(formatter)&#10;            logger.addHandler(handler)&#10;        &#10;        return logger&#10;" />
              <option name="updatedContent" value="import logging&#10;from typing import List, Optional, Dict, Any&#10;&#10;from src.ado_client import ADOClient&#10;from src.story_extractor import StoryExtractor&#10;from src.test_case_extractor import TestCaseExtractor&#10;from src.models import Requirement, StoryExtractionResult, UserStory, ChangeDetectionResult, EpicSyncResult, TestCaseExtractionResult&#10;from config.settings import Settings&#10;&#10;class StoryExtractionAgent:&#10;    &quot;&quot;&quot;Main agent that orchestrates the story extraction and test case generation process&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        self.ado_client = ADOClient()&#10;        self.story_extractor = StoryExtractor()&#10;        self.test_case_extractor = TestCaseExtractor()&#10;        self.logger = self._setup_logger()&#10;    &#10;    def process_requirement_by_id(self, requirement_id: str, upload_to_ado: bool = True) -&gt; StoryExtractionResult:&#10;        &quot;&quot;&quot;Process a single requirement by ID or title (string or int)&quot;&quot;&quot;&#10;        print(f&quot;\n[AGENT] Starting to process requirement ID: {requirement_id}&quot;)&#10;        try:&#10;            # Try to fetch requirement by ID or title (string or int)&#10;            print(&quot;[AGENT] Fetching requirement from Azure DevOps...&quot;)&#10;            requirement = self.ado_client.get_requirement_by_id(requirement_id)&#10;&#10;            if not requirement:&#10;                error_msg = f&quot;Requirement {requirement_id} not found or access denied&quot;&#10;                print(f&quot;[ERROR] {error_msg}&quot;)&#10;                return StoryExtractionResult(&#10;                    requirement_id=requirement_id,&#10;                    requirement_title=&quot;&quot;,&#10;                    stories=[],&#10;                    extraction_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;&#10;            print(f&quot;[AGENT] Found requirement: {requirement.title}&quot;)&#10;&#10;            # Extract stories&#10;            print(&quot;[DEBUG] StoryExtractionAgent: Starting story extraction&quot;)&#10;            result = self.story_extractor.extract_stories(requirement)&#10;            &#10;            if not result.extraction_successful:&#10;                print(f&quot;[ERROR] StoryExtractionAgent: Story extraction failed: {result.error_message}&quot;)&#10;                return result&#10;            &#10;            print(f&quot;[DEBUG] StoryExtractionAgent: Successfully extracted {len(result.stories)} stories&quot;)&#10;&#10;            # Upload to ADO if requested&#10;            if upload_to_ado and result.stories:&#10;                print(&quot;[DEBUG] StoryExtractionAgent: Starting upload to ADO&quot;)&#10;                try:&#10;                    uploaded_story_ids = self._upload_stories_to_ado(result.stories, requirement_id)&#10;                    print(f&quot;[DEBUG] StoryExtractionAgent: Successfully uploaded {len(uploaded_story_ids)} stories&quot;)&#10;                except Exception as e:&#10;                    print(f&quot;[ERROR] StoryExtractionAgent: Failed to upload stories: {str(e)}&quot;)&#10;                    result.error_message = f&quot;Failed to upload stories: {str(e)}&quot;&#10;                    result.extraction_successful = False&#10;&#10;        except Exception as e:&#10;            # Accept string-based IDs (e.g., 'EPIC 1')&#10;            ado_id = requirement_id.strip()&#10;            print(f&quot;[AGENT] Using requirement ID: {ado_id}&quot;)&#10;            try:&#10;                # Get all requirements&#10;                requirement = self.ado_client.get_requirement_by_id(ado_id)&#10;                self.logger.info(f&quot;Found requirement to process: {ado_id}&quot;)&#10;                result = self.process_requirement_by_id(str(requirement.id), upload_to_ado)&#10;                # Summary&#10;                successful = 1 if result.extraction_successful else 0&#10;                total_stories = len(result.stories)&#10;                print(f&quot;[SUMMARY] Processed 1 requirement. Successful: {successful}, Total stories: {total_stories}&quot;)&#10;                return [result]&#10;            except Exception as inner_e:&#10;                print(f&quot;[ERROR] Failed to process requirement {ado_id}: {str(inner_e)}&quot;)&#10;                return []&#10;&#10;    def preview_stories(self, requirement_id: str) -&gt; StoryExtractionResult:&#10;        &quot;&quot;&quot;Extract and preview stories without uploading to ADO&quot;&quot;&quot;&#10;        return self.process_requirement_by_id(requirement_id, upload_to_ado=False)&#10;    &#10;    def _upload_stories_to_ado(self, stories: List[UserStory], parent_requirement_id: str) -&gt; List[int]:&#10;        &quot;&quot;&quot;Upload user stories to ADO as child items of the requirement&quot;&quot;&quot;&#10;        parent_id = parent_requirement_id  # No numeric parsing anymore&#10;        uploaded_ids = []&#10;        &#10;        for story in stories:&#10;            try:&#10;                story_data = story.to_ado_format()&#10;                story_id = self.ado_client.create_user_story(story_data, parent_id)&#10;                uploaded_ids.append(story_id)&#10;                self.logger.info(f&quot;Created user story {story_id}: {story.heading}&quot;)&#10;                &#10;                # Extract and upload test cases for this story&#10;                try:&#10;                    self._extract_and_upload_test_cases(story, str(story_id))&#10;                except Exception as test_case_error:&#10;                    self.logger.error(f&quot;Failed to create test cases for story {story_id}: {str(test_case_error)}&quot;)&#10;                    # Continue with next story even if test case creation fails&#10;                &#10;            except Exception as e:&#10;                self.logger.error(f&quot;Failed to create user story '{story.heading}': {str(e)}&quot;)&#10;                continue&#10;        &#10;        return uploaded_ids&#10;    &#10;    def _extract_and_upload_test_cases(self, user_story: UserStory, parent_story_id: str) -&gt; List[int]:&#10;        &quot;&quot;&quot;Extract test cases from a user story and upload them to ADO&quot;&quot;&quot;&#10;        try:&#10;            self.logger.info(f&quot;Extracting test cases for story: {user_story.heading}&quot;)&#10;            &#10;            # Extract test cases using AI&#10;            test_case_result = self.test_case_extractor.extract_test_cases(user_story, parent_story_id)&#10;            &#10;            if not test_case_result.extraction_successful:&#10;                raise Exception(test_case_result.error_message)&#10;            &#10;            self.logger.info(f&quot;Extracted {len(test_case_result.test_cases)} test cases for story {parent_story_id}&quot;)&#10;            &#10;            # Upload test cases to ADO&#10;            uploaded_test_case_ids = []&#10;            for test_case in test_case_result.test_cases:&#10;                try:&#10;                    test_case_data = test_case.to_ado_format()&#10;                    # Create test case as child of the user story&#10;                    test_case_id = self.ado_client.create_test_case(test_case_data, parent_story_id)&#10;                    uploaded_test_case_ids.append(test_case_id)&#10;                    self.logger.info(f&quot;Created test case {test_case_id}: {test_case.title}&quot;)&#10;                    &#10;                except Exception as tc_error:&#10;                    self.logger.error(f&quot;Failed to upload test case '{test_case.title}': {str(tc_error)}&quot;)&#10;                    continue&#10;            &#10;            return uploaded_test_case_ids&#10;            &#10;        except Exception as e:&#10;            self.logger.error(f&quot;Test case extraction failed for story {parent_story_id}: {str(e)}&quot;)&#10;            return []&#10;    &#10;    def extract_test_cases_for_story(self, story_id: str) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract test cases for an existing user story by ID&quot;&quot;&quot;&#10;        try:&#10;            # Fetch the user story from ADO&#10;            story_work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not story_work_item:&#10;                return TestCaseExtractionResult(&#10;                    story_id=story_id,&#10;                    story_title=&quot;&quot;,&#10;                    test_cases=[],&#10;                    extraction_successful=False,&#10;                    error_message=f&quot;User story {story_id} not found&quot;&#10;                )&#10;            &#10;            # Convert ADO work item to UserStory model&#10;            fields = story_work_item.fields&#10;            user_story = UserStory(&#10;                heading=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;            &#10;            # Extract test cases&#10;            return self.test_case_extractor.extract_test_cases(user_story, story_id)&#10;            &#10;        except Exception as e:&#10;            return TestCaseExtractionResult(&#10;                story_id=story_id,&#10;                story_title=&quot;&quot;,&#10;                test_cases=[],&#10;                extraction_successful=False,&#10;                error_message=str(e)&#10;            )&#10;    &#10;    def extract_test_cases_as_issues(self, story_id: str, upload_to_ado: bool = True) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract test cases for a user story and create them using the configured work item type&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;\n[AGENT] Extracting test cases as {Settings.TEST_CASE_EXTRACTION_TYPE} for story ID: {story_id}&quot;)&#10;&#10;            # Get the user story work item&#10;            work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not work_item:&#10;                error_msg = f&quot;User story {story_id} not found&quot;&#10;                return TestCaseExtractionResult(&#10;                    story_id=story_id,&#10;                    story_title=&quot;&quot;,&#10;                    test_cases=[],&#10;                    extraction_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;&#10;            # Convert work item to UserStory object&#10;            user_story = UserStory(&#10;                heading=work_item.fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=work_item.fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    work_item.fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;&#10;            print(f&quot;[AGENT] Found user story: {user_story.heading}&quot;)&#10;&#10;            # Extract test cases using AI&#10;            print(&quot;[AGENT] Extracting test cases with AI...&quot;)&#10;            result = self.test_case_extractor.extract_test_cases(user_story, story_id)&#10;&#10;            if not result.extraction_successful:&#10;                print(f&quot;[ERROR] Test case extraction failed: {result.error_message}&quot;)&#10;                return result&#10;&#10;            print(f&quot;[AGENT] Successfully extracted {len(result.test_cases)} test cases&quot;)&#10;&#10;            # Upload test cases using the configured type to ADO if requested&#10;            if upload_to_ado and result.test_cases:&#10;                print(f&quot;[AGENT] Creating {len(result.test_cases)} test cases as {Settings.TEST_CASE_EXTRACTION_TYPE} in Azure DevOps...&quot;)&#10;                created_issues = []&#10;&#10;                for i, test_case in enumerate(result.test_cases, 1):&#10;                    try:&#10;                        print(f&quot;[AGENT] Creating test case {i}/{len(result.test_cases)}: {test_case.title}&quot;)&#10;&#10;                        # Convert TestCase to dict format for ADO client&#10;                        test_case_data = {&#10;                            'title': test_case.title,&#10;                            'description': test_case.description,&#10;                            'test_type': test_case.test_type,&#10;                            'preconditions': test_case.preconditions,&#10;                            'test_steps': test_case.test_steps,&#10;                            'expected_result': test_case.expected_result,&#10;                            'priority': test_case.priority&#10;                        }&#10;&#10;                        # Use the new configurable method&#10;                        work_item_id = self.ado_client.create_test_case_with_config(&#10;                            test_case_data=test_case_data,&#10;                            parent_story_id=int(story_id)&#10;                        )&#10;&#10;                        created_issues.append(work_item_id)&#10;                        print(f&quot;[AGENT] ✅ Created {Settings.TEST_CASE_EXTRACTION_TYPE} #{work_item_id} for test case: {test_case.title}&quot;)&#10;&#10;                    except Exception as e:&#10;                        print(f&quot;[ERROR] Failed to create {Settings.TEST_CASE_EXTRACTION_TYPE} for test case '{test_case.title}': {e}&quot;)&#10;                        continue&#10;&#10;                print(f&quot;[AGENT] Successfully created {len(created_issues)} test case {Settings.TEST_CASE_EXTRACTION_TYPE}s in Azure DevOps&quot;)&#10;                result.created_issue_ids = created_issues&#10;&#10;            return result&#10;&#10;        except Exception as e:&#10;            error_msg = f&quot;Failed to extract test cases as {Settings.TEST_CASE_EXTRACTION_TYPE}s: {str(e)}&quot;&#10;            print(f&quot;[ERROR] {error_msg}&quot;)&#10;            return TestCaseExtractionResult(&#10;                story_id=story_id,&#10;                story_title=&quot;&quot;,&#10;                test_cases=[],&#10;                extraction_successful=False,&#10;                error_message=error_msg&#10;            )&#10;&#10;    def extract_test_cases_for_epic_stories(self, epic_id: str, upload_to_ado: bool = True) -&gt; Dict[str, TestCaseExtractionResult]:&#10;        &quot;&quot;&quot;Extract test cases as issues for all user stories under an epic&quot;&quot;&quot;&#10;        try:&#10;            print(f&quot;\n[AGENT] Extracting test cases as issues for all stories in epic: {epic_id}&quot;)&#10;&#10;            # Get all child stories for the epic&#10;            child_story_ids = self.ado_client.get_child_stories(int(epic_id))&#10;&#10;            if not child_story_ids:&#10;                print(f&quot;[WARNING] No child stories found for epic {epic_id}&quot;)&#10;                return {}&#10;&#10;            print(f&quot;[AGENT] Found {len(child_story_ids)} child stories in epic&quot;)&#10;&#10;            results = {}&#10;            for story_id in child_story_ids:&#10;                print(f&quot;\n[AGENT] Processing story {story_id}...&quot;)&#10;                result = self.extract_test_cases_as_issues(str(story_id), upload_to_ado)&#10;                results[str(story_id)] = result&#10;&#10;            return results&#10;&#10;        except Exception as e:&#10;            error_msg = f&quot;Failed to extract test cases for epic stories: {str(e)}&quot;&#10;            print(f&quot;[ERROR] {error_msg}&quot;)&#10;            return {}&#10;&#10;    def _extract_acceptance_criteria_from_description(self, description: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Extract acceptance criteria from story description&quot;&quot;&quot;&#10;        if not description:&#10;            return []&#10;&#10;        # Look for acceptance criteria patterns in the description&#10;        import re&#10;        criteria = []&#10;&#10;        # Common patterns for acceptance criteria&#10;        patterns = [&#10;            r&quot;(?:acceptance criteria|ac):\s*(.*?)(?:\n\n|\n(?=[A-Z])|$)&quot;,&#10;            r&quot;given.*?when.*?then.*&quot;,&#10;            r&quot;as a.*?i want.*?so that.*&quot;&#10;        ]&#10;&#10;        for pattern in patterns:&#10;            matches = re.findall(pattern, description, re.IGNORECASE | re.DOTALL)&#10;            for match in matches:&#10;                if match.strip():&#10;                    criteria.append(match.strip())&#10;&#10;        # If no structured criteria found, split by common delimiters&#10;        if not criteria:&#10;            lines = description.split('\n')&#10;            for line in lines:&#10;                line = line.strip()&#10;                if line and (line.startswith('-') or line.startswith('*') or line.startswith('•')):&#10;                    criteria.append(line[1:].strip())&#10;&#10;        return criteria[:5] if criteria else [&quot;Verify the functionality works as described&quot;]&#10;&#10;    def preview_test_cases(self, story_id: str) -&gt; TestCaseExtractionResult:&#10;        &quot;&quot;&quot;Extract and preview test cases for a user story without uploading to ADO&quot;&quot;&quot;&#10;        return self.extract_test_cases_for_story(story_id)&#10;    &#10;    def get_story_with_test_cases(self, story_id: str) -&gt; Dict[str, Any]:&#10;        &quot;&quot;&quot;Get a user story and its associated test cases&quot;&quot;&quot;&#10;        try:&#10;            # Fetch the user story&#10;            story_work_item = self.ado_client.get_work_item_by_id(story_id)&#10;            if not story_work_item:&#10;                return {&quot;error&quot;: f&quot;User story {story_id} not found&quot;}&#10;            &#10;            # Convert ADO work item to UserStory model&#10;            fields = story_work_item.fields&#10;            user_story = UserStory(&#10;                heading=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;                description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;                acceptance_criteria=self._extract_acceptance_criteria_from_description(&#10;                    fields.get(&quot;System.Description&quot;, &quot;&quot;)&#10;                )&#10;            )&#10;            &#10;            # Fetch test cases associated with the user story&#10;            test_case_result = self.ado_client.get_test_cases_by_story_id(story_id)&#10;            &#10;            return {&#10;                &quot;user_story&quot;: user_story,&#10;                &quot;test_cases&quot;: test_case_result&#10;            }&#10;            &#10;        except Exception as e:&#10;            return {&quot;error&quot;: str(e)}&#10;    &#10;    def get_requirement_summary(self, requirement_id: str) -&gt; Dict[str, Any]:&#10;        &quot;&quot;&quot;Get a summary of a requirement and its child stories&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = requirement_id  # No numeric parsing&#10;            requirement = self.ado_client.get_requirement_by_id(numeric_id)&#10;            if not requirement:&#10;                return {&quot;error&quot;: f&quot;Requirement {requirement_id} not found&quot;}&#10;            &#10;            child_story_ids = self.ado_client.get_child_stories(numeric_id)&#10;            &#10;            return {&#10;                &quot;requirement&quot;: {&#10;                    &quot;id&quot;: requirement.id,&#10;                    &quot;title&quot;: requirement.title,&#10;                    &quot;description&quot;: requirement.description[:200] + &quot;...&quot; if len(requirement.description) &gt; 200 else requirement.description,&#10;                    &quot;state&quot;: requirement.state&#10;                },&#10;                &quot;child_stories&quot;: {&#10;                    &quot;count&quot;: len(child_story_ids),&#10;                    &quot;ids&quot;: child_story_ids&#10;                }&#10;            }&#10;            &#10;        except Exception as e:&#10;            return {&quot;error&quot;: str(e)}&#10;    &#10;    def synchronize_epic(self, epic_id: str, stored_snapshot: Optional[Dict] = None) -&gt; EpicSyncResult:&#10;        &quot;&quot;&quot;Detect changes in an EPIC and synchronize its tasks&quot;&quot;&quot;&#10;        self.logger.info(f&quot;[AGENT] Synchronizing Epic: {epic_id}&quot;)&#10;        try:&#10;            # Fetch the requirement (Epic) from ADO&#10;            requirement = self.ado_client.get_requirement_by_id(epic_id)&#10;            if not requirement:&#10;                error_msg = f&quot;[AGENT] Epic {epic_id} not found or access denied&quot;&#10;                self.logger.error(error_msg)&#10;                return EpicSyncResult(&#10;                    epic_id=epic_id,&#10;                    epic_title=&quot;&quot;,&#10;                    sync_successful=False,&#10;                    error_message=error_msg&#10;                )&#10;            self.logger.info(f&quot;[AGENT] Fetched Epic: {requirement.title}&quot;)&#10;            self.logger.info(f&quot;[AGENT] Epic Description: {requirement.description}&quot;)&#10;            # Extract stories&#10;            self.logger.info(f&quot;[AGENT] Extracting stories from Epic {epic_id}&quot;)&#10;            extraction_result = self.story_extractor.extract_stories(requirement)&#10;            if not extraction_result.extraction_successful:&#10;                self.logger.error(f&quot;[AGENT] Story extraction failed: {extraction_result.error_message}&quot;)&#10;                return EpicSyncResult(&#10;                    epic_id=epic_id,&#10;                    epic_title=requirement.title,&#10;                    sync_successful=False,&#10;                    error_message=extraction_result.error_message&#10;                )&#10;            self.logger.info(f&quot;[AGENT] Extracted {len(extraction_result.stories)} stories from Epic {epic_id}&quot;)&#10;&#10;            # Get existing stories for this epic to avoid duplicates&#10;            self.logger.info(f&quot;[AGENT] Checking for existing stories in Epic {epic_id}&quot;)&#10;            existing_stories = self.ado_client.get_existing_user_stories(int(epic_id))&#10;            self.logger.info(f&quot;[AGENT] Found {len(existing_stories)} existing stories in Epic {epic_id}&quot;)&#10;&#10;            # Analyze what needs to be created, updated, or left unchanged&#10;            stories_to_create, stories_to_update, unchanged_stories = self._analyze_story_changes(&#10;                existing_stories, extraction_result.stories&#10;            )&#10;&#10;            self.logger.info(f&quot;[AGENT] Story analysis complete:&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Stories to create: {len(stories_to_create)}&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Stories to update: {len(stories_to_update)}&quot;)&#10;            self.logger.info(f&quot;[AGENT]   - Unchanged stories: {len(unchanged_stories)}&quot;)&#10;&#10;            # Upload stories to ADO&#10;            created_stories = []&#10;            updated_stories = []&#10;            created_test_cases = []&#10;            &#10;            # Create new stories&#10;            if stories_to_create:&#10;                self.logger.info(f&quot;[AGENT] Creating {len(stories_to_create)} new stories for Epic {epic_id}&quot;)&#10;                for story in stories_to_create:&#10;                    story_id = None&#10;                    try:&#10;                        # Use existing create_user_story method with proper format&#10;                        story_data = story.to_ado_format()&#10;                        story_id = self.ado_client.create_user_story(story_data, epic_id)&#10;                    except Exception as upload_exc:&#10;                        self.logger.error(f&quot;[AGENT] Failed to upload story '{story.heading}': {upload_exc}&quot;)&#10;                        continue&#10;                    &#10;                    if isinstance(story_id, int):&#10;                        created_stories.append(story_id)&#10;                        self.logger.info(f&quot;[AGENT] Successfully created story {story_id}: {story.heading}&quot;)&#10;                        &#10;                        # Extract and upload test cases for this story&#10;                        try:&#10;                            test_case_ids = self._extract_and_upload_test_cases(story, str(story_id))&#10;                            created_test_cases.extend(test_case_ids)&#10;                            self.logger.info(f&quot;[AGENT] Created {len(test_case_ids)} test cases for story {story_id}&quot;)&#10;                        except Exception as tc_exc:&#10;                            self.logger.error(f&quot;[AGENT] Failed to create test cases for story {story_id}: {tc_exc}&quot;)&#10;                    else:&#10;                        self.logger.error(f&quot;[AGENT] Story upload did not return a valid integer ID for '{story.heading}'&quot;)&#10;            else:&#10;                self.logger.info(f&quot;[AGENT] No new stories to create for Epic {epic_id}&quot;)&#10;&#10;            # Update existing stories that have changed&#10;            if stories_to_update:&#10;                self.logger.info(f&quot;[AGENT] Updating {len(stories_to_update)} existing stories for Epic {epic_id}&quot;)&#10;                for update_info in stories_to_update:&#10;                    try:&#10;                        self._update_user_story(update_info['id'], update_info['new_story'])&#10;                        updated_stories.append(update_info['id'])&#10;                        self.logger.info(f&quot;[AGENT] Successfully updated story {update_info['id']}: {update_info['new_story'].heading}&quot;)&#10;                    except Exception as update_exc:&#10;                        self.logger.error(f&quot;[AGENT] Failed to update story {update_info['id']}: {update_exc}&quot;)&#10;            else:&#10;                self.logger.info(f&quot;[AGENT] No stories to update for Epic {epic_id}&quot;)&#10;&#10;            # Log unchanged stories&#10;            unchanged_story_ids = [story.id for story in unchanged_stories]&#10;            if unchanged_story_ids:&#10;                self.logger.info(f&quot;[AGENT] {len(unchanged_story_ids)} stories remain unchanged: {unchanged_story_ids}&quot;)&#10;&#10;            return EpicSyncResult(&#10;                epic_id=epic_id,&#10;                epic_title=requirement.title,&#10;                sync_successful=True,&#10;                created_stories=created_stories,&#10;                updated_stories=updated_stories,&#10;                unchanged_stories=unchanged_story_ids,&#10;                created_test_cases=created_test_cases&#10;            )&#10;        except Exception as e:&#10;            self.logger.error(f&quot;[AGENT] Exception during Epic sync: {e}&quot;)&#10;            import traceback&#10;            self.logger.error(traceback.format_exc())&#10;            return EpicSyncResult(&#10;                epic_id=epic_id,&#10;                epic_title=&quot;&quot;,&#10;                sync_successful=False,&#10;                error_message=str(e)&#10;            )&#10;    &#10;    def _analyze_story_changes(self, existing_stories, new_stories):&#10;        &quot;&quot;&quot;Analyze differences between existing and new stories to determine what to create/update&quot;&quot;&quot;&#10;        from difflib import SequenceMatcher&#10;        &#10;        stories_to_create = []&#10;        stories_to_update = []&#10;        unchanged_stories = []&#10;        &#10;        # Convert existing stories to a dict for easier lookup&#10;        existing_by_title = {story.title: story for story in existing_stories}&#10;        &#10;        # Check each new story against existing ones&#10;        for new_story in new_stories:&#10;            best_match = None&#10;            best_similarity = 0.0&#10;            &#10;            # Find the best matching existing story by title similarity&#10;            for existing_title, existing_story in existing_by_title.items():&#10;                similarity = SequenceMatcher(None, new_story.heading.lower(), existing_title.lower()).ratio()&#10;                if similarity &gt; best_similarity:&#10;                    best_similarity = similarity&#10;                    best_match = existing_story&#10;            &#10;            # If we found a good match (similarity &gt; 0.8), consider it for update&#10;            if best_match and best_similarity &gt; 0.8:&#10;                # Check if the content has actually changed&#10;                existing_content = f&quot;{best_match.title} {best_match.description}&quot;&#10;                new_content = f&quot;{new_story.heading} {new_story.description} {' '.join(new_story.acceptance_criteria)}&quot;&#10;                &#10;                content_similarity = SequenceMatcher(None, existing_content.lower(), new_content.lower()).ratio()&#10;                &#10;                if content_similarity &lt; 0.9:  # Content has changed significantly&#10;                    stories_to_update.append({&#10;                        'id': best_match.id,&#10;                        'existing_story': best_match,&#10;                        'new_story': new_story&#10;                    })&#10;                    # Remove from existing dict so it's not considered again&#10;                    del existing_by_title[best_match.title]&#10;                else:&#10;                    unchanged_stories.append(best_match)&#10;                    del existing_by_title[best_match.title]&#10;            else:&#10;                # No good match found, this is a new story&#10;                stories_to_create.append(new_story)&#10;        &#10;        # Any remaining existing stories that weren't matched are considered unchanged&#10;        for remaining_story in existing_by_title.values():&#10;            unchanged_stories.append(remaining_story)&#10;        &#10;        return stories_to_create, stories_to_update, unchanged_stories&#10;    &#10;    def _update_user_story(self, story_id: int, new_story: UserStory):&#10;        &quot;&quot;&quot;Update an existing user story in ADO&quot;&quot;&quot;&#10;        try:&#10;            story_data = new_story.to_ado_format()&#10;            &#10;            # Prepare update document&#10;            document = []&#10;            for field, value in story_data.items():&#10;                document.append({&#10;                    &quot;op&quot;: &quot;replace&quot;,&#10;                    &quot;path&quot;: f&quot;/fields/{field}&quot;,&#10;                    &quot;value&quot;: value&#10;                })&#10;            &#10;            # Update the work item&#10;            self.ado_client.wit_client.update_work_item(&#10;                document=document,&#10;                id=story_id&#10;            )&#10;            &#10;        except Exception as e:&#10;            raise Exception(f&quot;Failed to update user story {story_id}: {str(e)}&quot;)&#10;    &#10;    def get_epic_snapshot(self, epic_id: str) -&gt; Optional[Dict[str, str]]:&#10;        &quot;&quot;&quot;Get a snapshot of the current EPIC for change tracking&quot;&quot;&quot;&#10;        try:&#10;            numeric_id = epic_id  # No numeric parsing&#10;            snapshot = self.ado_client.detect_changes_in_epic(numeric_id)&#10;            &#10;            if snapshot:&#10;                return {&#10;                    'content_hash': snapshot.content_hash,&#10;                    'last_modified': snapshot.last_modified.isoformat() if snapshot.last_modified else None,&#10;                    'title': snapshot.title,&#10;                    'state': snapshot.state&#10;                }&#10;            return None&#10;            &#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to get EPIC snapshot for {epic_id}: {str(e)}&quot;)&#10;            return None&#10;&#10;    def extract_stories_for_epic(self, epic_id: str, existing_stories: List[dict] = None) -&gt; List[dict]:&#10;        &quot;&quot;&quot;Extract stories for a given epic, avoiding duplicates.&quot;&quot;&quot;&#10;        requirement = self.ado_client.get_requirement_by_id(epic_id)&#10;        if not requirement:&#10;            self.logger.error(f&quot;Requirement (Epic) {epic_id} not found.&quot;)&#10;            return []&#10;        result = self.story_extractor.extract_stories(requirement, existing_stories)&#10;        if not result.extraction_successful:&#10;            self.logger.error(f&quot;Story extraction failed for Epic {epic_id}: {result.error_message}&quot;)&#10;            return []&#10;        # Convert UserStory objects to dicts for snapshot&#10;        return [story.__dict__ for story in result.stories]&#10;&#10;    def _setup_logger(self) -&gt; logging.Logger:&#10;        &quot;&quot;&quot;Setup logging configuration&quot;&quot;&quot;&#10;        logger = logging.getLogger(&quot;StoryExtractionAgent&quot;)&#10;        logger.setLevel(logging.INFO)&#10;        &#10;        if not logger.handlers:&#10;            handler = logging.StreamHandler()&#10;            formatter = logging.Formatter(&#10;                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'&#10;            )&#10;            handler.setFormatter(formatter)&#10;            logger.addHandler(handler)&#10;        &#10;        return logger" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models.py" />
              <option name="originalContent" value="from typing import List, Optional, Dict, Any&#10;from datetime import datetime&#10;from pydantic import BaseModel, Field&#10;import os&#10;&#10;OPENAI_RETRY_DELAY = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;&#10;class TestCase(BaseModel):&#10;    &quot;&quot;&quot;Model representing a test case extracted from a user story&quot;&quot;&quot;&#10;    title: str = Field(..., description=&quot;Title of the test case&quot;)&#10;    description: str = Field(..., description=&quot;Detailed description of what the test case validates&quot;)&#10;    test_type: str = Field(..., description=&quot;Type of test case: 'positive', 'negative', or 'edge'&quot;)&#10;    preconditions: List[str] = Field(default_factory=list, description=&quot;Prerequisites for the test&quot;)&#10;    test_steps: List[str] = Field(..., description=&quot;Step-by-step test execution instructions&quot;)&#10;    expected_result: str = Field(..., description=&quot;Expected outcome of the test&quot;)&#10;    priority: str = Field(default=&quot;Medium&quot;, description=&quot;Test priority: 'High', 'Medium', or 'Low'&quot;)&#10;    parent_story_id: Optional[str] = Field(None, description=&quot;ID of the parent user story&quot;)&#10;    &#10;    def to_ado_format(self) -&gt; dict:&#10;        &quot;&quot;&quot;Convert to Azure DevOps test case format&quot;&quot;&quot;&#10;        # Format preconditions and test steps as HTML lists&#10;        preconditions_html = &quot;&lt;br&gt;&quot;.join([f&quot;• {condition}&quot; for condition in self.preconditions]) if self.preconditions else &quot;None&quot;&#10;        test_steps_html = &quot;&lt;br&gt;&quot;.join([f&quot;{i+1}. {step}&quot; for i, step in enumerate(self.test_steps)])&#10;        &#10;        # Create full description with all test details&#10;        full_description = f&quot;&quot;&quot;&#10;&lt;strong&gt;Test Type:&lt;/strong&gt; {self.test_type.title()}&lt;br&gt;&#10;&lt;strong&gt;Description:&lt;/strong&gt; {self.description}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;br&gt;{preconditions_html}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Test Steps:&lt;/strong&gt;&lt;br&gt;{test_steps_html}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Expected Result:&lt;/strong&gt;&lt;br&gt;{self.expected_result}&#10;        &quot;&quot;&quot;.strip()&#10;        &#10;        return {&#10;            &quot;System.Title&quot;: self.title,&#10;            &quot;System.Description&quot;: full_description,&#10;            &quot;Microsoft.VSTS.Common.Priority&quot;: self.priority,&#10;            &quot;Microsoft.VSTS.TCM.TestCaseType&quot;: self.test_type.title()&#10;        }&#10;&#10;class UserStory(BaseModel):&#10;    &quot;&quot;&quot;Model representing a user story extracted from a requirement&quot;&quot;&quot;&#10;    heading: str = Field(..., description=&quot;Title/heading of the user story&quot;)&#10;    description: str = Field(..., description=&quot;Detailed description of what the user wants&quot;)&#10;    acceptance_criteria: List[str] = Field(..., description=&quot;List of acceptance criteria&quot;)&#10;    test_cases: List[TestCase] = Field(default_factory=list, description=&quot;Associated test cases&quot;)&#10;    &#10;    def to_ado_format(self) -&gt; dict:&#10;        &quot;&quot;&quot;Convert to Azure DevOps work item format with acceptance criteria in description&quot;&quot;&quot;&#10;        # Format acceptance criteria as HTML bulleted list for proper ADO display&#10;        acceptance_criteria_html = &quot;&lt;br&gt;&quot;.join([f&quot;• {criteria}&quot; for criteria in self.acceptance_criteria])&#10;        &#10;        # Combine description with acceptance criteria using HTML formatting&#10;        # ADO description field expects HTML format for proper newline rendering&#10;        full_description = f&quot;{self.description}&lt;br&gt;&lt;br&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;br&gt;{acceptance_criteria_html}&quot;&#10;        &#10;        return {&#10;            &quot;System.Title&quot;: self.heading,&#10;            &quot;System.Description&quot;: full_description&#10;        }&#10;&#10;class Requirement(BaseModel):&#10;    &quot;&quot;&quot;Model representing an ADO requirement&quot;&quot;&quot;&#10;    id: str  # Changed from int to str&#10;    title: str&#10;    description: str&#10;    state: str&#10;    url: Optional[str] = None&#10;    @staticmethod&#10;    def from_ado_work_item(work_item: Any) -&gt; &quot;Requirement&quot;:&#10;        &quot;&quot;&quot;Create a Requirement instance from an Azure DevOps work item object.&quot;&quot;&quot;&#10;        fields = getattr(work_item, 'fields', {})&#10;        return Requirement(&#10;            id=str(getattr(work_item, 'id', '')),&#10;            title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;            description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;            state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;            url=getattr(work_item, 'url', None)&#10;        )&#10;&#10;&#10;class StoryExtractionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of story extraction from a requirement&quot;&quot;&quot;&#10;    requirement_id: str  # Changed to str to handle both numeric and text IDs&#10;    requirement_title: str&#10;    stories: List[UserStory]&#10;    extraction_successful: bool = True&#10;    error_message: Optional[str] = None&#10;&#10;class ExistingUserStory(BaseModel):&#10;    &quot;&quot;&quot;Model representing an existing user story in ADO&quot;&quot;&quot;&#10;    id: int&#10;    title: str&#10;    description: str&#10;    state: str&#10;    parent_id: Optional[int] = None&#10;    &#10;class ChangeDetectionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of change detection for an EPIC&quot;&quot;&quot;&#10;    epic_id: str&#10;    epic_title: str&#10;    has_changes: bool = False&#10;    changes_detected: List[str] = Field(default_factory=list)&#10;    last_modified: Optional[datetime] = None&#10;    existing_stories: List[ExistingUserStory] = Field(default_factory=list)&#10;    new_stories: List[UserStory] = Field(default_factory=list)&#10;    stories_to_update: List[Dict[str, Any]] = Field(default_factory=list)&#10;    stories_to_create: List[UserStory] = Field(default_factory=list)&#10;    &#10;class TestCaseExtractionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of test case extraction from a user story&quot;&quot;&quot;&#10;    story_id: str&#10;    story_title: str&#10;    test_cases: List[TestCase]&#10;    extraction_successful: bool = True&#10;    error_message: Optional[str] = None&#10;&#10;class EpicSyncResult(BaseModel):&#10;    &quot;&quot;&quot;Result of synchronizing an EPIC with its user stories&quot;&quot;&quot;&#10;    epic_id: str&#10;    epic_title: str&#10;    sync_successful: bool = True&#10;    created_stories: List[int] = Field(default_factory=list)&#10;    updated_stories: List[int] = Field(default_factory=list)&#10;    unchanged_stories: List[int] = Field(default_factory=list)&#10;    created_test_cases: List[int] = Field(default_factory=list)  # Track created test cases&#10;    error_message: Optional[str] = None&#10;    &#10;class RequirementSnapshot(BaseModel):&#10;    &quot;&quot;&quot;Snapshot of a requirement for change tracking&quot;&quot;&quot;&#10;    id: int&#10;    title: str&#10;    description: str&#10;    state: str&#10;    last_modified: Optional[datetime] = None&#10;    content_hash: Optional[str] = None  # Hash of title + description for quick comparison&#10;" />
              <option name="updatedContent" value="from typing import List, Optional, Dict, Any&#10;from datetime import datetime&#10;from pydantic import BaseModel, Field&#10;import os&#10;&#10;OPENAI_RETRY_DELAY = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;&#10;class TestCase(BaseModel):&#10;    &quot;&quot;&quot;Model representing a test case extracted from a user story&quot;&quot;&quot;&#10;    title: str = Field(..., description=&quot;Title of the test case&quot;)&#10;    description: str = Field(..., description=&quot;Detailed description of what the test case validates&quot;)&#10;    test_type: str = Field(..., description=&quot;Type of test case: 'positive', 'negative', or 'edge'&quot;)&#10;    preconditions: List[str] = Field(default_factory=list, description=&quot;Prerequisites for the test&quot;)&#10;    test_steps: List[str] = Field(..., description=&quot;Step-by-step test execution instructions&quot;)&#10;    expected_result: str = Field(..., description=&quot;Expected outcome of the test&quot;)&#10;    priority: str = Field(default=&quot;Medium&quot;, description=&quot;Test priority: 'High', 'Medium', or 'Low'&quot;)&#10;    parent_story_id: Optional[str] = Field(None, description=&quot;ID of the parent user story&quot;)&#10;    &#10;    def to_ado_format(self) -&gt; dict:&#10;        &quot;&quot;&quot;Convert to Azure DevOps test case format&quot;&quot;&quot;&#10;        # Format preconditions and test steps as HTML lists&#10;        preconditions_html = &quot;&lt;br&gt;&quot;.join([f&quot;• {condition}&quot; for condition in self.preconditions]) if self.preconditions else &quot;None&quot;&#10;        test_steps_html = &quot;&lt;br&gt;&quot;.join([f&quot;{i+1}. {step}&quot; for i, step in enumerate(self.test_steps)])&#10;        &#10;        # Create full description with all test details&#10;        full_description = f&quot;&quot;&quot;&#10;&lt;strong&gt;Test Type:&lt;/strong&gt; {self.test_type.title()}&lt;br&gt;&#10;&lt;strong&gt;Description:&lt;/strong&gt; {self.description}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;br&gt;{preconditions_html}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Test Steps:&lt;/strong&gt;&lt;br&gt;{test_steps_html}&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Expected Result:&lt;/strong&gt;&lt;br&gt;{self.expected_result}&#10;        &quot;&quot;&quot;.strip()&#10;        &#10;        return {&#10;            &quot;System.Title&quot;: self.title,&#10;            &quot;System.Description&quot;: full_description,&#10;            &quot;Microsoft.VSTS.Common.Priority&quot;: self.priority,&#10;            &quot;Microsoft.VSTS.TCM.TestCaseType&quot;: self.test_type.title()&#10;        }&#10;&#10;class UserStory(BaseModel):&#10;    &quot;&quot;&quot;Model representing a user story extracted from a requirement&quot;&quot;&quot;&#10;    heading: str = Field(..., description=&quot;Title/heading of the user story&quot;)&#10;    description: str = Field(..., description=&quot;Detailed description of what the user wants&quot;)&#10;    acceptance_criteria: List[str] = Field(..., description=&quot;List of acceptance criteria&quot;)&#10;    test_cases: List[TestCase] = Field(default_factory=list, description=&quot;Associated test cases&quot;)&#10;    &#10;    def to_ado_format(self) -&gt; dict:&#10;        &quot;&quot;&quot;Convert to Azure DevOps work item format with acceptance criteria in description&quot;&quot;&quot;&#10;        # Format acceptance criteria as HTML bulleted list for proper ADO display&#10;        acceptance_criteria_html = &quot;&lt;br&gt;&quot;.join([f&quot;• {criteria}&quot; for criteria in self.acceptance_criteria])&#10;        &#10;        # Combine description with acceptance criteria using HTML formatting&#10;        # ADO description field expects HTML format for proper newline rendering&#10;        full_description = f&quot;{self.description}&lt;br&gt;&lt;br&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;br&gt;{acceptance_criteria_html}&quot;&#10;        &#10;        return {&#10;            &quot;System.Title&quot;: self.heading,&#10;            &quot;System.Description&quot;: full_description&#10;        }&#10;&#10;class Requirement(BaseModel):&#10;    &quot;&quot;&quot;Model representing an ADO requirement&quot;&quot;&quot;&#10;    id: str  # Changed from int to str&#10;    title: str&#10;    description: str&#10;    state: str&#10;    url: Optional[str] = None&#10;    @staticmethod&#10;    def from_ado_work_item(work_item: Any) -&gt; &quot;Requirement&quot;:&#10;        &quot;&quot;&quot;Create a Requirement instance from an Azure DevOps work item object.&quot;&quot;&quot;&#10;        fields = getattr(work_item, 'fields', {})&#10;        return Requirement(&#10;            id=str(getattr(work_item, 'id', '')),&#10;            title=fields.get(&quot;System.Title&quot;, &quot;&quot;),&#10;            description=fields.get(&quot;System.Description&quot;, &quot;&quot;),&#10;            state=fields.get(&quot;System.State&quot;, &quot;&quot;),&#10;            url=getattr(work_item, 'url', None)&#10;        )&#10;&#10;&#10;class StoryExtractionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of story extraction from a requirement&quot;&quot;&quot;&#10;    requirement_id: str  # Changed to str to handle both numeric and text IDs&#10;    requirement_title: str&#10;    stories: List[UserStory]&#10;    extraction_successful: bool = True&#10;    error_message: Optional[str] = None&#10;&#10;class ExistingUserStory(BaseModel):&#10;    &quot;&quot;&quot;Model representing an existing user story in ADO&quot;&quot;&quot;&#10;    id: int&#10;    title: str&#10;    description: str&#10;    state: str&#10;    parent_id: Optional[int] = None&#10;    &#10;class ChangeDetectionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of change detection for an EPIC&quot;&quot;&quot;&#10;    epic_id: str&#10;    epic_title: str&#10;    has_changes: bool = False&#10;    changes_detected: List[str] = Field(default_factory=list)&#10;    last_modified: Optional[datetime] = None&#10;    existing_stories: List[ExistingUserStory] = Field(default_factory=list)&#10;    new_stories: List[UserStory] = Field(default_factory=list)&#10;    stories_to_update: List[Dict[str, Any]] = Field(default_factory=list)&#10;    stories_to_create: List[UserStory] = Field(default_factory=list)&#10;    &#10;class TestCaseExtractionResult(BaseModel):&#10;    &quot;&quot;&quot;Result of test case extraction from a user story&quot;&quot;&quot;&#10;    story_id: str&#10;    story_title: str&#10;    test_cases: List[TestCase]&#10;    extraction_successful: bool = True&#10;    error_message: Optional[str] = None&#10;    created_issue_ids: List[int] = Field(default_factory=list, description=&quot;IDs of created Issue work items for test cases&quot;)&#10;&#10;class EpicSyncResult(BaseModel):&#10;    &quot;&quot;&quot;Result of synchronizing an EPIC with its user stories&quot;&quot;&quot;&#10;    epic_id: str&#10;    epic_title: str&#10;    sync_successful: bool = True&#10;    created_stories: List[int] = Field(default_factory=list)&#10;    updated_stories: List[int] = Field(default_factory=list)&#10;    unchanged_stories: List[int] = Field(default_factory=list)&#10;    created_test_cases: List[int] = Field(default_factory=list)  # Track created test cases&#10;    error_message: Optional[str] = None&#10;    &#10;class RequirementSnapshot(BaseModel):&#10;    &quot;&quot;&quot;Snapshot of a requirement for change tracking&quot;&quot;&quot;&#10;    id: int&#10;    title: str&#10;    description: str&#10;    state: str&#10;    last_modified: Optional[datetime] = None&#10;    content_hash: Optional[str] = None  # Hash of title + description for quick comparison&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/monitor.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/monitor.py" />
              <option name="originalContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Background monitoring service for EPIC change detection and automatic synchronization.&#10;&quot;&quot;&quot;&#10;&#10;import asyncio&#10;import json&#10;import logging&#10;import os&#10;import sys&#10;import time&#10;from datetime import datetime&#10;from pathlib import Path&#10;from typing import Dict, List, Optional, Set, ClassVar&#10;from dataclasses import dataclass, asdict&#10;from concurrent.futures import ThreadPoolExecutor&#10;&#10;from src.agent import StoryExtractionAgent&#10;from src.models import EpicSyncResult&#10;&#10;&#10;@dataclass&#10;class MonitorConfig:&#10;    &quot;&quot;&quot;Configuration for the EPIC monitor&quot;&quot;&quot;&#10;    OPENAI_RETRY_DELAY: ClassVar[int] = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;    poll_interval_seconds: int = 300  # 5 minutes default&#10;    max_concurrent_syncs: int = 3&#10;    snapshot_directory: str = &quot;snapshots&quot;&#10;    log_level: str = &quot;INFO&quot;&#10;    epic_ids: List[str] = None&#10;    auto_sync: bool = True&#10;    auto_extract_new_epics: bool = True  # New option to control story extraction for new epics&#10;    notification_webhook: Optional[str] = None&#10;    retry_attempts: int = 3&#10;    retry_delay_seconds: int = 60&#10;    # New configuration options for work item types&#10;    story_extraction_type: str = &quot;User Story&quot;  # Can be &quot;User Story&quot; or &quot;Task&quot;&#10;    test_case_extraction_type: str = &quot;Issue&quot;   # Can be &quot;Issue&quot; or &quot;Test Case&quot;&#10;    skip_duplicate_check: bool = False  # Option to skip duplicate checking&#10;&#10;&#10;@dataclass&#10;class EpicMonitorState:&#10;    &quot;&quot;&quot;State tracking for a monitored EPIC&quot;&quot;&quot;&#10;    epic_id: str&#10;    last_check: datetime&#10;    last_snapshot: Optional[Dict] = None&#10;    consecutive_errors: int = 0&#10;    last_sync_result: Optional[Dict] = None&#10;    stories_extracted: bool = False  # Track if stories have been extracted for this epic&#10;    extracted_stories: List[Dict] = None  # List of extracted stories for duplicate prevention&#10;&#10;&#10;class EpicChangeMonitor:&#10;    &quot;&quot;&quot;Background service that monitors EPICs for changes and triggers synchronization&quot;&quot;&quot;&#10;    &#10;    def __init__(self, config: MonitorConfig):&#10;        self.config = config&#10;        self.agent = StoryExtractionAgent()&#10;        self.logger = self._setup_logger()&#10;        self.is_running = False&#10;        self.monitored_epics: Dict[str, EpicMonitorState] = {}&#10;        self.executor = ThreadPoolExecutor(max_workers=config.max_concurrent_syncs)&#10;        self.snapshot_dir = Path(config.snapshot_directory)&#10;        self.snapshot_dir.mkdir(exist_ok=True)&#10;        # ThreadPoolExecutor for async syncs&#10;        self.snapshot_dir.mkdir(exist_ok=True)&#10;        &#10;        # State file to track which epics have been processed&#10;        self.state_file = Path(&quot;monitor_state.json&quot;)&#10;        self.processed_epics = self._load_processed_epics()&#10;&#10;        # Load existing snapshots&#10;        self._load_existing_snapshots()&#10;    &#10;    def _setup_logger(self) -&gt; logging.Logger:&#10;        &quot;&quot;&quot;Setup logging for the monitor&quot;&quot;&quot;&#10;        logger = logging.getLogger(&quot;EpicChangeMonitor&quot;)&#10;        logger.setLevel(getattr(logging, self.config.log_level.upper()))&#10;        if not logger.handlers:&#10;            # Console handler&#10;            console_handler = logging.StreamHandler()&#10;            console_formatter = logging.Formatter(&#10;                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'&#10;            )&#10;            console_handler.setFormatter(console_formatter)&#10;            logger.addHandler(console_handler)&#10;            # File handler&#10;            log_file = Path(&quot;logs&quot;) / &quot;epic_monitor.log&quot;&#10;            log_file.parent.mkdir(exist_ok=True)&#10;            file_handler = logging.FileHandler(log_file)&#10;            file_handler.setFormatter(console_formatter)&#10;            logger.addHandler(file_handler)&#10;        return logger&#10;    &#10;    def _load_processed_epics(self) -&gt; Set[str]:&#10;        &quot;&quot;&quot;Load the set of epics that have already been processed (had stories extracted)&quot;&quot;&quot;&#10;        try:&#10;            if self.state_file.exists():&#10;                with open(self.state_file, 'r') as f:&#10;                    state_data = json.load(f)&#10;                return set(state_data.get('processed_epics', []))&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to load processed epics state: {e}&quot;)&#10;        return set()&#10;    &#10;    def _save_processed_epics(self):&#10;        &quot;&quot;&quot;Save the set of processed epics to state file&quot;&quot;&quot;&#10;        try:&#10;            state_data = {&#10;                'processed_epics': list(self.processed_epics),&#10;                'last_updated': datetime.now().isoformat()&#10;            }&#10;            with open(self.state_file, 'w') as f:&#10;                json.dump(state_data, f, indent=2)&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to save processed epics state: {e}&quot;)&#10;&#10;    def _load_existing_snapshots(self):&#10;        for epic_id in self.config.epic_ids or []:&#10;            snapshot_file = self.snapshot_dir / f&quot;epic_{epic_id}.json&quot;&#10;            if snapshot_file.exists():&#10;                try:&#10;                    with open(snapshot_file, 'r') as f:&#10;                        snapshot_data = json.load(f)&#10;                    stories = snapshot_data.get('stories', [])&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=snapshot_data,&#10;                        stories_extracted=epic_id in self.processed_epics,&#10;                        extracted_stories=stories&#10;                    )&#10;                    self.logger.info(f&quot;Loaded existing snapshot for EPIC {epic_id}&quot;)&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Failed to load snapshot for EPIC {epic_id}: {e}&quot;)&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        stories_extracted=epic_id in self.processed_epics,&#10;                        extracted_stories=[]&#10;                    )&#10;            else:&#10;                self.monitored_epics[epic_id] = EpicMonitorState(&#10;                    epic_id=epic_id,&#10;                    last_check=datetime.now(),&#10;                    stories_extracted=epic_id in self.processed_epics,&#10;                    extracted_stories=[]&#10;                )&#10;&#10;    def add_epic(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add an EPIC to monitoring and trigger immediate check/sync.&quot;&quot;&quot;&#10;        try:&#10;            if epic_id not in self.monitored_epics:&#10;                # Get initial snapshot&#10;                initial_snapshot = self.agent.get_epic_snapshot(epic_id)&#10;                if initial_snapshot:&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=initial_snapshot,&#10;                        consecutive_errors=0&#10;                    )&#10;                    self._save_snapshot(epic_id, initial_snapshot)&#10;                    self.logger.info(f&quot;Added EPIC {epic_id} to monitoring and will check for changes immediately.&quot;)&#10;                    # Immediately check and sync the new Epic&#10;                    if self._check_epic_changes(epic_id):&#10;                        if self.config.auto_sync:&#10;                            self.logger.info(f&quot;Immediately synchronizing new EPIC {epic_id} after detection.&quot;)&#10;                            self._sync_epic(epic_id)&#10;                    return True&#10;                else:&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=None,&#10;                        consecutive_errors=1&#10;                    )&#10;                    self.logger.warning(f&quot;Added EPIC {epic_id} to monitoring, but could not fetch initial snapshot. Will retry.&quot;)&#10;                    return False&#10;            else:&#10;                self.logger.warning(f&quot;EPIC {epic_id} is already being monitored&quot;)&#10;                return True&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to add EPIC {epic_id} to monitoring: {e}&quot;)&#10;            return False&#10;    &#10;    def remove_epic(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove an EPIC from monitoring&quot;&quot;&quot;&#10;        if epic_id in self.monitored_epics:&#10;            del self.monitored_epics[epic_id]&#10;            self.logger.info(f&quot;Removed EPIC {epic_id} from monitoring&quot;)&#10;            return True&#10;        return False&#10;    &#10;    def _save_snapshot(self, epic_id: str, snapshot_data: Dict):&#10;        &quot;&quot;&quot;Save snapshot for an epic, including stories&quot;&quot;&quot;&#10;        snapshot_file = self.snapshot_dir / f&quot;epic_{epic_id}.json&quot;&#10;        try:&#10;            with open(snapshot_file, 'w') as f:&#10;                json.dump(snapshot_data, f, indent=2)&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to save snapshot for EPIC {epic_id}: {e}&quot;)&#10;&#10;    def _check_epic_changes(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check for changes in an epic and update snapshot if needed, avoiding duplicates&quot;&quot;&quot;&#10;        state = self.monitored_epics.get(epic_id)&#10;        if not state:&#10;            return False&#10;        # Extract new stories&#10;        new_stories = self.agent.extract_stories_for_epic(epic_id)&#10;        # Compare with existing stories&#10;        existing_stories = state.extracted_stories or []&#10;        filtered_stories = []&#10;        for story in new_stories:&#10;            if not any(&#10;                story['heading'] == es.get('heading') and&#10;                story['description'] == es.get('description') and&#10;                story['acceptance_criteria'] == es.get('acceptance_criteria')&#10;                for es in existing_stories&#10;            ):&#10;                filtered_stories.append(story)&#10;        if filtered_stories:&#10;            # Update snapshot and state&#10;            snapshot_data = state.last_snapshot or {}&#10;            snapshot_data['stories'] = existing_stories + filtered_stories&#10;            state.extracted_stories = snapshot_data['stories']&#10;            self._save_snapshot(epic_id, snapshot_data)&#10;            self.logger.info(f&quot;Added {len(filtered_stories)} new stories for EPIC {epic_id}&quot;)&#10;            return True&#10;        else:&#10;            self.logger.info(f&quot;No new stories for EPIC {epic_id} (no changes detected)&quot;)&#10;            return False&#10;    &#10;    def _sync_epic(self, epic_id: str) -&gt; EpicSyncResult:&#10;        &quot;&quot;&quot;Synchronize an EPIC with retry logic&quot;&quot;&quot;&#10;        epic_state = self.monitored_epics[epic_id]&#10;        &#10;        for attempt in range(self.config.retry_attempts):&#10;            try:&#10;                self.logger.info(f&quot;Synchronizing EPIC {epic_id} (attempt {attempt + 1})&quot;)&#10;                &#10;                result = self.agent.synchronize_epic(&#10;                    epic_id=epic_id,&#10;                    stored_snapshot=epic_state.last_snapshot&#10;                )&#10;                &#10;                if result.sync_successful:&#10;                    # Update snapshot after successful sync&#10;                    new_snapshot = self.agent.get_epic_snapshot(epic_id)&#10;                    if new_snapshot:&#10;                        epic_state.last_snapshot = new_snapshot&#10;                        self._save_snapshot(epic_id, new_snapshot)&#10;                    &#10;                    # Mark epic as processed if stories were created&#10;                    if len(result.created_stories) &gt; 0:&#10;                        self.processed_epics.add(epic_id)&#10;                        epic_state.stories_extracted = True&#10;                        self._save_processed_epics()&#10;                    &#10;                    # Store sync result&#10;                    epic_state.last_sync_result = {&#10;                        'timestamp': datetime.now().isoformat(),&#10;                        'success': True,&#10;                        'created_stories': result.created_stories,&#10;                        'updated_stories': result.updated_stories,&#10;                        'unchanged_stories': result.unchanged_stories&#10;                    }&#10;                    &#10;                    self.logger.info(f&quot;Successfully synchronized EPIC {epic_id}&quot;)&#10;                    self.logger.info(f&quot;  Created: {len(result.created_stories)} stories&quot;)&#10;                    self.logger.info(f&quot;  Updated: {len(result.updated_stories)} stories&quot;)&#10;                    self.logger.info(f&quot;  Unchanged: {len(result.unchanged_stories)} stories&quot;)&#10;                    &#10;                    return result&#10;                else:&#10;                    self.logger.error(f&quot;Sync failed for EPIC {epic_id}: {result.error_message}&quot;)&#10;                    if attempt &lt; self.config.retry_attempts - 1:&#10;                        self.logger.info(f&quot;Retrying in {self.config.retry_delay_seconds} seconds...&quot;)&#10;                        time.sleep(self.config.retry_delay_seconds)&#10;                    &#10;            except Exception as e:&#10;                self.logger.error(f&quot;Exception during sync of EPIC {epic_id}: {e}&quot;)&#10;                if attempt &lt; self.config.retry_attempts - 1:&#10;                    self.logger.info(f&quot;Retrying in {self.config.retry_delay_seconds} seconds...&quot;)&#10;                    time.sleep(self.config.retry_delay_seconds)&#10;        &#10;        # All attempts failed&#10;        epic_state.last_sync_result = {&#10;            'timestamp': datetime.now().isoformat(),&#10;            'success': False,&#10;            'error': f&quot;Failed after {self.config.retry_attempts} attempts&quot;&#10;        }&#10;        &#10;        return EpicSyncResult(&#10;            epic_id=epic_id,&#10;            epic_title=&quot;&quot;,&#10;            sync_successful=False,&#10;            error_message=f&quot;Failed after {self.config.retry_attempts} attempts&quot;&#10;        )&#10;    &#10;    async def _monitor_loop(self):&#10;        &quot;&quot;&quot;Main monitoring loop&quot;&quot;&quot;&#10;        self.logger.info(&quot;Starting EPIC monitoring loop&quot;)&#10;        try:&#10;            while True:&#10;                try:&#10;                    # Auto-detect new Epics at the start of each cycle&#10;                    self.update_monitored_epics()&#10;                    # Check each monitored EPIC&#10;                    sync_tasks = []&#10;&#10;                    for epic_id in list(self.monitored_epics.keys()):&#10;                        try:&#10;                            epic_state = self.monitored_epics[epic_id]&#10;&#10;                            # Skip if too many consecutive errors&#10;                            if epic_state.consecutive_errors &gt;= 5:&#10;                                self.logger.warning(f&quot;Skipping EPIC {epic_id} due to consecutive errors&quot;)&#10;                                continue&#10;&#10;                            # Check for changes&#10;                            if self._check_epic_changes(epic_id):&#10;                                if self.config.auto_sync:&#10;                                    # Schedule sync&#10;                                    if not asyncio.get_event_loop().is_closed():&#10;                                        future = asyncio.get_event_loop().run_in_executor(&#10;                                            self.executor, self._sync_epic, epic_id&#10;                                        )&#10;                                        sync_tasks.append((epic_id, future))&#10;                                    else:&#10;                                        self.logger.warning(&quot;Event loop is closed, skipping scheduling new tasks.&quot;)&#10;                                else:&#10;                                    self.logger.info(f&quot;Changes detected in EPIC {epic_id}, but auto-sync is disabled&quot;)&#10;&#10;                            # Update last check time&#10;                            epic_state.last_check = datetime.now()&#10;&#10;                        except Exception as e:&#10;                            self.logger.error(f&quot;Error processing EPIC {epic_id}: {e}&quot;)&#10;                            import traceback&#10;                            self.logger.error(traceback.format_exc())&#10;&#10;                    # Wait for sync tasks to complete&#10;                    if sync_tasks:&#10;                        self.logger.info(f&quot;Running {len(sync_tasks)} synchronization tasks&quot;)&#10;                        for epic_id, future in sync_tasks:&#10;                            try:&#10;                                await future&#10;                            except Exception as e:&#10;                                self.logger.error(f&quot;Sync task failed for EPIC {epic_id}: {e}&quot;)&#10;                                import traceback&#10;                                self.logger.error(traceback.format_exc())&#10;&#10;                    # Wait before next polling cycle&#10;                    self.logger.debug(f&quot;Monitoring cycle complete, sleeping for {self.config.poll_interval_seconds} seconds&quot;)&#10;                    await asyncio.sleep(self.config.poll_interval_seconds)&#10;&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Error in monitoring loop: {e}&quot;)&#10;                    import traceback&#10;                    self.logger.error(traceback.format_exc())&#10;                    await asyncio.sleep(60)  # Wait a minute before retrying&#10;        finally:&#10;            self.logger.info(&quot;Shutting down executor and cleaning up.&quot;)&#10;            self.executor.shutdown(wait=True)&#10;            self.logger.info(&quot;Monitor loop exited cleanly.&quot;)&#10;&#10;    def fetch_all_epic_ids(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Fetch all Epic IDs from Azure DevOps (filtered by work item type 'Epic').&quot;&quot;&quot;&#10;        try:&#10;            requirements = self.agent.ado_client.get_requirements(work_item_type=&quot;Epic&quot;)&#10;            return [str(req.id) for req in requirements]&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to fetch all Epics: {e}&quot;)&#10;            return []&#10;&#10;    def update_monitored_epics(self):&#10;        &quot;&quot;&quot;Update the monitored Epics set by auto-detecting new Epics.&quot;&quot;&quot;&#10;        all_epic_ids = set(self.fetch_all_epic_ids())&#10;        current_epic_ids = set(self.monitored_epics.keys())&#10;        new_epics = all_epic_ids - current_epic_ids&#10;        for epic_id in new_epics:&#10;            self.logger.info(f&quot;Auto-detect: Adding new Epic {epic_id} to monitoring.&quot;)&#10;            added_successfully = self.add_epic(epic_id)&#10;            &#10;            # Only extract stories if this epic hasn't been processed before&#10;            if added_successfully and self.config.auto_extract_new_epics and epic_id not in self.processed_epics:&#10;                self.logger.info(f&quot;Auto-extraction enabled: Extracting stories for new Epic {epic_id}.&quot;)&#10;                try:&#10;                    extraction_result = self.agent.synchronize_epic(epic_id)&#10;                    if extraction_result.sync_successful:&#10;                        # Mark epic as processed&#10;                        self.processed_epics.add(epic_id)&#10;                        self.monitored_epics[epic_id].stories_extracted = True&#10;                        self._save_processed_epics()&#10;                        &#10;                        self.logger.info(f&quot;Successfully extracted and synchronized {len(extraction_result.created_stories)} stories for new Epic {epic_id}.&quot;)&#10;                        self.logger.info(f&quot;  Story IDs: {extraction_result.created_stories}&quot;)&#10;                    else:&#10;                        self.logger.error(f&quot;Failed to extract and synchronize stories for new Epic {epic_id}: {extraction_result.error_message}&quot;)&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Exception during extraction for new Epic {epic_id}: {e}&quot;)&#10;            elif added_successfully and epic_id in self.processed_epics:&#10;                self.logger.info(f&quot;Epic {epic_id} has already been processed. Skipping story extraction.&quot;)&#10;            elif added_successfully:&#10;                self.logger.info(f&quot;Auto-extraction disabled: Skipping story extraction for new Epic {epic_id}. Only monitoring for changes.&quot;)&#10;        # Optionally, remove Epics that no longer exist in ADO&#10;        # removed_epics = current_epic_ids - all_epic_ids&#10;        # for epic_id in removed_epics:&#10;        #     self.logger.info(f&quot;Auto-detect: Removing Epic {epic_id} (no longer exists in ADO).&quot;)&#10;        #     self.monitored_epics.pop(epic_id, None)&#10;&#10;    def start(self):&#10;        &quot;&quot;&quot;Start the monitoring service&quot;&quot;&quot;&#10;        if self.is_running:&#10;            self.logger.warning(&quot;Monitor is already running&quot;)&#10;            return&#10;        &#10;        self.is_running = True&#10;        self.logger.info(&quot;Starting EPIC Change Monitor&quot;)&#10;        self.logger.info(f&quot;Monitoring {len(self.monitored_epics)} EPICs&quot;)&#10;        self.logger.info(f&quot;Poll interval: {self.config.poll_interval_seconds} seconds&quot;)&#10;        self.logger.info(f&quot;Auto-sync enabled: {self.config.auto_sync}&quot;)&#10;        self.logger.info(f&quot;Auto-extract new epics: {self.config.auto_extract_new_epics}&quot;)&#10;&#10;        import signal&#10;        import threading&#10;        class GracefulExit(SystemExit):&#10;            pass&#10;        def _shutdown_handler(signum, frame):&#10;            self.logger.info(f&quot;Received shutdown signal ({signum}), shutting down gracefully...&quot;)&#10;            raise GracefulExit()&#10;&#10;        # Only set up signal handlers in the main thread&#10;        if threading.current_thread() is threading.main_thread():&#10;            signal.signal(signal.SIGINT, _shutdown_handler)&#10;            signal.signal(signal.SIGTERM, _shutdown_handler)&#10;        else:&#10;            self.logger.info(&quot;Not in main thread, skipping signal handler setup&quot;)&#10;&#10;        # Run the monitoring loop&#10;        try:&#10;            asyncio.run(self._monitor_loop())&#10;        except GracefulExit:&#10;            self.logger.info(&quot;Graceful shutdown requested from signal handler.&quot;)&#10;        except KeyboardInterrupt:&#10;            self.logger.info(&quot;Received interrupt signal&quot;)&#10;        finally:&#10;            self.stop()&#10;&#10;    def stop(self):&#10;        &quot;&quot;&quot;Stop the monitoring service&quot;&quot;&quot;&#10;        if not self.is_running:&#10;            return&#10;&#10;        # Capture snapshots before stopping&#10;        self.logger.info(&quot;Saving snapshots before shutdown&quot;)&#10;        for epic_id, state in self.monitored_epics.items():&#10;            if state.last_snapshot:&#10;                self._save_snapshot(epic_id, state.last_snapshot)&#10;&#10;        # Save processed epics state&#10;        self._save_processed_epics()&#10;&#10;        self.logger.info(&quot;Stopping EPIC Change Monitor&quot;)&#10;        self.is_running = False&#10;        self.executor.shutdown(wait=True)&#10;        self.logger.info(&quot;EPIC Change Monitor stopped&quot;)&#10;    &#10;    def _signal_handler(self, signum, frame):&#10;        &quot;&quot;&quot;Handle shutdown signals&quot;&quot;&quot;&#10;        self.logger.info(f&quot;Received signal {signum}, shutting down gracefully...&quot;)&#10;        self.stop()&#10;        sys.exit(0)&#10;    &#10;    def get_status(self) -&gt; Dict:&#10;        &quot;&quot;&quot;Get current monitoring status&quot;&quot;&quot;&#10;        status = {&#10;            'is_running': self.is_running,&#10;            'config': asdict(self.config),&#10;            'monitored_epics': {},&#10;            'last_update': datetime.now().isoformat()&#10;        }&#10;        &#10;        for epic_id, state in self.monitored_epics.items():&#10;            status['monitored_epics'][epic_id] = {&#10;                'last_check': state.last_check.isoformat(),&#10;                'consecutive_errors': state.consecutive_errors,&#10;                'has_snapshot': state.last_snapshot is not None,&#10;                'last_sync_result': state.last_sync_result&#10;            }&#10;        &#10;        return status&#10;    &#10;    def force_check(self, epic_id: Optional[str] = None) -&gt; Dict:&#10;        &quot;&quot;&quot;Force a check for changes (optionally for specific EPIC)&quot;&quot;&quot;&#10;        results = {}&#10;        &#10;        epics_to_check = [epic_id] if epic_id else list(self.monitored_epics.keys())&#10;        &#10;        for eid in epics_to_check:&#10;            if eid in self.monitored_epics:&#10;                try:&#10;                    has_changes = self._check_epic_changes(eid)&#10;                    results[eid] = {&#10;                        'has_changes': has_changes,&#10;                        'check_time': datetime.now().isoformat()&#10;                    }&#10;                    &#10;                    if has_changes and self.config.auto_sync:&#10;                        sync_result = self._sync_epic(eid)&#10;                        results[eid]['sync_result'] = {&#10;                            'success': sync_result.sync_successful,&#10;                            'created_stories': sync_result.created_stories,&#10;                            'updated_stories': sync_result.updated_stories,&#10;                            'error_message': sync_result.error_message&#10;                        }&#10;                except Exception as e:&#10;                    results[eid] = {&#10;                        'error': str(e),&#10;                        'check_time': datetime.now().isoformat()&#10;                    }&#10;        &#10;        return results&#10;&#10;&#10;def load_config_from_file(config_file: str) -&gt; MonitorConfig:&#10;    &quot;&quot;&quot;Load monitor configuration from JSON file&quot;&quot;&quot;&#10;    try:&#10;        with open(config_file, 'r') as f:&#10;            config_data = json.load(f)&#10;        return MonitorConfig(**config_data)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to load config from {config_file}: {e}&quot;)&#10;        return MonitorConfig()&#10;&#10;&#10;def create_default_config(config_file: str = &quot;monitor_config.json&quot;):&#10;    &quot;&quot;&quot;Create a default configuration file&quot;&quot;&quot;&#10;    default_config = MonitorConfig(&#10;        poll_interval_seconds=300,  # 5 minutes&#10;        max_concurrent_syncs=3,&#10;        snapshot_directory=&quot;snapshots&quot;,&#10;        log_level=&quot;INFO&quot;,&#10;        epic_ids=[&quot;12345&quot;, &quot;67890&quot;],  # Example EPIC IDs&#10;        auto_sync=True,&#10;        retry_attempts=3,&#10;        retry_delay_seconds=60&#10;    )&#10;    &#10;    with open(config_file, 'w') as f:&#10;        json.dump(asdict(default_config), f, indent=2)&#10;    &#10;    print(f&quot;Created default configuration file: {config_file}&quot;)&#10;    return default_config&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Background monitoring service for EPIC change detection and automatic synchronization.&#10;&quot;&quot;&quot;&#10;&#10;import asyncio&#10;import json&#10;import logging&#10;import os&#10;import sys&#10;import time&#10;from datetime import datetime&#10;from pathlib import Path&#10;from typing import Dict, List, Optional, Set, ClassVar&#10;from dataclasses import dataclass, asdict&#10;from concurrent.futures import ThreadPoolExecutor&#10;&#10;from src.agent import StoryExtractionAgent&#10;from src.models import EpicSyncResult&#10;&#10;&#10;@dataclass&#10;class MonitorConfig:&#10;    &quot;&quot;&quot;Configuration for the EPIC monitor&quot;&quot;&quot;&#10;    OPENAI_RETRY_DELAY: ClassVar[int] = int(os.getenv('OPENAI_RETRY_DELAY', 5))&#10;    poll_interval_seconds: int = 300  # 5 minutes default&#10;    max_concurrent_syncs: int = 3&#10;    snapshot_directory: str = &quot;snapshots&quot;&#10;    log_level: str = &quot;INFO&quot;&#10;    epic_ids: List[str] = None&#10;    auto_sync: bool = True&#10;    auto_extract_new_epics: bool = True  # New option to control story extraction for new epics&#10;    notification_webhook: Optional[str] = None&#10;    retry_attempts: int = 3&#10;    retry_delay_seconds: int = 60&#10;    # New configuration options for work item types&#10;    story_extraction_type: str = &quot;User Story&quot;  # Can be &quot;User Story&quot; or &quot;Task&quot;&#10;    test_case_extraction_type: str = &quot;Issue&quot;   # Can be &quot;Issue&quot; or &quot;Test Case&quot;&#10;    skip_duplicate_check: bool = False  # Option to skip duplicate checking&#10;&#10;&#10;@dataclass&#10;class EpicMonitorState:&#10;    &quot;&quot;&quot;State tracking for a monitored EPIC&quot;&quot;&quot;&#10;    epic_id: str&#10;    last_check: datetime&#10;    last_snapshot: Optional[Dict] = None&#10;    consecutive_errors: int = 0&#10;    last_sync_result: Optional[Dict] = None&#10;    stories_extracted: bool = False  # Track if stories have been extracted for this epic&#10;    extracted_stories: List[Dict] = None  # List of extracted stories for duplicate prevention&#10;&#10;&#10;class EpicChangeMonitor:&#10;    &quot;&quot;&quot;Background service that monitors EPICs for changes and triggers synchronization&quot;&quot;&quot;&#10;    &#10;    def __init__(self, config: MonitorConfig):&#10;        self.config = config&#10;        self.agent = StoryExtractionAgent()&#10;        self.logger = self._setup_logger()&#10;        self.is_running = False&#10;        self.monitored_epics: Dict[str, EpicMonitorState] = {}&#10;        self.executor = ThreadPoolExecutor(max_workers=config.max_concurrent_syncs)&#10;        self.snapshot_dir = Path(config.snapshot_directory)&#10;        self.snapshot_dir.mkdir(exist_ok=True)&#10;        # ThreadPoolExecutor for async syncs&#10;        self.snapshot_dir.mkdir(exist_ok=True)&#10;        &#10;        # State file to track which epics have been processed&#10;        self.state_file = Path(&quot;monitor_state.json&quot;)&#10;        self.processed_epics = self._load_processed_epics()&#10;&#10;        # Load existing snapshots&#10;        self._load_existing_snapshots()&#10;    &#10;    def _setup_logger(self) -&gt; logging.Logger:&#10;        &quot;&quot;&quot;Setup logging for the monitor&quot;&quot;&quot;&#10;        logger = logging.getLogger(&quot;EpicChangeMonitor&quot;)&#10;        logger.setLevel(getattr(logging, self.config.log_level.upper()))&#10;        if not logger.handlers:&#10;            # Console handler&#10;            console_handler = logging.StreamHandler()&#10;            console_formatter = logging.Formatter(&#10;                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'&#10;            )&#10;            console_handler.setFormatter(console_formatter)&#10;            logger.addHandler(console_handler)&#10;            # File handler&#10;            log_file = Path(&quot;logs&quot;) / &quot;epic_monitor.log&quot;&#10;            log_file.parent.mkdir(exist_ok=True)&#10;            file_handler = logging.FileHandler(log_file)&#10;            file_handler.setFormatter(console_formatter)&#10;            logger.addHandler(file_handler)&#10;        return logger&#10;    &#10;    def _load_processed_epics(self) -&gt; Set[str]:&#10;        &quot;&quot;&quot;Load the set of epics that have already been processed (had stories extracted)&quot;&quot;&quot;&#10;        try:&#10;            if self.state_file.exists():&#10;                with open(self.state_file, 'r') as f:&#10;                    state_data = json.load(f)&#10;                return set(state_data.get('processed_epics', []))&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to load processed epics state: {e}&quot;)&#10;        return set()&#10;    &#10;    def _save_processed_epics(self):&#10;        &quot;&quot;&quot;Save the set of processed epics to state file&quot;&quot;&quot;&#10;        try:&#10;            state_data = {&#10;                'processed_epics': list(self.processed_epics),&#10;                'last_updated': datetime.now().isoformat()&#10;            }&#10;            with open(self.state_file, 'w') as f:&#10;                json.dump(state_data, f, indent=2)&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to save processed epics state: {e}&quot;)&#10;&#10;    def _load_existing_snapshots(self):&#10;        for epic_id in self.config.epic_ids or []:&#10;            snapshot_file = self.snapshot_dir / f&quot;epic_{epic_id}.json&quot;&#10;            if snapshot_file.exists():&#10;                try:&#10;                    with open(snapshot_file, 'r') as f:&#10;                        snapshot_data = json.load(f)&#10;                    stories = snapshot_data.get('stories', [])&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=snapshot_data,&#10;                        stories_extracted=epic_id in self.processed_epics,&#10;                        extracted_stories=stories&#10;                    )&#10;                    self.logger.info(f&quot;Loaded existing snapshot for EPIC {epic_id}&quot;)&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Failed to load snapshot for EPIC {epic_id}: {e}&quot;)&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        stories_extracted=epic_id in self.processed_epics,&#10;                        extracted_stories=[]&#10;                    )&#10;            else:&#10;                self.monitored_epics[epic_id] = EpicMonitorState(&#10;                    epic_id=epic_id,&#10;                    last_check=datetime.now(),&#10;                    stories_extracted=epic_id in self.processed_epics,&#10;                    extracted_stories=[]&#10;                )&#10;&#10;    def add_epic(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add an EPIC to monitoring and trigger immediate check/sync.&quot;&quot;&quot;&#10;        try:&#10;            if epic_id not in self.monitored_epics:&#10;                # Get initial snapshot&#10;                initial_snapshot = self.agent.get_epic_snapshot(epic_id)&#10;                if initial_snapshot:&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=initial_snapshot,&#10;                        consecutive_errors=0&#10;                    )&#10;                    self._save_snapshot(epic_id, initial_snapshot)&#10;                    self.logger.info(f&quot;Added EPIC {epic_id} to monitoring and will check for changes immediately.&quot;)&#10;                    # Immediately check and sync the new Epic&#10;                    if self._check_epic_changes(epic_id):&#10;                        if self.config.auto_sync:&#10;                            self.logger.info(f&quot;Immediately synchronizing new EPIC {epic_id} after detection.&quot;)&#10;                            self._sync_epic(epic_id)&#10;                    return True&#10;                else:&#10;                    self.monitored_epics[epic_id] = EpicMonitorState(&#10;                        epic_id=epic_id,&#10;                        last_check=datetime.now(),&#10;                        last_snapshot=None,&#10;                        consecutive_errors=1&#10;                    )&#10;                    self.logger.warning(f&quot;Added EPIC {epic_id} to monitoring, but could not fetch initial snapshot. Will retry.&quot;)&#10;                    return False&#10;            else:&#10;                self.logger.warning(f&quot;EPIC {epic_id} is already being monitored&quot;)&#10;                return True&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to add EPIC {epic_id} to monitoring: {e}&quot;)&#10;            return False&#10;    &#10;    def remove_epic(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove an EPIC from monitoring&quot;&quot;&quot;&#10;        if epic_id in self.monitored_epics:&#10;            del self.monitored_epics[epic_id]&#10;            self.logger.info(f&quot;Removed EPIC {epic_id} from monitoring&quot;)&#10;            return True&#10;        return False&#10;    &#10;    def _save_snapshot(self, epic_id: str, snapshot_data: Dict):&#10;        &quot;&quot;&quot;Save snapshot for an epic, including stories&quot;&quot;&quot;&#10;        snapshot_file = self.snapshot_dir / f&quot;epic_{epic_id}.json&quot;&#10;        try:&#10;            with open(snapshot_file, 'w') as f:&#10;                json.dump(snapshot_data, f, indent=2)&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to save snapshot for EPIC {epic_id}: {e}&quot;)&#10;&#10;    def _check_epic_changes(self, epic_id: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if epic already has stories extracted to prevent duplicates&quot;&quot;&quot;&#10;        state = self.monitored_epics.get(epic_id)&#10;        if not state:&#10;            return False&#10;            &#10;        # If stories already extracted and duplicate check is enabled, skip&#10;        if not self.config.skip_duplicate_check and epic_id in self.processed_epics:&#10;            self.logger.info(f&quot;Epic {epic_id} already has stories extracted. Skipping to prevent duplicates.&quot;)&#10;            return False&#10;            &#10;        # Check if epic has existing stories in ADO&#10;        try:&#10;            existing_ado_stories = self.agent.ado_client.get_work_items_by_parent(&#10;                parent_id=int(epic_id), &#10;                work_item_type=self.config.story_extraction_type&#10;            )&#10;            if existing_ado_stories:&#10;                self.logger.info(f&quot;Epic {epic_id} already has {len(existing_ado_stories)} stories in ADO. Marking as processed.&quot;)&#10;                self.processed_epics.add(epic_id)&#10;                state.stories_extracted = True&#10;                self._save_processed_epics()&#10;                return False&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Error checking existing stories for Epic {epic_id}: {e}&quot;)&#10;            &#10;        return True  # Proceed with story extraction&#10;    &#10;    def _sync_epic(self, epic_id: str) -&gt; EpicSyncResult:&#10;        &quot;&quot;&quot;Synchronize an EPIC with retry logic&quot;&quot;&quot;&#10;        epic_state = self.monitored_epics[epic_id]&#10;        &#10;        for attempt in range(self.config.retry_attempts):&#10;            try:&#10;                self.logger.info(f&quot;Synchronizing EPIC {epic_id} (attempt {attempt + 1})&quot;)&#10;                &#10;                result = self.agent.synchronize_epic(&#10;                    epic_id=epic_id,&#10;                    stored_snapshot=epic_state.last_snapshot&#10;                )&#10;                &#10;                if result.sync_successful:&#10;                    # Update snapshot after successful sync&#10;                    new_snapshot = self.agent.get_epic_snapshot(epic_id)&#10;                    if new_snapshot:&#10;                        epic_state.last_snapshot = new_snapshot&#10;                        self._save_snapshot(epic_id, new_snapshot)&#10;                    &#10;                    # Mark epic as processed if stories were created&#10;                    if len(result.created_stories) &gt; 0:&#10;                        self.processed_epics.add(epic_id)&#10;                        epic_state.stories_extracted = True&#10;                        self._save_processed_epics()&#10;                    &#10;                    # Store sync result&#10;                    epic_state.last_sync_result = {&#10;                        'timestamp': datetime.now().isoformat(),&#10;                        'success': True,&#10;                        'created_stories': result.created_stories,&#10;                        'updated_stories': result.updated_stories,&#10;                        'unchanged_stories': result.unchanged_stories&#10;                    }&#10;                    &#10;                    self.logger.info(f&quot;Successfully synchronized EPIC {epic_id}&quot;)&#10;                    self.logger.info(f&quot;  Created: {len(result.created_stories)} stories&quot;)&#10;                    self.logger.info(f&quot;  Updated: {len(result.updated_stories)} stories&quot;)&#10;                    self.logger.info(f&quot;  Unchanged: {len(result.unchanged_stories)} stories&quot;)&#10;                    &#10;                    return result&#10;                else:&#10;                    self.logger.error(f&quot;Sync failed for EPIC {epic_id}: {result.error_message}&quot;)&#10;                    if attempt &lt; self.config.retry_attempts - 1:&#10;                        self.logger.info(f&quot;Retrying in {self.config.retry_delay_seconds} seconds...&quot;)&#10;                        time.sleep(self.config.retry_delay_seconds)&#10;                    &#10;            except Exception as e:&#10;                self.logger.error(f&quot;Exception during sync of EPIC {epic_id}: {e}&quot;)&#10;                if attempt &lt; self.config.retry_attempts - 1:&#10;                    self.logger.info(f&quot;Retrying in {self.config.retry_delay_seconds} seconds...&quot;)&#10;                    time.sleep(self.config.retry_delay_seconds)&#10;        &#10;        # All attempts failed&#10;        epic_state.last_sync_result = {&#10;            'timestamp': datetime.now().isoformat(),&#10;            'success': False,&#10;            'error': f&quot;Failed after {self.config.retry_attempts} attempts&quot;&#10;        }&#10;        &#10;        return EpicSyncResult(&#10;            epic_id=epic_id,&#10;            epic_title=&quot;&quot;,&#10;            sync_successful=False,&#10;            error_message=f&quot;Failed after {self.config.retry_attempts} attempts&quot;&#10;        )&#10;    &#10;    async def _monitor_loop(self):&#10;        &quot;&quot;&quot;Main monitoring loop&quot;&quot;&quot;&#10;        self.logger.info(&quot;Starting EPIC monitoring loop&quot;)&#10;        try:&#10;            while True:&#10;                try:&#10;                    # Auto-detect new Epics at the start of each cycle&#10;                    self.update_monitored_epics()&#10;                    # Check each monitored EPIC&#10;                    sync_tasks = []&#10;&#10;                    for epic_id in list(self.monitored_epics.keys()):&#10;                        try:&#10;                            epic_state = self.monitored_epics[epic_id]&#10;&#10;                            # Skip if too many consecutive errors&#10;                            if epic_state.consecutive_errors &gt;= 5:&#10;                                self.logger.warning(f&quot;Skipping EPIC {epic_id} due to consecutive errors&quot;)&#10;                                continue&#10;&#10;                            # Check for changes&#10;                            if self._check_epic_changes(epic_id):&#10;                                if self.config.auto_sync:&#10;                                    # Schedule sync&#10;                                    if not asyncio.get_event_loop().is_closed():&#10;                                        future = asyncio.get_event_loop().run_in_executor(&#10;                                            self.executor, self._sync_epic, epic_id&#10;                                        )&#10;                                        sync_tasks.append((epic_id, future))&#10;                                    else:&#10;                                        self.logger.warning(&quot;Event loop is closed, skipping scheduling new tasks.&quot;)&#10;                                else:&#10;                                    self.logger.info(f&quot;Changes detected in EPIC {epic_id}, but auto-sync is disabled&quot;)&#10;&#10;                            # Update last check time&#10;                            epic_state.last_check = datetime.now()&#10;&#10;                        except Exception as e:&#10;                            self.logger.error(f&quot;Error processing EPIC {epic_id}: {e}&quot;)&#10;                            import traceback&#10;                            self.logger.error(traceback.format_exc())&#10;&#10;                    # Wait for sync tasks to complete&#10;                    if sync_tasks:&#10;                        self.logger.info(f&quot;Running {len(sync_tasks)} synchronization tasks&quot;)&#10;                        for epic_id, future in sync_tasks:&#10;                            try:&#10;                                await future&#10;                            except Exception as e:&#10;                                self.logger.error(f&quot;Sync task failed for EPIC {epic_id}: {e}&quot;)&#10;                                import traceback&#10;                                self.logger.error(traceback.format_exc())&#10;&#10;                    # Wait before next polling cycle&#10;                    self.logger.debug(f&quot;Monitoring cycle complete, sleeping for {self.config.poll_interval_seconds} seconds&quot;)&#10;                    await asyncio.sleep(self.config.poll_interval_seconds)&#10;&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Error in monitoring loop: {e}&quot;)&#10;                    import traceback&#10;                    self.logger.error(traceback.format_exc())&#10;                    await asyncio.sleep(60)  # Wait a minute before retrying&#10;        finally:&#10;            self.logger.info(&quot;Shutting down executor and cleaning up.&quot;)&#10;            self.executor.shutdown(wait=True)&#10;            self.logger.info(&quot;Monitor loop exited cleanly.&quot;)&#10;&#10;    def fetch_all_epic_ids(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Fetch all Epic IDs from Azure DevOps (filtered by work item type 'Epic').&quot;&quot;&quot;&#10;        try:&#10;            requirements = self.agent.ado_client.get_requirements(work_item_type=&quot;Epic&quot;)&#10;            return [str(req.id) for req in requirements]&#10;        except Exception as e:&#10;            self.logger.error(f&quot;Failed to fetch all Epics: {e}&quot;)&#10;            return []&#10;&#10;    def update_monitored_epics(self):&#10;        &quot;&quot;&quot;Update the monitored Epics set by auto-detecting new Epics.&quot;&quot;&quot;&#10;        all_epic_ids = set(self.fetch_all_epic_ids())&#10;        current_epic_ids = set(self.monitored_epics.keys())&#10;        new_epics = all_epic_ids - current_epic_ids&#10;        for epic_id in new_epics:&#10;            self.logger.info(f&quot;Auto-detect: Adding new Epic {epic_id} to monitoring.&quot;)&#10;            added_successfully = self.add_epic(epic_id)&#10;            &#10;            # Only extract stories if this epic hasn't been processed before&#10;            if added_successfully and self.config.auto_extract_new_epics and epic_id not in self.processed_epics:&#10;                self.logger.info(f&quot;Auto-extraction enabled: Extracting stories for new Epic {epic_id}.&quot;)&#10;                try:&#10;                    extraction_result = self.agent.synchronize_epic(epic_id)&#10;                    if extraction_result.sync_successful:&#10;                        # Mark epic as processed&#10;                        self.processed_epics.add(epic_id)&#10;                        self.monitored_epics[epic_id].stories_extracted = True&#10;                        self._save_processed_epics()&#10;                        &#10;                        self.logger.info(f&quot;Successfully extracted and synchronized {len(extraction_result.created_stories)} stories for new Epic {epic_id}.&quot;)&#10;                        self.logger.info(f&quot;  Story IDs: {extraction_result.created_stories}&quot;)&#10;                    else:&#10;                        self.logger.error(f&quot;Failed to extract and synchronize stories for new Epic {epic_id}: {extraction_result.error_message}&quot;)&#10;                except Exception as e:&#10;                    self.logger.error(f&quot;Exception during extraction for new Epic {epic_id}: {e}&quot;)&#10;            elif added_successfully and epic_id in self.processed_epics:&#10;                self.logger.info(f&quot;Epic {epic_id} has already been processed. Skipping story extraction.&quot;)&#10;            elif added_successfully:&#10;                self.logger.info(f&quot;Auto-extraction disabled: Skipping story extraction for new Epic {epic_id}. Only monitoring for changes.&quot;)&#10;        # Optionally, remove Epics that no longer exist in ADO&#10;        # removed_epics = current_epic_ids - all_epic_ids&#10;        # for epic_id in removed_epics:&#10;        #     self.logger.info(f&quot;Auto-detect: Removing Epic {epic_id} (no longer exists in ADO).&quot;)&#10;        #     self.monitored_epics.pop(epic_id, None)&#10;&#10;    def start(self):&#10;        &quot;&quot;&quot;Start the monitoring service&quot;&quot;&quot;&#10;        if self.is_running:&#10;            self.logger.warning(&quot;Monitor is already running&quot;)&#10;            return&#10;        &#10;        self.is_running = True&#10;        self.logger.info(&quot;Starting EPIC Change Monitor&quot;)&#10;        self.logger.info(f&quot;Monitoring {len(self.monitored_epics)} EPICs&quot;)&#10;        self.logger.info(f&quot;Poll interval: {self.config.poll_interval_seconds} seconds&quot;)&#10;        self.logger.info(f&quot;Auto-sync enabled: {self.config.auto_sync}&quot;)&#10;        self.logger.info(f&quot;Auto-extract new epics: {self.config.auto_extract_new_epics}&quot;)&#10;&#10;        import signal&#10;        import threading&#10;        class GracefulExit(SystemExit):&#10;            pass&#10;        def _shutdown_handler(signum, frame):&#10;            self.logger.info(f&quot;Received shutdown signal ({signum}), shutting down gracefully...&quot;)&#10;            raise GracefulExit()&#10;&#10;        # Only set up signal handlers in the main thread&#10;        if threading.current_thread() is threading.main_thread():&#10;            signal.signal(signal.SIGINT, _shutdown_handler)&#10;            signal.signal(signal.SIGTERM, _shutdown_handler)&#10;        else:&#10;            self.logger.info(&quot;Not in main thread, skipping signal handler setup&quot;)&#10;&#10;        # Run the monitoring loop&#10;        try:&#10;            asyncio.run(self._monitor_loop())&#10;        except GracefulExit:&#10;            self.logger.info(&quot;Graceful shutdown requested from signal handler.&quot;)&#10;        except KeyboardInterrupt:&#10;            self.logger.info(&quot;Received interrupt signal&quot;)&#10;        finally:&#10;            self.stop()&#10;&#10;    def stop(self):&#10;        &quot;&quot;&quot;Stop the monitoring service&quot;&quot;&quot;&#10;        if not self.is_running:&#10;            return&#10;&#10;        # Capture snapshots before stopping&#10;        self.logger.info(&quot;Saving snapshots before shutdown&quot;)&#10;        for epic_id, state in self.monitored_epics.items():&#10;            if state.last_snapshot:&#10;                self._save_snapshot(epic_id, state.last_snapshot)&#10;&#10;        # Save processed epics state&#10;        self._save_processed_epics()&#10;&#10;        self.logger.info(&quot;Stopping EPIC Change Monitor&quot;)&#10;        self.is_running = False&#10;        self.executor.shutdown(wait=True)&#10;        self.logger.info(&quot;EPIC Change Monitor stopped&quot;)&#10;    &#10;    def _signal_handler(self, signum, frame):&#10;        &quot;&quot;&quot;Handle shutdown signals&quot;&quot;&quot;&#10;        self.logger.info(f&quot;Received signal {signum}, shutting down gracefully...&quot;)&#10;        self.stop()&#10;        sys.exit(0)&#10;    &#10;    def get_status(self) -&gt; Dict:&#10;        &quot;&quot;&quot;Get current monitoring status&quot;&quot;&quot;&#10;        status = {&#10;            'is_running': self.is_running,&#10;            'config': asdict(self.config),&#10;            'monitored_epics': {},&#10;            'last_update': datetime.now().isoformat()&#10;        }&#10;        &#10;        for epic_id, state in self.monitored_epics.items():&#10;            status['monitored_epics'][epic_id] = {&#10;                'last_check': state.last_check.isoformat(),&#10;                'consecutive_errors': state.consecutive_errors,&#10;                'has_snapshot': state.last_snapshot is not None,&#10;                'last_sync_result': state.last_sync_result&#10;            }&#10;        &#10;        return status&#10;    &#10;    def force_check(self, epic_id: Optional[str] = None) -&gt; Dict:&#10;        &quot;&quot;&quot;Force a check for changes (optionally for specific EPIC)&quot;&quot;&quot;&#10;        results = {}&#10;        &#10;        epics_to_check = [epic_id] if epic_id else list(self.monitored_epics.keys())&#10;        &#10;        for eid in epics_to_check:&#10;            if eid in self.monitored_epics:&#10;                try:&#10;                    has_changes = self._check_epic_changes(eid)&#10;                    results[eid] = {&#10;                        'has_changes': has_changes,&#10;                        'check_time': datetime.now().isoformat()&#10;                    }&#10;                    &#10;                    if has_changes and self.config.auto_sync:&#10;                        sync_result = self._sync_epic(eid)&#10;                        results[eid]['sync_result'] = {&#10;                            'success': sync_result.sync_successful,&#10;                            'created_stories': sync_result.created_stories,&#10;                            'updated_stories': sync_result.updated_stories,&#10;                            'error_message': sync_result.error_message&#10;                        }&#10;                except Exception as e:&#10;                    results[eid] = {&#10;                        'error': str(e),&#10;                        'check_time': datetime.now().isoformat()&#10;                    }&#10;        &#10;        return results&#10;&#10;&#10;def load_config_from_file(config_file: str) -&gt; MonitorConfig:&#10;    &quot;&quot;&quot;Load monitor configuration from JSON file&quot;&quot;&quot;&#10;    try:&#10;        with open(config_file, 'r') as f:&#10;            config_data = json.load(f)&#10;        return MonitorConfig(**config_data)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to load config from {config_file}: {e}&quot;)&#10;        return MonitorConfig()&#10;&#10;&#10;def create_default_config(config_file: str = &quot;monitor_config.json&quot;):&#10;    &quot;&quot;&quot;Create a default configuration file&quot;&quot;&quot;&#10;    default_config = MonitorConfig(&#10;        poll_interval_seconds=300,  # 5 minutes&#10;        max_concurrent_syncs=3,&#10;        snapshot_directory=&quot;snapshots&quot;,&#10;        log_level=&quot;INFO&quot;,&#10;        epic_ids=[&quot;12345&quot;, &quot;67890&quot;],  # Example EPIC IDs&#10;        auto_sync=True,&#10;        retry_attempts=3,&#10;        retry_delay_seconds=60&#10;    )&#10;    &#10;    with open(config_file, 'w') as f:&#10;        json.dump(asdict(default_config), f, indent=2)&#10;    &#10;    print(f&quot;Created default configuration file: {config_file}&quot;)&#10;    return default_config" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/monitor_api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/monitor_api.py" />
              <option name="originalContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;REST API interface for controlling the EPIC monitoring service.&#10;&quot;&quot;&quot;&#10;&#10;import json&#10;import threading&#10;from datetime import datetime&#10;from flask import Flask, request, jsonify, render_template&#10;from typing import Optional&#10;&#10;from src.monitor import EpicChangeMonitor, MonitorConfig, load_config_from_file, create_default_config&#10;from src.agent import StoryExtractionAgent&#10;&#10;&#10;class MonitorAPI:&#10;    &quot;&quot;&quot;REST API wrapper for the EPIC monitor&quot;&quot;&quot;&#10;    &#10;    def __init__(self, config: MonitorConfig):&#10;        self.app = Flask(__name__, &#10;                        template_folder='../templates',&#10;                        static_folder='../static')&#10;        self.monitor: Optional[EpicChangeMonitor] = None&#10;        self.monitor_thread: Optional[threading.Thread] = None&#10;        self.config = config&#10;        self.agent = StoryExtractionAgent()  # Add agent for test case extraction&#10;        &#10;        # Setup routes&#10;        self._setup_routes()&#10;    &#10;    def _setup_routes(self):&#10;        &quot;&quot;&quot;Setup Flask routes&quot;&quot;&quot;&#10;        &#10;        @self.app.route('/api/status', methods=['GET'])&#10;        def get_status():&#10;            &quot;&quot;&quot;Get monitoring status&quot;&quot;&quot;&#10;            if self.monitor:&#10;                status = self.monitor.get_status()&#10;                return jsonify(status)&#10;            else:&#10;                return jsonify({&#10;                    'is_running': False,&#10;                    'message': 'Monitor not initialized'&#10;                })&#10;        &#10;        @self.app.route('/api/start', methods=['POST'])&#10;        def start_monitor():&#10;            &quot;&quot;&quot;Start the monitoring service&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor and self.monitor.is_running:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor is already running'&#10;                    }), 400&#10;                &#10;                # Initialize monitor if not exists&#10;                if not self.monitor:&#10;                    self.monitor = EpicChangeMonitor(self.config)&#10;                &#10;                # Start in background thread&#10;                self.monitor_thread = threading.Thread(target=self.monitor.start)&#10;                self.monitor_thread.daemon = True&#10;                self.monitor_thread.start()&#10;                &#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': 'Monitor started successfully'&#10;                })&#10;                &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/stop', methods=['POST'])&#10;        def stop_monitor():&#10;            &quot;&quot;&quot;Stop the monitoring service&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor:&#10;                    self.monitor.stop()&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'message': 'Monitor stopped successfully'&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor is not running'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/epics', methods=['GET'])&#10;        def list_epics():&#10;            &quot;&quot;&quot;List monitored EPICs&quot;&quot;&quot;&#10;            if self.monitor:&#10;                status = self.monitor.get_status()&#10;                return jsonify({&#10;                    'epics': list(status['monitored_epics'].keys()),&#10;                    'details': status['monitored_epics']&#10;                })&#10;            else:&#10;                return jsonify({&#10;                    'epics': [],&#10;                    'message': 'Monitor not initialized'&#10;                })&#10;        &#10;        @self.app.route('/api/epics/&lt;epic_id&gt;', methods=['POST'])&#10;        def add_epic(epic_id):&#10;            &quot;&quot;&quot;Add an EPIC to monitoring&quot;&quot;&quot;&#10;            try:&#10;                if not self.monitor:&#10;                    self.monitor = EpicChangeMonitor(self.config)&#10;                &#10;                success = self.monitor.add_epic(epic_id)&#10;                if success:&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'message': f'EPIC {epic_id} added to monitoring'&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': f'Failed to add EPIC {epic_id}'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/epics/&lt;epic_id&gt;', methods=['DELETE'])&#10;        def remove_epic(epic_id):&#10;            &quot;&quot;&quot;Remove an EPIC from monitoring&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor:&#10;                    success = self.monitor.remove_epic(epic_id)&#10;                    if success:&#10;                        return jsonify({&#10;                            'success': True,&#10;                            'message': f'EPIC {epic_id} removed from monitoring'&#10;                        })&#10;                    else:&#10;                        return jsonify({&#10;                            'success': False,&#10;                            'message': f'EPIC {epic_id} not found'&#10;                        }), 404&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor not initialized'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/config', methods=['GET'])&#10;        def get_config():&#10;            &quot;&quot;&quot;Get current configuration&quot;&quot;&quot;&#10;            try:&#10;                from config.settings import Settings&#10;                return jsonify({&#10;                    'config': {&#10;                        'poll_interval_seconds': self.config.poll_interval_seconds,&#10;                        'auto_sync': self.config.auto_sync,&#10;                        'auto_extract_new_epics': self.config.auto_extract_new_epics,&#10;                        'story_extraction_type': self.config.story_extraction_type,&#10;                        'test_case_extraction_type': self.config.test_case_extraction_type,&#10;                        'skip_duplicate_check': self.config.skip_duplicate_check,&#10;                        'retry_attempts': self.config.retry_attempts,&#10;                        'retry_delay_seconds': self.config.retry_delay_seconds,&#10;                        'log_level': self.config.log_level&#10;                    },&#10;                    'available_types': Settings.get_available_work_item_types()&#10;                })&#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/config', methods=['POST'])&#10;        def update_config():&#10;            &quot;&quot;&quot;Update configuration&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json()&#10;                &#10;                # Update configuration&#10;                if 'poll_interval_seconds' in data:&#10;                    self.config.poll_interval_seconds = int(data['poll_interval_seconds'])&#10;                if 'auto_sync' in data:&#10;                    self.config.auto_sync = bool(data['auto_sync'])&#10;                if 'auto_extract_new_epics' in data:&#10;                    self.config.auto_extract_new_epics = bool(data['auto_extract_new_epics'])&#10;                if 'story_extraction_type' in data:&#10;                    self.config.story_extraction_type = data['story_extraction_type']&#10;                if 'test_case_extraction_type' in data:&#10;                    self.config.test_case_extraction_type = data['test_case_extraction_type']&#10;                if 'skip_duplicate_check' in data:&#10;                    self.config.skip_duplicate_check = bool(data['skip_duplicate_check'])&#10;                if 'retry_attempts' in data:&#10;                    self.config.retry_attempts = int(data['retry_attempts'])&#10;                if 'retry_delay_seconds' in data:&#10;                    self.config.retry_delay_seconds = int(data['retry_delay_seconds'])&#10;                if 'log_level' in data:&#10;                    self.config.log_level = data['log_level']&#10;&#10;                # Save updated config&#10;                config_data = {&#10;                    'poll_interval_seconds': self.config.poll_interval_seconds,&#10;                    'auto_sync': self.config.auto_sync,&#10;                    'auto_extract_new_epics': self.config.auto_extract_new_epics,&#10;                    'story_extraction_type': self.config.story_extraction_type,&#10;                    'test_case_extraction_type': self.config.test_case_extraction_type,&#10;                    'skip_duplicate_check': self.config.skip_duplicate_check,&#10;                    'retry_attempts': self.config.retry_attempts,&#10;                    'retry_delay_seconds': self.config.retry_delay_seconds,&#10;                    'log_level': self.config.log_level&#10;                }&#10;&#10;                with open('monitor_config.json', 'w') as f:&#10;                    json.dump(config_data, f, indent=2)&#10;&#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': 'Configuration updated successfully',&#10;                    'config': config_data&#10;                })&#10;                &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/force-check', methods=['POST'])&#10;        def force_check():&#10;            &quot;&quot;&quot;Force check for changes&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json() or {}&#10;                epic_id = data.get('epic_id')&#10;&#10;                if self.monitor:&#10;                    results = self.monitor.force_check(epic_id)&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'results': results&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor not initialized'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/test-cases/extract', methods=['POST'])&#10;        def extract_test_cases():&#10;            &quot;&quot;&quot;Extract test cases for a story&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json()&#10;                if not data or 'story_id' not in data:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'error': 'story_id is required'&#10;                    }), 400&#10;                &#10;                story_id = data['story_id']&#10;                work_item_type = data.get('work_item_type', self.config.test_case_extraction_type)&#10;&#10;                # Extract test cases using the test case extractor&#10;                from src.test_case_extractor import TestCaseExtractor&#10;                extractor = TestCaseExtractor()&#10;&#10;                result = extractor.extract_and_create_test_cases(&#10;                    story_id=story_id,&#10;                    work_item_type=work_item_type&#10;                )&#10;&#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': f'Test cases extracted for story {story_id}',&#10;                    'result': result&#10;                })&#10;&#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/')&#10;        def dashboard():&#10;            &quot;&quot;&quot;Serve the dashboard&quot;&quot;&quot;&#10;            return render_template('dashboard.html')&#10;&#10;    def run(self, host='127.0.0.1', port=5000, debug=False):&#10;        &quot;&quot;&quot;Run the Flask API server&quot;&quot;&quot;&#10;        print(f&quot;Starting Monitor API server on {host}:{port}&quot;)&#10;        self.app.run(host=host, port=port, debug=debug)&#10;&#10;&#10;# Expose Flask app for Flask CLI discovery&#10;config = None&#10;try:&#10;    config = load_config_from_file('monitor_config.json')&#10;except Exception:&#10;    config = create_default_config('monitor_config.json')&#10;app = MonitorAPI(config).app&#10;&#10;&#10;def main():&#10;    &quot;&quot;&quot;Main entry point for the API server&quot;&quot;&quot;&#10;    import argparse&#10;    &#10;    parser = argparse.ArgumentParser(description='EPIC Change Monitor API Server')&#10;    parser.add_argument('--config', default='monitor_config.json', help='Configuration file')&#10;    parser.add_argument('--host', default='127.0.0.1', help='API server host')&#10;    parser.add_argument('--port', type=int, default=5000, help='API server port')&#10;    parser.add_argument('--debug', action='store_true', help='Enable debug mode')&#10;    parser.add_argument('--create-config', action='store_true', help='Create default config file')&#10;    &#10;    args = parser.parse_args()&#10;    &#10;    if args.create_config:&#10;        create_default_config(args.config)&#10;        return&#10;    &#10;    # Load configuration&#10;    try:&#10;        config = load_config_from_file(args.config)&#10;    except:&#10;        print(f&quot;Failed to load config from {args.config}, creating default...&quot;)&#10;        config = create_default_config(args.config)&#10;    &#10;    # Start API server&#10;    api = MonitorAPI(config)&#10;    print(f&quot;Starting EPIC Change Monitor API on {args.host}:{args.port}&quot;)&#10;    print(f&quot;Configuration: {args.config}&quot;)&#10;    print(f&quot;Monitoring {len(config.epic_ids or [])} EPICs&quot;)&#10;    print(f&quot;API Documentation: http://{args.host}:{args.port}/&quot;)&#10;    &#10;    try:&#10;        api.run(host=args.host, port=args.port, debug=args.debug)&#10;    except KeyboardInterrupt:&#10;        print(&quot;\nShutting down API server...&quot;)&#10;        if api.monitor:&#10;            api.monitor.stop()&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;REST API interface for controlling the EPIC monitoring service.&#10;&quot;&quot;&quot;&#10;&#10;import json&#10;import threading&#10;from datetime import datetime&#10;from flask import Flask, request, jsonify, render_template&#10;from typing import Optional&#10;import os&#10;&#10;from src.monitor import EpicChangeMonitor, MonitorConfig, load_config_from_file, create_default_config&#10;from src.agent import StoryExtractionAgent&#10;&#10;&#10;class MonitorAPI:&#10;    &quot;&quot;&quot;REST API wrapper for the EPIC monitor&quot;&quot;&quot;&#10;    &#10;    def __init__(self, config: MonitorConfig):&#10;        self.app = Flask(__name__, &#10;                        template_folder='../templates',&#10;                        static_folder='../static')&#10;        self.monitor: Optional[EpicChangeMonitor] = None&#10;        self.monitor_thread: Optional[threading.Thread] = None&#10;        self.config = config&#10;        self.agent = StoryExtractionAgent()  # Add agent for test case extraction&#10;        &#10;        # Setup routes&#10;        self._setup_routes()&#10;    &#10;    def _setup_routes(self):&#10;        &quot;&quot;&quot;Setup Flask routes&quot;&quot;&quot;&#10;        &#10;        @self.app.route('/api/status', methods=['GET'])&#10;        def get_status():&#10;            &quot;&quot;&quot;Get monitoring status&quot;&quot;&quot;&#10;            if self.monitor:&#10;                status = self.monitor.get_status()&#10;                return jsonify(status)&#10;            else:&#10;                return jsonify({&#10;                    'is_running': False,&#10;                    'message': 'Monitor not initialized'&#10;                })&#10;        &#10;        @self.app.route('/api/start', methods=['POST'])&#10;        def start_monitor():&#10;            &quot;&quot;&quot;Start the monitoring service&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor and self.monitor.is_running:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor is already running'&#10;                    }), 400&#10;                &#10;                # Initialize monitor if not exists&#10;                if not self.monitor:&#10;                    self.monitor = EpicChangeMonitor(self.config)&#10;                &#10;                # Start in background thread&#10;                self.monitor_thread = threading.Thread(target=self.monitor.start)&#10;                self.monitor_thread.daemon = True&#10;                self.monitor_thread.start()&#10;                &#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': 'Monitor started successfully'&#10;                })&#10;                &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/stop', methods=['POST'])&#10;        def stop_monitor():&#10;            &quot;&quot;&quot;Stop the monitoring service&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor:&#10;                    self.monitor.stop()&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'message': 'Monitor stopped successfully'&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor is not running'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/epics', methods=['GET'])&#10;        def list_epics():&#10;            &quot;&quot;&quot;List monitored EPICs&quot;&quot;&quot;&#10;            if self.monitor:&#10;                status = self.monitor.get_status()&#10;                return jsonify({&#10;                    'epics': list(status['monitored_epics'].keys()),&#10;                    'details': status['monitored_epics']&#10;                })&#10;            else:&#10;                return jsonify({&#10;                    'epics': [],&#10;                    'message': 'Monitor not initialized'&#10;                })&#10;        &#10;        @self.app.route('/api/epics/&lt;epic_id&gt;', methods=['POST'])&#10;        def add_epic(epic_id):&#10;            &quot;&quot;&quot;Add an EPIC to monitoring&quot;&quot;&quot;&#10;            try:&#10;                if not self.monitor:&#10;                    self.monitor = EpicChangeMonitor(self.config)&#10;                &#10;                success = self.monitor.add_epic(epic_id)&#10;                if success:&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'message': f'EPIC {epic_id} added to monitoring'&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': f'Failed to add EPIC {epic_id}'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;        &#10;        @self.app.route('/api/epics/&lt;epic_id&gt;', methods=['DELETE'])&#10;        def remove_epic(epic_id):&#10;            &quot;&quot;&quot;Remove an EPIC from monitoring&quot;&quot;&quot;&#10;            try:&#10;                if self.monitor:&#10;                    success = self.monitor.remove_epic(epic_id)&#10;                    if success:&#10;                        return jsonify({&#10;                            'success': True,&#10;                            'message': f'EPIC {epic_id} removed from monitoring'&#10;                        })&#10;                    else:&#10;                        return jsonify({&#10;                            'success': False,&#10;                            'message': f'EPIC {epic_id} not found'&#10;                        }), 404&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor not initialized'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/config', methods=['GET'])&#10;        def get_config():&#10;            &quot;&quot;&quot;Get current configuration&quot;&quot;&quot;&#10;            try:&#10;                from config.settings import Settings&#10;                return jsonify({&#10;                    'config': {&#10;                        'poll_interval_seconds': self.config.poll_interval_seconds,&#10;                        'auto_sync': self.config.auto_sync,&#10;                        'auto_extract_new_epics': self.config.auto_extract_new_epics,&#10;                        'story_extraction_type': self.config.story_extraction_type,&#10;                        'test_case_extraction_type': self.config.test_case_extraction_type,&#10;                        'skip_duplicate_check': self.config.skip_duplicate_check,&#10;                        'retry_attempts': self.config.retry_attempts,&#10;                        'retry_delay_seconds': self.config.retry_delay_seconds,&#10;                        'log_level': self.config.log_level&#10;                    },&#10;                    'available_types': Settings.get_available_work_item_types()&#10;                })&#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/config', methods=['POST'])&#10;        def update_config():&#10;            &quot;&quot;&quot;Update configuration&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json()&#10;                &#10;                # Update configuration&#10;                if 'poll_interval_seconds' in data:&#10;                    self.config.poll_interval_seconds = int(data['poll_interval_seconds'])&#10;                if 'auto_sync' in data:&#10;                    self.config.auto_sync = bool(data['auto_sync'])&#10;                if 'auto_extract_new_epics' in data:&#10;                    self.config.auto_extract_new_epics = bool(data['auto_extract_new_epics'])&#10;                if 'story_extraction_type' in data:&#10;                    self.config.story_extraction_type = data['story_extraction_type']&#10;                if 'test_case_extraction_type' in data:&#10;                    self.config.test_case_extraction_type = data['test_case_extraction_type']&#10;                if 'skip_duplicate_check' in data:&#10;                    self.config.skip_duplicate_check = bool(data['skip_duplicate_check'])&#10;                if 'retry_attempts' in data:&#10;                    self.config.retry_attempts = int(data['retry_attempts'])&#10;                if 'retry_delay_seconds' in data:&#10;                    self.config.retry_delay_seconds = int(data['retry_delay_seconds'])&#10;                if 'log_level' in data:&#10;                    self.config.log_level = data['log_level']&#10;                &#10;                # Save updated config&#10;                config_data = {&#10;                    'poll_interval_seconds': self.config.poll_interval_seconds,&#10;                    'auto_sync': self.config.auto_sync,&#10;                    'auto_extract_new_epics': self.config.auto_extract_new_epics,&#10;                    'story_extraction_type': self.config.story_extraction_type,&#10;                    'test_case_extraction_type': self.config.test_case_extraction_type,&#10;                    'skip_duplicate_check': self.config.skip_duplicate_check,&#10;                    'retry_attempts': self.config.retry_attempts,&#10;                    'retry_delay_seconds': self.config.retry_delay_seconds,&#10;                    'log_level': self.config.log_level&#10;                }&#10;                &#10;                with open('monitor_config.json', 'w') as f:&#10;                    json.dump(config_data, f, indent=2)&#10;                &#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': 'Configuration updated successfully',&#10;                    'config': config_data&#10;                })&#10;                &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/force-check', methods=['POST'])&#10;        def force_check():&#10;            &quot;&quot;&quot;Force check for changes&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json() or {}&#10;                epic_id = data.get('epic_id')&#10;&#10;                if self.monitor:&#10;                    results = self.monitor.force_check(epic_id)&#10;                    return jsonify({&#10;                        'success': True,&#10;                        'results': results&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'message': 'Monitor not initialized'&#10;                    }), 400&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/test-cases/extract', methods=['POST'])&#10;        def extract_test_cases():&#10;            &quot;&quot;&quot;Extract test cases for a story&quot;&quot;&quot;&#10;            try:&#10;                data = request.get_json()&#10;                if not data or 'story_id' not in data:&#10;                    return jsonify({&#10;                        'success': False,&#10;                        'error': 'story_id is required'&#10;                    }), 400&#10;                &#10;                story_id = data['story_id']&#10;                work_item_type = data.get('work_item_type', self.config.test_case_extraction_type)&#10;&#10;                # Extract test cases using the test case extractor&#10;                from src.test_case_extractor import TestCaseExtractor&#10;                extractor = TestCaseExtractor()&#10;&#10;                result = extractor.extract_and_create_test_cases(&#10;                    story_id=story_id,&#10;                    work_item_type=work_item_type&#10;                )&#10;&#10;                return jsonify({&#10;                    'success': True,&#10;                    'message': f'Test cases extracted for story {story_id}',&#10;                    'result': result&#10;                })&#10;&#10;            except Exception as e:&#10;                return jsonify({&#10;                    'success': False,&#10;                    'error': str(e)&#10;                }), 500&#10;&#10;        @self.app.route('/api/logs', methods=['GET'])&#10;        def get_logs():&#10;            &quot;&quot;&quot;Get recent logs&quot;&quot;&quot;&#10;            try:&#10;                lines = int(request.args.get('lines', 50))&#10;                log_file = 'logs/epic_monitor.log'&#10;                &#10;                if os.path.exists(log_file):&#10;                    with open(log_file, 'r') as f:&#10;                        log_lines = f.readlines()&#10;                    &#10;                    # Return the last N lines&#10;                    recent_logs = log_lines[-lines:] if len(log_lines) &gt; lines else log_lines&#10;                    return jsonify({&#10;                        'logs': [line.strip() for line in recent_logs],&#10;                        'total_lines': len(log_lines)&#10;                    })&#10;                else:&#10;                    return jsonify({&#10;                        'logs': [],&#10;                        'total_lines': 0&#10;                    })&#10;                    &#10;            except Exception as e:&#10;                return jsonify({&#10;                    'logs': [f&quot;Error reading logs: {str(e)}&quot;],&#10;                    'total_lines': 0&#10;                })&#10;&#10;        @self.app.route('/')&#10;        def dashboard():&#10;            &quot;&quot;&quot;Serve the dashboard&quot;&quot;&quot;&#10;            return render_template('dashboard.html')&#10;&#10;    def run(self, host='127.0.0.1', port=5000, debug=False):&#10;        &quot;&quot;&quot;Run the Flask API server&quot;&quot;&quot;&#10;        print(f&quot;Starting Monitor API server on {host}:{port}&quot;)&#10;        self.app.run(host=host, port=port, debug=debug)&#10;&#10;&#10;# Expose Flask app for Flask CLI discovery&#10;config = None&#10;try:&#10;    config = load_config_from_file('monitor_config.json')&#10;except Exception:&#10;    config = create_default_config('monitor_config.json')&#10;app = MonitorAPI(config).app&#10;&#10;&#10;def main():&#10;    &quot;&quot;&quot;Main entry point for the API server&quot;&quot;&quot;&#10;    import argparse&#10;    &#10;    parser = argparse.ArgumentParser(description='EPIC Change Monitor API Server')&#10;    parser.add_argument('--config', default='monitor_config.json', help='Configuration file')&#10;    parser.add_argument('--host', default='127.0.0.1', help='API server host')&#10;    parser.add_argument('--port', type=int, default=5000, help='API server port')&#10;    parser.add_argument('--debug', action='store_true', help='Enable debug mode')&#10;    parser.add_argument('--create-config', action='store_true', help='Create default config file')&#10;    &#10;    args = parser.parse_args()&#10;    &#10;    if args.create_config:&#10;        create_default_config(args.config)&#10;        return&#10;    &#10;    # Load configuration&#10;    try:&#10;        config = load_config_from_file(args.config)&#10;    except:&#10;        print(f&quot;Failed to load config from {args.config}, creating default...&quot;)&#10;        config = create_default_config(args.config)&#10;    &#10;    # Start API server&#10;    api = MonitorAPI(config)&#10;    print(f&quot;Starting EPIC Change Monitor API on {args.host}:{args.port}&quot;)&#10;    print(f&quot;Configuration: {args.config}&quot;)&#10;    print(f&quot;Monitoring {len(config.epic_ids or [])} EPICs&quot;)&#10;    print(f&quot;API Documentation: http://{args.host}:{args.port}/&quot;)&#10;    &#10;    try:&#10;        api.run(host=args.host, port=args.port, debug=args.debug)&#10;    except KeyboardInterrupt:&#10;        print(&quot;\nShutting down API server...&quot;)&#10;        if api.monitor:&#10;            api.monitor.stop()&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/dashboard.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/dashboard.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;EPIC Change Monitor Dashboard&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js&quot; defer&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/date-fns@2.29.0/index.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='styles.css') }}&quot;&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            darkMode: 'class',&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'primary': {&#10;                            50: '#eff6ff',&#10;                            500: '#3b82f6',&#10;                            600: '#2563eb',&#10;                            700: '#1d4ed8'&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-gray-50 dark:bg-gray-900 min-h-screen transition-colors duration-300&quot;&gt;&#10;    &lt;div x-data=&quot;dashboardData()&quot; x-init=&quot;init()&quot; :class=&quot;darkMode ? 'dark' : ''&quot; class=&quot;min-h-screen&quot;&gt;&#10;        &lt;!-- Header --&gt;&#10;        &lt;header class=&quot;bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 transition-colors duration-300&quot;&gt;&#10;            &lt;div class=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;div class=&quot;flex justify-between items-center h-16&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-chart-line text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h1 class=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;EPIC Monitor Dashboard&lt;/h1&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;div :class=&quot;monitorStatus.is_running ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'&quot; &#10;                                 class=&quot;px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                                &lt;i :class=&quot;monitorStatus.is_running ? 'fas fa-play' : 'fas fa-stop'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                &lt;span x-text=&quot;monitorStatus.is_running ? 'Running' : 'Stopped'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;button @click=&quot;toggleTheme()&quot; &#10;                                class=&quot;p-2 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-700&quot;&gt;&#10;                            &lt;i :class=&quot;darkMode ? 'fas fa-sun text-yellow-500' : 'fas fa-moon text-gray-600'&quot; &#10;                               class=&quot;text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;refreshData()&quot; &#10;                                class=&quot;p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync-alt&quot; :class=&quot;{'animate-spin': loading}&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Last updated: &lt;span x-text=&quot;lastUpdated&quot;&gt;&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;!-- Main Content --&gt;&#10;        &lt;main class=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;            &lt;!-- Configuration Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Configuration&#10;                    &lt;/h2&gt;&#10;                    &lt;button @click=&quot;showConfigModal = true&quot;&#10;                            class=&quot;flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Config&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-book text-green-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Story Extraction Type&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.story_extraction_type || 'User Story'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-vial text-orange-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Test Case Extraction Type&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.test_case_extraction_type || 'Issue'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync text-blue-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Auto Extract New Epics&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.auto_extract_new_epics ? 'Enabled' : 'Disabled'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shield-alt text-purple-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Duplicate Check&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.skip_duplicate_check ? 'Disabled' : 'Enabled'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-redo text-red-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Retry Attempts&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.retry_attempts || 3&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-clock text-yellow-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Poll Interval&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;(config.poll_interval_seconds || 300) + ' seconds'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-control-panel text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Control Panel&#10;                    &lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;flex flex-wrap gap-4&quot;&gt;&#10;                    &lt;button @click=&quot;startMonitor()&quot; &#10;                            :disabled=&quot;monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-play mr-2&quot;&gt;&lt;/i&gt;&#10;                        Start Monitor&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;stopMonitor()&quot; &#10;                            :disabled=&quot;!monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-stop mr-2&quot;&gt;&lt;/i&gt;&#10;                        Stop Monitor&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;forceCheck()&quot; &#10;                            :disabled=&quot;!monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-sync mr-2&quot;&gt;&lt;/i&gt;&#10;                        Force Check&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;showAddEpicModal = true&quot; &#10;                            class=&quot;flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                        Add EPIC&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Statistics Cards --&gt;&#10;            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8&quot;&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-list text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Total EPICs&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;epics.length&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-check-circle text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Active Monitor&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold&quot; :class=&quot;monitorStatus.is_running ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'&quot; &#10;                               x-text=&quot;monitorStatus.is_running ? 'Yes' : 'No'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-clock text-yellow-600 dark:text-yellow-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Poll Interval&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.poll_interval_seconds + 's'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-cog text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Auto Sync&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold&quot; :class=&quot;config.auto_sync ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'&quot; &#10;                               x-text=&quot;config.auto_sync ? 'On' : 'Off'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Analytics Dashboard --&gt;&#10;            &lt;div class=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8&quot; x-show=&quot;false&quot;&gt;&#10;                &lt;!-- Activity Timeline Chart --&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-line text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            Activity Timeline (24h)&#10;                        &lt;/h3&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;button @click=&quot;refreshAnalytics()&quot; class=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-sync-alt text-sm&quot; :class=&quot;{'animate-spin': loadingAnalytics}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;relative h-64&quot;&gt;&#10;                        &lt;canvas id=&quot;activityChart&quot; class=&quot;w-full h-full&quot;&gt;&lt;/canvas&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- EPIC Status Distribution --&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-pie text-purple-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            EPIC Status Distribution&#10;                        &lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;relative h-64&quot;&gt;&#10;                        &lt;canvas id=&quot;statusChart&quot; class=&quot;w-full h-full&quot;&gt;&lt;/canvas&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Performance Metrics --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-tachometer-alt text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                    Performance Metrics&#10;                &lt;/h3&gt;&#10;                &#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot; x-text=&quot;metrics.avgResponseTime || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Avg Response Time (ms)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot; x-text=&quot;metrics.successRate || '100'&quot;&gt;100&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Success Rate (%)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-yellow-600 dark:text-yellow-400&quot; x-text=&quot;metrics.changesDetected || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Changes Detected (24h)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-purple-600 dark:text-purple-400&quot; x-text=&quot;metrics.totalChecks || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Total Checks (24h)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- EPICs Table --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-table text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Monitored EPICs&#10;                    &lt;/h2&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;toggleTableView()&quot; class=&quot;text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200&quot;&gt;&#10;                            &lt;i :class=&quot;tableView === 'grid' ? 'fas fa-list' : 'fas fa-th'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                            &lt;span x-text=&quot;tableView === 'grid' ? 'List View' : 'Grid View'&quot;&gt;&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input type=&quot;text&quot; &#10;                               x-model=&quot;epicFilter&quot; &#10;                               placeholder=&quot;Filter EPICs...&quot; &#10;                               class=&quot;text-sm px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;!-- Grid View --&gt;&#10;                &lt;div x-show=&quot;tableView === 'grid'&quot; class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                        &lt;template x-for=&quot;epic in filteredEpics&quot; :key=&quot;epic.id&quot;&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4 border border-gray-200 dark:border-gray-600 hover:shadow-md transition-shadow&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;div class=&quot;w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-project-diagram text-white&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;div class=&quot;font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;epic.id&quot;&gt;&lt;/div&gt;&#10;                                            &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;EPIC&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div :class=&quot;epic.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'&quot; &#10;                                         class=&quot;px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                                        &lt;span x-text=&quot;epic.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div class=&quot;space-y-2 text-sm text-gray-600 dark:text-gray-300&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Last Check:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;epic.lastCheck ? getRelativeTime(new Date(epic.lastCheck)) : 'Never'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Changes:&lt;/span&gt;&#10;                                        &lt;span class=&quot;font-medium&quot; x-text=&quot;epic.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Response Time:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;epic.avgResponseTime ? epic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div class=&quot;mt-4 flex items-center justify-between&quot;&gt;&#10;                                    &lt;button @click=&quot;viewEpicDetails(epic.id)&quot; &#10;                                            class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                        View Details&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;removeEpic(epic.id)&quot; &#10;                                            class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm font-medium&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Remove&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;!-- Table View --&gt;&#10;                &lt;div x-show=&quot;tableView === 'table'&quot; class=&quot;overflow-x-auto&quot;&gt;&#10;                    &lt;table class=&quot;min-w-full divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                        &lt;thead class=&quot;bg-gray-50 dark:bg-gray-700&quot;&gt;&#10;                            &lt;tr&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    EPIC ID&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Status&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Last Check&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Changes&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Avg Response&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Actions&#10;                                &lt;/th&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody class=&quot;bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                            &lt;template x-for=&quot;epic in filteredEpics&quot; :key=&quot;epic.id&quot;&gt;&#10;                                &lt;tr class=&quot;hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors&quot;&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;div class=&quot;w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-project-diagram text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div&gt;&#10;                                                &lt;div class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot; x-text=&quot;epic.id&quot;&gt;&lt;/div&gt;&#10;                                                &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;EPIC&lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;span :class=&quot;epic.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'&quot; &#10;                                              class=&quot;px-2 py-1 text-xs font-medium rounded-full&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;epic.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-clock mr-2 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;epic.lastCheck ? getRelativeTime(new Date(epic.lastCheck)) : 'Never'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;span class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot; x-text=&quot;epic.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                            &lt;span class=&quot;text-xs text-gray-500 dark:text-gray-400 ml-1&quot;&gt;detected&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;span x-text=&quot;epic.avgResponseTime ? epic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm font-medium&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                            &lt;button @click=&quot;viewEpicDetails(epic.id)&quot; &#10;                                                    class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                                Details&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;removeEpic(epic.id)&quot; &#10;                                                    class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-trash mr-1&quot;&gt;&lt;/i&gt;&#10;                                                Remove&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                &lt;/tr&gt;&#10;                            &lt;/template&gt;&#10;                            &lt;tr x-show=&quot;filteredEpics.length === 0&quot;&gt;&#10;                                &lt;td colspan=&quot;6&quot; class=&quot;px-6 py-12 text-center&quot;&gt;&#10;                                    &lt;div class=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-inbox text-4xl mb-4&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p class=&quot;text-lg font-medium&quot;&gt;No EPICs found&lt;/p&gt;&#10;                                        &lt;p class=&quot;text-sm&quot; x-text=&quot;epicFilter ? 'Try adjusting your filter' : 'Add an EPIC to start monitoring changes'&quot;&gt;&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/td&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Logs Section --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mt-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-file-alt text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Recent Logs&#10;                    &lt;/h2&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;clearLogs()&quot; &#10;                                :disabled=&quot;loadingLogs&quot;&#10;                                class=&quot;text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors disabled:text-gray-400&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-eye-slash mr-1&quot; :class=&quot;{'animate-spin': loadingLogs}&quot;&gt;&lt;/i&gt;&#10;                            Clear Display&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;refreshLogs()&quot; &#10;                                class=&quot;text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync-alt mr-1&quot; :class=&quot;{'animate-spin': loadingLogs}&quot;&gt;&lt;/i&gt;&#10;                            Refresh&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;bg-gray-900 dark:bg-gray-950 rounded-lg p-4 font-mono text-sm text-gray-100 dark:text-gray-200 h-64 overflow-y-auto border border-gray-700&quot;&gt;&#10;                        &lt;template x-for=&quot;log in logs&quot; :key=&quot;log&quot;&gt;&#10;                            &lt;div x-text=&quot;log&quot; class=&quot;mb-1&quot;&gt;&lt;/div&gt;&#10;                        &lt;/template&gt;&#10;                        &lt;div x-show=&quot;logs.length === 0&quot; class=&quot;text-gray-500 dark:text-gray-400 text-center py-8&quot;&gt;&#10;                            No logs available&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Configuration Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Configuration Settings&#10;                    &lt;/h2&gt;&#10;                    &lt;button @click=&quot;showConfigModal = true&quot; &#10;                            class=&quot;flex items-center px-3 py-1 text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Config&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Poll Interval&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-clock text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.poll_interval_seconds + ' seconds'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Auto Sync&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i :class=&quot;config.auto_sync ? 'fas fa-toggle-on text-green-500 dark:text-green-400' : 'fas fa-toggle-off text-gray-400 dark:text-gray-500'&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold&quot; :class=&quot;config.auto_sync ? 'text-green-600 dark:text-green-400' : 'text-gray-600 dark:text-gray-400'&quot; &#10;                                      x-text=&quot;config.auto_sync ? 'Enabled' : 'Disabled'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Max Concurrent Syncs&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-layer-group text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.max_concurrent_syncs&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Retry Attempts&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-redo text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.retry_attempts&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Retry Delay&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-hourglass-half text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.retry_delay_seconds + ' seconds'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Log Level&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-list-alt text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.log_level || 'INFO'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div class=&quot;mt-6 pt-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Snapshot Directory&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-folder text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-sm text-gray-600 dark:text-gray-300 font-mono bg-gray-50 dark:bg-gray-700 px-2 py-1 rounded&quot; &#10;                                      x-text=&quot;config.snapshot_directory || 'snapshots/'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- Add EPIC Modal --&gt;&#10;        &lt;div x-show=&quot;showAddEpicModal&quot; &#10;             x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;             x-transition:enter-start=&quot;opacity-0&quot;&#10;             x-transition:enter-end=&quot;opacity-100&quot;&#10;             x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;             x-transition:leave-start=&quot;opacity-100&quot;&#10;             x-transition:leave-end=&quot;opacity-0&quot;&#10;             class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;            &lt;div class=&quot;relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div class=&quot;mt-3&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;Add New EPIC&lt;/h3&gt;&#10;                        &lt;button @click=&quot;showAddEpicModal = false&quot; &#10;                                class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;mb-4&quot;&gt;&#10;                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;EPIC ID&lt;/label&gt;&#10;                        &lt;input x-model=&quot;newEpicId&quot; &#10;                               type=&quot;text&quot; &#10;                               placeholder=&quot;Enter EPIC ID...&quot;&#10;                               class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;flex justify-end space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;showAddEpicModal = false&quot; &#10;                                class=&quot;px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 rounded-md hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors&quot;&gt;&#10;                            Cancel&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;addEpic()&quot; &#10;                                :disabled=&quot;!newEpicId.trim() || loading&quot;&#10;                                class=&quot;px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                            Add EPIC&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;            &lt;!-- Configuration Edit Modal --&gt;&#10;            &lt;div x-show=&quot;showConfigModal&quot; &#10;                 x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                 x-transition:enter-start=&quot;opacity-0&quot;&#10;                 x-transition:enter-end=&quot;opacity-100&quot;&#10;                 x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                 x-transition:leave-start=&quot;opacity-100&quot;&#10;                 x-transition:leave-end=&quot;opacity-0&quot;&#10;                 class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;                &lt;div class=&quot;relative top-10 mx-auto p-6 border w-full max-w-3xl shadow-lg rounded-lg bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 m-4&quot;&gt;&#10;                    &lt;div class=&quot;mt-3&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;h3 class=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                Edit Configuration&#10;                            &lt;/h3&gt;&#10;                            &lt;button @click=&quot;showConfigModal = false; resetConfigForm()&quot; &#10;                                    class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-8&quot;&gt;&#10;                            &lt;!-- Work Item Type Configuration --&gt;&#10;                            &lt;div class=&quot;bg-blue-50 dark:bg-blue-900 rounded-lg p-6&quot;&gt;&#10;                                &lt;h4 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-tasks text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                    Work Item Types&#10;                                &lt;/h4&gt;&#10;                                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-book text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                            Story Extraction Type&#10;                                        &lt;/label&gt;&#10;                                        &lt;select x-model=&quot;configForm.story_extraction_type&quot;&#10;                                                class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                            &lt;option value=&quot;User Story&quot;&gt;User Story&lt;/option&gt;&#10;                                            &lt;option value=&quot;Task&quot;&gt;Task&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Work item type for extracted stories&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div&gt;&#10;                                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-vial text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                            Test Case Extraction Type&#10;                                        &lt;/label&gt;&#10;                                        &lt;select x-model=&quot;configForm.test_case_extraction_type&quot;&#10;                                                class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                            &lt;option value=&quot;Issue&quot;&gt;Issue&lt;/option&gt;&#10;                                            &lt;option value=&quot;Test Case&quot;&gt;Test Case&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Work item type for extracted test cases&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Basic Settings --&gt;&#10;                            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-clock text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Poll Interval (seconds)&#10;                                    &lt;/label&gt;&#10;                                    &lt;input x-model=&quot;configForm.poll_interval_seconds&quot; &#10;                                           type=&quot;number&quot; &#10;                                           min=&quot;10&quot; &#10;                                           max=&quot;3600&quot;&#10;                                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;How often to check for changes (10-3600 seconds)&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div&gt;&#10;                                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-redo text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Retry Attempts&#10;                                    &lt;/label&gt;&#10;                                    &lt;input x-model=&quot;configForm.retry_attempts&quot; &#10;                                           type=&quot;number&quot; &#10;                                           min=&quot;1&quot; &#10;                                           max=&quot;10&quot;&#10;                                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Number of retry attempts on failure&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Toggles --&gt;&#10;                            &lt;div class=&quot;space-y-4&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-sync text-blue-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Auto Sync&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Automatically sync changes when detected&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.auto_sync&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-magic text-purple-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Auto Extract New Epics&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Automatically extract stories from newly detected epics&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.auto_extract_new_epics&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-shield-alt text-green-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Skip Duplicate Check&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Skip checking for duplicate stories (may create duplicates)&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.skip_duplicate_check&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Test Case Extraction Section --&gt;&#10;                            &lt;div class=&quot;bg-orange-50 dark:bg-orange-900 rounded-lg p-6&quot;&gt;&#10;                                &lt;h4 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-vial text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                    Test Case Extraction&#10;                                &lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                                        &lt;input x-model=&quot;testStoryId&quot;&#10;                                               type=&quot;text&quot;&#10;                                               placeholder=&quot;Enter Story/Work Item ID...&quot;&#10;                                               class=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                        &lt;button @click=&quot;extractTestCases()&quot;&#10;                                                :disabled=&quot;!testStoryId.trim() || extractingTestCases&quot;&#10;                                                class=&quot;px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                            &lt;i :class=&quot;extractingTestCases ? 'fas fa-spinner fa-spin' : 'fas fa-search'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;extractingTestCases ? 'Extracting...' : 'Preview'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/button&gt;&#10;                                        &lt;button @click=&quot;extractAndUploadTestCases()&quot;&#10;                                                :disabled=&quot;!testStoryId.trim() || extractingTestCases&quot;&#10;                                                class=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                            &lt;i :class=&quot;extractingTestCases ? 'fas fa-spinner fa-spin' : 'fas fa-upload'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;extractingTestCases ? 'Processing...' : 'Extract &amp; Upload'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Extracted Test Cases Preview --&gt;&#10;                                    &lt;div x-show=&quot;extractedTestCases.length &gt; 0&quot; class=&quot;mt-4 p-4 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                        &lt;h5 class=&quot;font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                            Extracted Test Cases (&lt;span x-text=&quot;extractedTestCases.length&quot;&gt;&lt;/span&gt;)&#10;                                        &lt;/h5&gt;&#10;                                        &lt;div class=&quot;max-h-48 overflow-y-auto space-y-2&quot;&gt;&#10;                                            &lt;template x-for=&quot;testCase in extractedTestCases&quot; :key=&quot;testCase.title&quot;&gt;&#10;                                                &lt;div class=&quot;text-sm p-2 bg-gray-50 dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                                    &lt;div class=&quot;font-medium text-gray-900 dark:text-white&quot; x-text=&quot;testCase.title&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                                        Type: &lt;span x-text=&quot;testCase.test_type || configForm.test_case_extraction_type&quot;&gt;&lt;/span&gt;&#10;                                                        &lt;span x-show=&quot;testCase.uploaded_id&quot; class=&quot;ml-2 text-green-600&quot;&gt;&#10;                                                            (Uploaded: #&lt;span x-text=&quot;testCase.uploaded_id&quot;&gt;&lt;/span&gt;)&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/template&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Warning --&gt;&#10;                            &lt;div class=&quot;bg-yellow-50 dark:bg-yellow-900 border-l-4 border-yellow-400 dark:border-yellow-500 p-4&quot;&gt;&#10;                                &lt;div class=&quot;flex&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-exclamation-triangle text-yellow-400 dark:text-yellow-300 mr-2 mt-0.5&quot;&gt;&lt;/i&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;h4 class=&quot;text-sm font-medium text-yellow-800 dark:text-yellow-200&quot;&gt;Configuration Update&lt;/h4&gt;&#10;                                        &lt;p class=&quot;text-sm text-yellow-700 dark:text-yellow-300 mt-1&quot;&gt;&#10;                                            Some changes may require restarting the monitor to take effect.&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;button @click=&quot;showConfigModal = false; resetConfigForm()&quot;&#10;                                    class=&quot;px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 rounded-md hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors&quot;&gt;&#10;                                Cancel&#10;                            &lt;/button&gt;&#10;                            &lt;button @click=&quot;updateConfig()&quot; &#10;                                    :disabled=&quot;loading&quot;&#10;                                    class=&quot;px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-save mr-1&quot;&gt;&lt;/i&gt;&#10;                                Save Configuration&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- EPIC Details Modal --&gt;&#10;            &lt;div x-show=&quot;showEpicDetailsModal&quot;&#10;                 x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                 x-transition:enter-start=&quot;opacity-0&quot;&#10;                 x-transition:enter-end=&quot;opacity-100&quot;&#10;                 x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                 x-transition:leave-start=&quot;opacity-100&quot;&#10;                 x-transition:leave-end=&quot;opacity-0&quot;&#10;                 class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;                &lt;div class=&quot;relative top-10 mx-auto p-6 border w-full max-w-4xl shadow-lg rounded-lg bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 m-4&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;h3 class=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-project-diagram text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            EPIC Details: &lt;span x-text=&quot;selectedEpic?.id || 'N/A'&quot;&gt;&lt;/span&gt;&#10;                        &lt;/h3&gt;&#10;                        &lt;button @click=&quot;showEpicDetailsModal = false&quot; &#10;                                class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;!-- EPIC Overview --&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6&quot;&gt;&#10;                        &lt;div class=&quot;lg:col-span-2&quot;&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;Overview&lt;/h4&gt;&#10;                                &lt;div class=&quot;grid grid-cols-2 gap-4 text-sm&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Status:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium&quot; :class=&quot;selectedEpic?.status === 'active' ? 'text-green-600' : 'text-yellow-600'&quot; &#10;                                              x-text=&quot;selectedEpic?.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Total Checks:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-gray-900 dark:text-white&quot; x-text=&quot;selectedEpic?.totalChecks || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Changes Detected:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-yellow-600&quot; x-text=&quot;selectedEpic?.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Last Updated:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-gray-900 dark:text-white&quot; x-text=&quot;selectedEpic?.lastUpdate || 'Never'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Recent Activity --&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;Recent Activity&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-3 max-h-64 overflow-y-auto&quot;&gt;&#10;                                    &lt;template x-for=&quot;activity in selectedEpic?.recentActivity || []&quot; :key=&quot;activity.timestamp&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-start space-x-3 p-3 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                            &lt;div :class=&quot;activity.type === 'change' ? 'bg-yellow-100 text-yellow-600' : 'bg-blue-100 text-blue-600'&quot; &#10;                                                 class=&quot;w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                                                &lt;i :class=&quot;activity.type === 'change' ? 'fas fa-exclamation' : 'fas fa-check'&quot; class=&quot;text-xs&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;flex-1&quot;&gt;&#10;                                                &lt;p class=&quot;text-sm text-gray-900 dark:text-white&quot; x-text=&quot;activity.message&quot;&gt;&lt;/p&gt;&#10;                                                &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot; x-text=&quot;activity.timestamp&quot;&gt;&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/template&gt;&#10;                                    &lt;div x-show=&quot;!selectedEpic?.recentActivity?.length&quot; class=&quot;text-center py-8 text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-clock text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;No recent activity&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;!-- Statistics --&gt;&#10;                        &lt;div class=&quot;space-y-4&quot;&gt;&#10;                            &lt;div class=&quot;bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-4 text-white&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold mb-2&quot;&gt;Performance&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-2 text-sm&quot;&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Avg Response:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.avgResponseTime ? selectedEpic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Success Rate:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.successRate ? selectedEpic.successRate + '%' : '100%'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Uptime:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.uptime || '100%'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;Actions&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-2&quot;&gt;&#10;                                    &lt;button @click=&quot;forceCheckEpic(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 rounded hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-sync mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Force Check Now&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;downloadEpicReport(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 rounded hover:bg-green-200 dark:hover:bg-green-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-download mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Download Report&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;viewEpicSnapshot(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300 rounded hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-camera mr-1&quot;&gt;&lt;/i&gt;&#10;                                        View Snapshot&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;!-- Change History Chart --&gt;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;Change History (7 days)&lt;/h4&gt;&#10;                        &lt;div class=&quot;h-64&quot;&gt;&#10;                            &lt;canvas :id=&quot;'epicChart' + selectedEpic?.id&quot;&gt;&lt;/canvas&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- Enhanced Toast Notifications --&gt;&#10;        &lt;div class=&quot;fixed top-4 right-4 z-50 space-y-3&quot;&gt;&#10;            &lt;template x-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot;&gt;&#10;                &lt;div x-show=&quot;notification.show&quot; &#10;                     x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                     x-transition:enter-start=&quot;opacity-0 transform translate-x-full&quot;&#10;                     x-transition:enter-end=&quot;opacity-100 transform translate-x-0&quot;&#10;                     x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                     x-transition:leave-start=&quot;opacity-100 transform translate-x-0&quot;&#10;                     x-transition:leave-end=&quot;opacity-0 transform translate-x-full&quot;&#10;                     class=&quot;min-w-80 max-w-md w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden&quot;&gt;&#10;                    &lt;div :class=&quot;getNotificationClass(notification.type)&quot; class=&quot;p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-start&quot;&gt;&#10;                            &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                                &lt;i :class=&quot;getNotificationIcon(notification.type)&quot; class=&quot;text-xl text-white&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;ml-3 flex-1 min-w-0&quot;&gt;&#10;                                &lt;p class=&quot;text-sm font-medium text-white&quot; x-text=&quot;notification.title || getNotificationTitle(notification.type)&quot;&gt;&lt;/p&gt;&#10;                                &lt;p class=&quot;mt-1 text-sm text-white opacity-90 break-words&quot; x-text=&quot;notification.message&quot;&gt;&lt;/p&gt;&#10;                                &lt;div class=&quot;mt-2&quot; x-show=&quot;notification.actions &amp;&amp; notification.actions.length&quot;&gt;&#10;                                    &lt;template x-for=&quot;action in notification.actions&quot;&gt;&#10;                                        &lt;button @click=&quot;action.handler(); dismissNotification(notification.id)&quot; &#10;                                                class=&quot;text-xs bg-white bg-opacity-20 hover:bg-opacity-30 rounded px-3 py-1 mr-2 transition-colors&quot;&#10;                                                x-text=&quot;action.label&quot;&gt;&lt;/button&gt;&#10;                                    &lt;/template&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;ml-3 flex-shrink-0&quot;&gt;&#10;                                &lt;button @click=&quot;dismissNotification(notification.id)&quot; &#10;                                        class=&quot;rounded-md inline-flex text-white hover:text-gray-200 focus:outline-none p-1&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;!-- Progress bar for timed notifications --&gt;&#10;                        &lt;div x-show=&quot;notification.autoClose&quot; class=&quot;mt-3&quot;&gt;&#10;                            &lt;div class=&quot;w-full bg-white bg-opacity-20 rounded-full h-1&quot;&gt;&#10;                                &lt;div class=&quot;bg-white h-1 rounded-full transition-all ease-linear&quot; &#10;                                     :style=&quot;'width: ' + (notification.progress || 100) + '%'&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/template&gt;&#10;        &lt;/div&gt;&#10;        &lt;/main&gt;&#10;&#10;        &lt;script&gt;&#10;        function dashboardData() {&#10;            return {&#10;                // Loading states&#10;                loading: false,&#10;                loadingLogs: false,&#10;                loadingAnalytics: false,&#10;                &#10;                // Theme&#10;                darkMode: localStorage.getItem('darkMode') === 'true' || false,&#10;                &#10;                // Data&#10;                monitorStatus: { is_running: false },&#10;                epics: [],&#10;                epicDetails: {},&#10;                config: {},&#10;                logs: [],&#10;                metrics: {&#10;                    avgResponseTime: 0,&#10;                    successRate: 100,&#10;                    changesDetected: 0,&#10;                    totalChecks: 0&#10;                },&#10;                &#10;                // UI State&#10;                lastUpdated: '',&#10;                tableView: localStorage.getItem('tableView') || 'table',&#10;                epicFilter: '',&#10;                &#10;                // Modals&#10;                showAddEpicModal: false,&#10;                newEpicId: '',&#10;                showConfigModal: false,&#10;                showEpicDetailsModal: false,&#10;                selectedEpic: null,&#10;                &#10;                // Configuration form&#10;                configForm: {&#10;                    poll_interval_seconds: 30,&#10;                    max_concurrent_syncs: 3,&#10;                    retry_attempts: 3,&#10;                    retry_delay_seconds: 10,&#10;                    auto_sync: true,&#10;                    epic_ids_text: '',&#10;                    log_level: 'INFO',&#10;                    snapshot_directory: 'snapshots/',&#10;                    story_extraction_type: 'User Story',&#10;                    test_case_extraction_type: 'Issue',&#10;                    auto_extract_new_epics: false,&#10;                    skip_duplicate_check: false&#10;                },&#10;                &#10;                // Enhanced notifications&#10;                notifications: [],&#10;                notificationId: 0,&#10;                &#10;                // Charts&#10;                activityChart: null,&#10;                statusChart: null,&#10;&#10;                // Test Case Management&#10;                testStoryId: '',&#10;                extractingTestCases: false,&#10;                extractedTestCases: [],&#10;&#10;                async init() {&#10;                    this.applyTheme();&#10;                    await this.refreshData();&#10;                    this.initCharts();&#10;                    this.startAutoRefresh();&#10;                    this.setupWebSocket();&#10;                },&#10;&#10;                startAutoRefresh() {&#10;                    setInterval(() =&gt; {&#10;                        this.refreshLogs();&#10;                    }, 10000); // Refresh logs every 10 seconds&#10;                },&#10;&#10;                toggleTheme() {&#10;                    this.darkMode = !this.darkMode;&#10;                    localStorage.setItem('darkMode', this.darkMode);&#10;                    this.applyTheme();&#10;                },&#10;&#10;                applyTheme() {&#10;                    if (this.darkMode) {&#10;                        document.documentElement.classList.add('dark');&#10;                    } else {&#10;                        document.documentElement.classList.remove('dark');&#10;                    }&#10;                },&#10;&#10;                toggleTableView() {&#10;                    this.tableView = this.tableView === 'table' ? 'grid' : 'table';&#10;                    localStorage.setItem('tableView', this.tableView);&#10;                },&#10;&#10;                get filteredEpics() {&#10;                    if (!this.epicFilter) return this.epics.map(id =&gt; ({ &#10;                        id, &#10;                        ...this.epicDetails[id],&#10;                        status: 'monitoring',&#10;                        changesCount: Math.floor(Math.random() * 10),&#10;                        avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                        lastCheck: new Date()&#10;                    }));&#10;                    &#10;                    return this.epics&#10;                        .filter(id =&gt; id.toLowerCase().includes(this.epicFilter.toLowerCase()))&#10;                        .map(id =&gt; ({ &#10;                            id, &#10;                            ...this.epicDetails[id],&#10;                            status: 'monitoring',&#10;                            changesCount: Math.floor(Math.random() * 10),&#10;                            avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                            lastCheck: new Date()&#10;                        }));&#10;                },&#10;&#10;                async refreshData() {&#10;                    this.loading = true;&#10;                    try {&#10;                        await Promise.all([&#10;                            this.fetchStatus(),&#10;                            this.fetchEpics(),&#10;                            this.fetchConfig(),&#10;                            this.refreshLogs(),&#10;                            this.fetchMetrics()&#10;                        ]);&#10;                        this.lastUpdated = new Date().toLocaleTimeString();&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to refresh data', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async fetchStatus() {&#10;                    const response = await fetch('/api/status');&#10;                    const data = await response.json();&#10;                    this.monitorStatus = data;&#10;                },&#10;&#10;                async fetchEpics() {&#10;                    const response = await fetch('/api/epics');&#10;                    const data = await response.json();&#10;                    this.epics = data.epics || [];&#10;                    this.epicDetails = data.details || {};&#10;                },&#10;&#10;                async fetchConfig() {&#10;                    const response = await fetch('/api/config');&#10;                    const data = await response.json();&#10;                    this.config = data.config || {};&#10;                    this.initConfigForm();&#10;                },&#10;&#10;                async fetchMetrics() {&#10;                    try {&#10;                        // Mock data for now - replace with actual API call&#10;                        this.metrics = {&#10;                            avgResponseTime: Math.floor(Math.random() * 300) + 100,&#10;                            successRate: Math.floor(Math.random() * 10) + 90,&#10;                            changesDetected: Math.floor(Math.random() * 50),&#10;                            totalChecks: Math.floor(Math.random() * 500) + 100&#10;                        };&#10;                    } catch (error) {&#10;                        console.error('Failed to fetch metrics:', error);&#10;                    }&#10;                },&#10;&#10;                initConfigForm() {&#10;                    this.configForm = {&#10;                        poll_interval_seconds: this.config.poll_interval_seconds || 300,&#10;                        retry_attempts: this.config.retry_attempts || 3,&#10;                        retry_delay_seconds: this.config.retry_delay_seconds || 60,&#10;                        auto_sync: this.config.auto_sync !== undefined ? this.config.auto_sync : true,&#10;                        story_extraction_type: this.config.story_extraction_type || 'User Story',&#10;                        test_case_extraction_type: this.config.test_case_extraction_type || 'Issue',&#10;                        auto_extract_new_epics: this.config.auto_extract_new_epics || false,&#10;                        skip_duplicate_check: this.config.skip_duplicate_check || false&#10;                    };&#10;                },&#10;&#10;                async refreshLogs() {&#10;                    this.loadingLogs = true;&#10;                    try {&#10;                        const response = await fetch('/api/logs?lines=50');&#10;                        const data = await response.json();&#10;                        this.logs = data.logs || [];&#10;                    } catch (error) {&#10;                        console.error('Failed to fetch logs:', error);&#10;                    } finally {&#10;                        this.loadingLogs = false;&#10;                    }&#10;                },&#10;&#10;                async refreshAnalytics() {&#10;                    this.loadingAnalytics = true;&#10;                    try {&#10;                        await this.fetchMetrics();&#10;                        this.updateCharts();&#10;                        this.showNotification('Analytics refreshed', 'success');&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to refresh analytics', 'error');&#10;                    } finally {&#10;                        this.loadingAnalytics = false;&#10;                    }&#10;                },&#10;&#10;                async clearLogs() {&#10;                    if (!confirm('Clear logs from display? (Log file will be preserved)')) return;&#10;                    &#10;                    this.loadingLogs = true;&#10;                    try {&#10;                        const response = await fetch('/api/logs/clear', { method: 'DELETE' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Logs cleared from display', 'success');&#10;                            this.logs = [];&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to clear logs', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to clear logs', 'error');&#10;                    } finally {&#10;                        this.loadingLogs = false;&#10;                    }&#10;                },&#10;&#10;                // Monitor control functions&#10;                async startMonitor() {&#10;                    console.log('startMonitor called');&#10;                    this.loading = true;&#10;                    try {&#10;                        console.log('Making API call to /api/start');&#10;                        const response = await fetch('/api/start', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        console.log('API response:', data);&#10;                        &#10;                        if (data.success) {&#10;                            console.log('Monitor started successfully, showing notification');&#10;                            this.showNotification('Monitor started successfully', 'success', 'Monitor Status');&#10;                            await this.fetchStatus();&#10;                        } else {&#10;                            console.log('Monitor start failed:', data.message);&#10;                            this.showNotification(data.message || 'Failed to start monitor', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error starting monitor:', error);&#10;                        this.showNotification('Failed to start monitor', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async stopMonitor() {&#10;                    console.log('stopMonitor called');&#10;                    this.loading = true;&#10;                    try {&#10;                        console.log('Making API call to /api/stop');&#10;                        const response = await fetch('/api/stop', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        console.log('API response:', data);&#10;                        &#10;                        if (data.success) {&#10;                            console.log('Monitor stopped successfully, showing notification');&#10;                            this.showNotification('Monitor stopped successfully', 'warning', 'Monitor Status');&#10;                            await this.fetchStatus();&#10;                        } else {&#10;                            console.log('Monitor stop failed:', data.message);&#10;                            this.showNotification(data.message || 'Failed to stop monitor', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error stopping monitor:', error);&#10;                        this.showNotification('Failed to stop monitor', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async forceCheck() {&#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch('/api/check', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Force check completed', 'success');&#10;                            await Promise.all([this.refreshLogs(), this.fetchMetrics()]);&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to force check', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to force check', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                // EPIC management functions&#10;                async addEpic() {&#10;                    if (!this.newEpicId.trim()) return;&#10;                    &#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${this.newEpicId.trim()}`, { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`EPIC ${this.newEpicId} added successfully`, 'success', 'EPIC Management');&#10;                            this.newEpicId = '';&#10;                            this.showAddEpicModal = false;&#10;                            await this.fetchEpics();&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to add EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to add EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async removeEpic(epicId) {&#10;                    if (!confirm(`Are you sure you want to remove EPIC ${epicId}?`)) return;&#10;                    &#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${epicId}`, { method: 'DELETE' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`EPIC ${epicId} removed successfully`, 'success', 'EPIC Management');&#10;                            await this.fetchEpics();&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to remove EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to remove EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                viewEpicDetails(epicId) {&#10;                    this.selectedEpic = {&#10;                        id: epicId,&#10;                        status: 'active',&#10;                        totalChecks: Math.floor(Math.random() * 100) + 50,&#10;                        changesCount: Math.floor(Math.random() * 20),&#10;                        lastUpdate: new Date().toLocaleString(),&#10;                        avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                        successRate: Math.floor(Math.random() * 10) + 90,&#10;                        uptime: '99.5%',&#10;                        recentActivity: [&#10;                            { type: 'change', message: 'New work item detected', timestamp: '2 minutes ago' },&#10;                            { type: 'check', message: 'Routine check completed', timestamp: '5 minutes ago' },&#10;                            { type: 'change', message: 'Work item status changed', timestamp: '15 minutes ago' }&#10;                        ]&#10;                    };&#10;                    this.showEpicDetailsModal = true;&#10;                },&#10;&#10;                async forceCheckEpic(epicId) {&#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${epicId}/check`, { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`Force check completed for EPIC ${epicId}`, 'success');&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to force check EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to force check EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                downloadEpicReport(epicId) {&#10;                    // Create a mock download&#10;                    const report = {&#10;                        epicId: epicId,&#10;                        generatedAt: new Date().toISOString(),&#10;                        summary: { totalChecks: 150, changes: 12, avgResponse: '250ms' }&#10;                    };&#10;                    &#10;                    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });&#10;                    const url = URL.createObjectURL(blob);&#10;                    const a = document.createElement('a');&#10;                    a.href = url;&#10;                    a.download = `epic-${epicId}-report.json`;&#10;                    a.click();&#10;                    URL.revokeObjectURL(url);&#10;                    &#10;                    this.showNotification(`Report downloaded for EPIC ${epicId}`, 'success');&#10;                },&#10;&#10;                viewEpicSnapshot(epicId) {&#10;                    // Mock functionality - would open snapshot viewer&#10;                    this.showNotification(`Opening snapshot for EPIC ${epicId}`, 'info');&#10;                },&#10;&#10;                // Configuration functions&#10;                async updateConfig() {&#10;                    this.loading = true;&#10;                    try {&#10;                        const epic_ids = this.configForm.epic_ids_text&#10;                            .split('\n')&#10;                            .map(id =&gt; id.trim())&#10;                            .filter(id =&gt; id.length &gt; 0);&#10;&#10;                        const configUpdate = {&#10;                            poll_interval_seconds: parseInt(this.configForm.poll_interval_seconds),&#10;                            max_concurrent_syncs: parseInt(this.configForm.max_concurrent_syncs),&#10;                            retry_attempts: parseInt(this.configForm.retry_attempts),&#10;                            retry_delay_seconds: parseInt(this.configForm.retry_delay_seconds),&#10;                            auto_sync: this.configForm.auto_sync,&#10;                            epic_ids: epic_ids,&#10;                            log_level: this.configForm.log_level,&#10;                            snapshot_directory: this.configForm.snapshot_directory,&#10;                            story_extraction_type: this.configForm.story_extraction_type,&#10;                            test_case_extraction_type: this.configForm.test_case_extraction_type,&#10;                            auto_extract_new_epics: this.configForm.auto_extract_new_epics,&#10;                            skip_duplicate_check: this.configForm.skip_duplicate_check&#10;                        };&#10;&#10;                        const response = await fetch('/api/config', {&#10;                            method: 'PUT',&#10;                            headers: { 'Content-Type': 'application/json' },&#10;                            body: JSON.stringify(configUpdate)&#10;                        });&#10;                        &#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Configuration updated successfully', 'success', 'Configuration', [&#10;                                { label: 'Restart Monitor', handler: () =&gt; this.restartMonitor() }&#10;                            ]);&#10;                            this.showConfigModal = false;&#10;                            await this.fetchConfig();&#10;                            await this.fetchEpics();&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to update configuration', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to update configuration', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async restartMonitor() {&#10;                    await this.stopMonitor();&#10;                    setTimeout(() =&gt; this.startMonitor(), 2000);&#10;                },&#10;&#10;                // Enhanced notification system&#10;                showNotification(message, type = 'info', title = null, actions = null) {&#10;                    console.log('showNotification called:', { message, type, title, actions });&#10;                    &#10;                    const id = ++this.notificationId;&#10;                    const notification = {&#10;                        id,&#10;                        message,&#10;                        type,&#10;                        title,&#10;                        actions,&#10;                        show: true,&#10;                        autoClose: !actions,&#10;                        progress: 100&#10;                    };&#10;                    &#10;                    this.notifications.push(notification);&#10;                    console.log('Notification added. Total notifications:', this.notifications.length);&#10;                    &#10;                    if (notification.autoClose) {&#10;                        const interval = setInterval(() =&gt; {&#10;                            notification.progress -= 2;&#10;                            if (notification.progress &lt;= 0) {&#10;                                this.dismissNotification(id);&#10;                                clearInterval(interval);&#10;                            }&#10;                        }, 100);&#10;                    }&#10;                },&#10;&#10;                dismissNotification(id) {&#10;                    console.log('dismissNotification called for id:', id);&#10;                    const index = this.notifications.findIndex(n =&gt; n.id === id);&#10;                    if (index &gt; -1) {&#10;                        this.notifications[index].show = false;&#10;                        setTimeout(() =&gt; {&#10;                            this.notifications.splice(index, 1);&#10;                            console.log('Notification removed. Remaining:', this.notifications.length);&#10;                        }, 300);&#10;                    }&#10;                },&#10;&#10;                getNotificationClass(type) {&#10;                    const classes = {&#10;                        success: 'bg-gradient-to-r from-green-500 to-green-600',&#10;                        error: 'bg-gradient-to-r from-red-500 to-red-600',&#10;                        warning: 'bg-gradient-to-r from-yellow-500 to-orange-500',&#10;                        info: 'bg-gradient-to-r from-blue-500 to-blue-600'&#10;                    };&#10;                    return classes[type] || classes.info;&#10;                },&#10;&#10;                getNotificationIcon(type) {&#10;                    const icons = {&#10;                        success: 'fas fa-check-circle',&#10;                        error: 'fas fa-exclamation-triangle',&#10;                        warning: 'fas fa-exclamation-circle',&#10;                        info: 'fas fa-info-circle'&#10;                    };&#10;                    return icons[type] || icons.info;&#10;                },&#10;&#10;                getNotificationTitle(type) {&#10;                    const titles = {&#10;                        success: 'Success',&#10;                        error: 'Error',&#10;                        warning: 'Warning',&#10;                        info: 'Information'&#10;                    };&#10;                    return titles[type] || titles.info;&#10;                },&#10;&#10;                // Chart initialization and updates&#10;                initCharts() {&#10;                    this.$nextTick(() =&gt; {&#10;                        this.initActivityChart();&#10;                        this.initStatusChart();&#10;                    });&#10;                },&#10;&#10;                initActivityChart() {&#10;                    const ctx = document.getElementById('activityChart');&#10;                    if (!ctx) return;&#10;&#10;                    const hours = Array.from({length: 24}, (_, i) =&gt; `${i}:00`);&#10;                    const data = Array.from({length: 24}, () =&gt; Math.floor(Math.random() * 20));&#10;&#10;                    this.activityChart = new Chart(ctx, {&#10;                        type: 'line',&#10;                        data: {&#10;                            labels: hours,&#10;                            datasets: [{&#10;                                label: 'Checks',&#10;                                data: data,&#10;                                borderColor: '#3B82F6',&#10;                                backgroundColor: 'rgba(59, 130, 246, 0.1)',&#10;                                fill: true,&#10;                                tension: 0.4&#10;                            }]&#10;                        },&#10;                        options: {&#10;                            responsive: true,&#10;                            maintainAspectRatio: false,&#10;                            plugins: { legend: { display: false } },&#10;                            scales: {&#10;                                y: { beginAtZero: true }&#10;                            }&#10;                        }&#10;                    });&#10;                },&#10;&#10;                initStatusChart() {&#10;                    const ctx = document.getElementById('statusChart');&#10;                    if (!ctx) return;&#10;&#10;                    this.statusChart = new Chart(ctx, {&#10;                        type: 'doughnut',&#10;                        data: {&#10;                            labels: ['Active', 'Monitoring', 'Paused'],&#10;                            datasets: [{&#10;                                data: [12, 8, 2],&#10;                                backgroundColor: ['#10B981', '#3B82F6', '#F59E0B']&#10;                            }]&#10;                        },&#10;                        options: {&#10;                            responsive: true,&#10;                            maintainAspectRatio: false,&#10;                            plugins: {&#10;                                legend: { position: 'bottom' }&#10;                            }&#10;                        }&#10;                    });&#10;                },&#10;&#10;                updateCharts() {&#10;                    if (this.activityChart) {&#10;                        this.activityChart.data.datasets[0].data = Array.from({length: 24}, () =&gt; Math.floor(Math.random() * 20));&#10;                        this.activityChart.update();&#10;                    }&#10;                },&#10;&#10;                setupWebSocket() {&#10;                    // Disabled mock WebSocket setup - replace with real WebSocket when backend supports it&#10;                    // setInterval(() =&gt; {&#10;                    //     // Only show alerts if monitor is running and there are EPICs to monitor&#10;                    //     if (this.monitorStatus.is_running &amp;&amp; this.epics &amp;&amp; this.epics.length &gt; 0) {&#10;                    //         if (Math.random() &gt; 0.9) { // Reduced frequency for more realistic alerts&#10;                    //             const randomIndex = Math.floor(Math.random() * this.epics.length);&#10;                    //             let epicId;&#10;                    //             &#10;                    //             // Handle both string array and object array formats&#10;                    //             if (typeof this.epics[randomIndex] === 'string') {&#10;                    //                 epicId = this.epics[randomIndex];&#10;                    //             } else if (this.epics[randomIndex] &amp;&amp; this.epics[randomIndex].id) {&#10;                    //                 epicId = this.epics[randomIndex].id;&#10;                    //             }&#10;                    //             &#10;                    //             if (epicId) {&#10;                    //                 console.log('Simulated real-time alert for EPIC:', epicId);&#10;                    //                 this.showNotification(`Change detected in EPIC ${epicId}`, 'warning', 'Real-time Alert');&#10;                    //             }&#10;                    //         }&#10;                    //     }&#10;                    // }, 45000); // Increased interval to 45 seconds for less frequent alerts&#10;                    &#10;                    console.log('Real-time alerts disabled (mock data). Enable when real WebSocket backend is available.');&#10;                },&#10;&#10;                // Utility functions&#10;                getRelativeTime(date) {&#10;                    const now = new Date();&#10;                    const diff = now - date;&#10;                    const minutes = Math.floor(diff / 60000);&#10;                    &#10;                    if (minutes &lt; 1) return 'Just now';&#10;                    if (minutes === 1) return '1 minute ago';&#10;                    if (minutes &lt; 60) return `${minutes} minutes ago`;&#10;                    &#10;                    const hours = Math.floor(minutes / 60);&#10;                    if (hours === 1) return '1 hour ago';&#10;                    if (hours &lt; 24) return `${hours} hours ago`;&#10;                    &#10;                    return date.toLocaleDateString();&#10;                },&#10;&#10;                startAutoRefresh() {&#10;                    setInterval(() =&gt; {&#10;                        this.refreshLogs();&#10;                    }, 10000); // Refresh logs every 10 seconds&#10;                },&#10;&#10;                resetConfigForm() {&#10;                    this.initConfigForm();&#10;                },&#10;&#10;                // Test Case Management functions&#10;                async extractTestCases() {&#10;                    if (!this.testStoryId.trim()) return;&#10;                    &#10;                    this.extractingTestCases = true;&#10;                    try {&#10;                        const response = await fetch(`/api/stories/${this.testStoryId.trim()}/test-cases`, {&#10;                            method: 'POST',&#10;                            headers: {&#10;                                'Content-Type': 'application/json'&#10;                            }&#10;                        });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.extractedTestCases = data.test_cases;&#10;                            this.showNotification(`Successfully extracted ${data.total_test_cases} test cases for story ${this.testStoryId}`, 'success', 'Test Case Extraction');&#10;                        } else {&#10;                            this.showNotification(data.error || 'Failed to extract test cases', 'error');&#10;                            this.extractedTestCases = [];&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error extracting test cases:', error);&#10;                        this.showNotification('Failed to extract test cases', 'error');&#10;                        this.extractedTestCases = [];&#10;                    } finally {&#10;                        this.extractingTestCases = false;&#10;                    }&#10;                },&#10;&#10;                async extractAndUploadTestCases() {&#10;                    if (!this.testStoryId.trim()) return;&#10;                    &#10;                    this.extractingTestCases = true;&#10;                    try {&#10;                        const response = await fetch(`/api/stories/${this.testStoryId.trim()}/test-cases/upload`, {&#10;                            method: 'POST',&#10;                            headers: {&#10;                                'Content-Type': 'application/json'&#10;                            }&#10;                        });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            const successMessage = `Successfully created ${data.total_uploaded} test cases in ADO for story ${this.testStoryId}`;&#10;                            const errorMessage = data.total_errors &gt; 0 ? ` (${data.total_errors} errors)` : '';&#10;                            &#10;                            this.showNotification(successMessage + errorMessage, data.total_errors &gt; 0 ? 'warning' : 'success', 'Test Case Upload');&#10;                            &#10;                            // Also show the extracted test cases&#10;                            this.extractedTestCases = data.uploaded_test_cases.map(tc =&gt; ({&#10;                                title: tc.title,&#10;                                test_type: tc.type,&#10;                                uploaded_id: tc.id&#10;                            }));&#10;                            &#10;                            // Clear the story ID after successful upload&#10;                            this.testStoryId = '';&#10;                        } else {&#10;                            this.showNotification(data.error || 'Failed to extract and upload test cases', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error extracting and uploading test cases:', error);&#10;                        this.showNotification('Failed to extract and upload test cases', 'error');&#10;                    } finally {&#10;                        this.extractingTestCases = false;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &lt;/script&gt;&#10;    &lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;EPIC Change Monitor Dashboard&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js&quot; defer&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/date-fns@2.29.0/index.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='styles.css') }}&quot;&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            darkMode: 'class',&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'primary': {&#10;                            50: '#eff6ff',&#10;                            500: '#3b82f6',&#10;                            600: '#2563eb',&#10;                            700: '#1d4ed8'&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-gray-50 dark:bg-gray-900 min-h-screen transition-colors duration-300&quot;&gt;&#10;    &lt;div x-data=&quot;dashboardData()&quot; x-init=&quot;init()&quot; :class=&quot;darkMode ? 'dark' : ''&quot; class=&quot;min-h-screen&quot;&gt;&#10;        &lt;!-- Header --&gt;&#10;        &lt;header class=&quot;bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 transition-colors duration-300&quot;&gt;&#10;            &lt;div class=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;div class=&quot;flex justify-between items-center h-16&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-chart-line text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h1 class=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;EPIC Monitor Dashboard&lt;/h1&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;div :class=&quot;monitorStatus.is_running ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'&quot; &#10;                                 class=&quot;px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                                &lt;i :class=&quot;monitorStatus.is_running ? 'fas fa-play' : 'fas fa-stop'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                &lt;span x-text=&quot;monitorStatus.is_running ? 'Running' : 'Stopped'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;button @click=&quot;toggleTheme()&quot; &#10;                                class=&quot;p-2 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-700&quot;&gt;&#10;                            &lt;i :class=&quot;darkMode ? 'fas fa-sun text-yellow-500' : 'fas fa-moon text-gray-600'&quot; &#10;                               class=&quot;text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;refreshData()&quot; &#10;                                class=&quot;p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync-alt&quot; :class=&quot;{'animate-spin': loading}&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Last updated: &lt;span x-text=&quot;lastUpdated&quot;&gt;&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;!-- Main Content --&gt;&#10;        &lt;main class=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;            &lt;!-- Configuration Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Configuration&#10;                    &lt;/h2&gt;&#10;                    &lt;button @click=&quot;showConfigModal = true&quot;&#10;                            class=&quot;flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Config&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-book text-green-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Story Extraction Type&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.story_extraction_type || 'User Story'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-vial text-orange-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Test Case Extraction Type&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.test_case_extraction_type || 'Issue'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync text-blue-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Auto Extract New Epics&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.auto_extract_new_epics ? 'Enabled' : 'Disabled'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shield-alt text-purple-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Duplicate Check&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.skip_duplicate_check ? 'Disabled' : 'Enabled'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-redo text-red-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Retry Attempts&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;config.retry_attempts || 3&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-clock text-yellow-500&quot;&gt;&lt;/i&gt;&#10;                            &lt;h3 class=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;Poll Interval&lt;/h3&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-300&quot; x-text=&quot;(config.poll_interval_seconds || 300) + ' seconds'&quot;&gt;&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-control-panel text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Control Panel&#10;                    &lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;flex flex-wrap gap-4&quot;&gt;&#10;                    &lt;button @click=&quot;startMonitor()&quot; &#10;                            :disabled=&quot;monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-play mr-2&quot;&gt;&lt;/i&gt;&#10;                        Start Monitor&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;stopMonitor()&quot; &#10;                            :disabled=&quot;!monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-stop mr-2&quot;&gt;&lt;/i&gt;&#10;                        Stop Monitor&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;forceCheck()&quot; &#10;                            :disabled=&quot;!monitorStatus.is_running || loading&quot;&#10;                            class=&quot;flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-sync mr-2&quot;&gt;&lt;/i&gt;&#10;                        Force Check&#10;                    &lt;/button&gt;&#10;                    &#10;                    &lt;button @click=&quot;showAddEpicModal = true&quot; &#10;                            class=&quot;flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                        Add EPIC&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Statistics Cards --&gt;&#10;            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8&quot;&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-list text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Total EPICs&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;epics.length&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-check-circle text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Active Monitor&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold&quot; :class=&quot;monitorStatus.is_running ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'&quot; &#10;                               x-text=&quot;monitorStatus.is_running ? 'Yes' : 'No'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-clock text-yellow-600 dark:text-yellow-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Poll Interval&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.poll_interval_seconds + 's'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center&quot;&gt;&#10;                        &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div class=&quot;w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-cog text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;ml-4&quot;&gt;&#10;                            &lt;p class=&quot;text-sm font-medium text-gray-600 dark:text-gray-300&quot;&gt;Auto Sync&lt;/p&gt;&#10;                            &lt;p class=&quot;text-2xl font-semibold&quot; :class=&quot;config.auto_sync ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'&quot; &#10;                               x-text=&quot;config.auto_sync ? 'On' : 'Off'&quot;&gt;&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Analytics Dashboard --&gt;&#10;            &lt;div class=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8&quot; x-show=&quot;false&quot;&gt;&#10;                &lt;!-- Activity Timeline Chart --&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-line text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            Activity Timeline (24h)&#10;                        &lt;/h3&gt;&#10;                        &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;button @click=&quot;refreshAnalytics()&quot; class=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-sync-alt text-sm&quot; :class=&quot;{'animate-spin': loadingAnalytics}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;relative h-64&quot;&gt;&#10;                        &lt;canvas id=&quot;activityChart&quot; class=&quot;w-full h-full&quot;&gt;&lt;/canvas&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- EPIC Status Distribution --&gt;&#10;                &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-pie text-purple-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            EPIC Status Distribution&#10;                        &lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;relative h-64&quot;&gt;&#10;                        &lt;canvas id=&quot;statusChart&quot; class=&quot;w-full h-full&quot;&gt;&lt;/canvas&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Performance Metrics --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-tachometer-alt text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                    Performance Metrics&#10;                &lt;/h3&gt;&#10;                &#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot; x-text=&quot;metrics.avgResponseTime || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Avg Response Time (ms)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot; x-text=&quot;metrics.successRate || '100'&quot;&gt;100&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Success Rate (%)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-yellow-600 dark:text-yellow-400&quot; x-text=&quot;metrics.changesDetected || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Changes Detected (24h)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div class=&quot;text-2xl font-bold text-purple-600 dark:text-purple-400&quot; x-text=&quot;metrics.totalChecks || '0'&quot;&gt;0&lt;/div&gt;&#10;                        &lt;div class=&quot;text-sm text-gray-600 dark:text-gray-300 mt-1&quot;&gt;Total Checks (24h)&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- EPICs Table --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-table text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Monitored EPICs&#10;                    &lt;/h2&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;toggleTableView()&quot; class=&quot;text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200&quot;&gt;&#10;                            &lt;i :class=&quot;tableView === 'grid' ? 'fas fa-list' : 'fas fa-th'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                            &lt;span x-text=&quot;tableView === 'grid' ? 'List View' : 'Grid View'&quot;&gt;&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input type=&quot;text&quot; &#10;                               x-model=&quot;epicFilter&quot; &#10;                               placeholder=&quot;Filter EPICs...&quot; &#10;                               class=&quot;text-sm px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;!-- Grid View --&gt;&#10;                &lt;div x-show=&quot;tableView === 'grid'&quot; class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                        &lt;template x-for=&quot;epic in filteredEpics&quot; :key=&quot;epic.id&quot;&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4 border border-gray-200 dark:border-gray-600 hover:shadow-md transition-shadow&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;div class=&quot;w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-project-diagram text-white&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;div class=&quot;font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;epic.id&quot;&gt;&lt;/div&gt;&#10;                                            &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;EPIC&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div :class=&quot;epic.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'&quot; &#10;                                         class=&quot;px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                                        &lt;span x-text=&quot;epic.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div class=&quot;space-y-2 text-sm text-gray-600 dark:text-gray-300&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Last Check:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;epic.lastCheck ? getRelativeTime(new Date(epic.lastCheck)) : 'Never'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Changes:&lt;/span&gt;&#10;                                        &lt;span class=&quot;font-medium&quot; x-text=&quot;epic.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                                        &lt;span&gt;Response Time:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;epic.avgResponseTime ? epic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div class=&quot;mt-4 flex items-center justify-between&quot;&gt;&#10;                                    &lt;button @click=&quot;viewEpicDetails(epic.id)&quot; &#10;                                            class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                        View Details&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;removeEpic(epic.id)&quot; &#10;                                            class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm font-medium&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Remove&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;!-- Table View --&gt;&#10;                &lt;div x-show=&quot;tableView === 'table'&quot; class=&quot;overflow-x-auto&quot;&gt;&#10;                    &lt;table class=&quot;min-w-full divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                        &lt;thead class=&quot;bg-gray-50 dark:bg-gray-700&quot;&gt;&#10;                            &lt;tr&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    EPIC ID&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Status&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Last Check&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Changes&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Avg Response&#10;                                &lt;/th&gt;&#10;                                &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                                    Actions&#10;                                &lt;/th&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody class=&quot;bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                            &lt;template x-for=&quot;epic in filteredEpics&quot; :key=&quot;epic.id&quot;&gt;&#10;                                &lt;tr class=&quot;hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors&quot;&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;div class=&quot;w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-project-diagram text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div&gt;&#10;                                                &lt;div class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot; x-text=&quot;epic.id&quot;&gt;&lt;/div&gt;&#10;                                                &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;EPIC&lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;span :class=&quot;epic.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'&quot; &#10;                                              class=&quot;px-2 py-1 text-xs font-medium rounded-full&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;epic.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-clock mr-2 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;epic.lastCheck ? getRelativeTime(new Date(epic.lastCheck)) : 'Never'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                            &lt;span class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot; x-text=&quot;epic.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                            &lt;span class=&quot;text-xs text-gray-500 dark:text-gray-400 ml-1&quot;&gt;detected&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;span x-text=&quot;epic.avgResponseTime ? epic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/td&gt;&#10;                                    &lt;td class=&quot;px-6 py-4 whitespace-nowrap text-sm font-medium&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                            &lt;button @click=&quot;viewEpicDetails(epic.id)&quot; &#10;                                                    class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                                                Details&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;removeEpic(epic.id)&quot; &#10;                                                    class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-trash mr-1&quot;&gt;&lt;/i&gt;&#10;                                                Remove&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/td&gt;&#10;                                &lt;/tr&gt;&#10;                            &lt;/template&gt;&#10;                            &lt;tr x-show=&quot;filteredEpics.length === 0&quot;&gt;&#10;                                &lt;td colspan=&quot;6&quot; class=&quot;px-6 py-12 text-center&quot;&gt;&#10;                                    &lt;div class=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-inbox text-4xl mb-4&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p class=&quot;text-lg font-medium&quot;&gt;No EPICs found&lt;/p&gt;&#10;                                        &lt;p class=&quot;text-sm&quot; x-text=&quot;epicFilter ? 'Try adjusting your filter' : 'Add an EPIC to start monitoring changes'&quot;&gt;&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/td&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Logs Section --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mt-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-file-alt text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Recent Logs&#10;                    &lt;/h2&gt;&#10;                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;clearLogs()&quot; &#10;                                :disabled=&quot;loadingLogs&quot;&#10;                                class=&quot;text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors disabled:text-gray-400&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-eye-slash mr-1&quot; :class=&quot;{'animate-spin': loadingLogs}&quot;&gt;&lt;/i&gt;&#10;                            Clear Display&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;refreshLogs()&quot; &#10;                                class=&quot;text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sync-alt mr-1&quot; :class=&quot;{'animate-spin': loadingLogs}&quot;&gt;&lt;/i&gt;&#10;                            Refresh&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;bg-gray-900 dark:bg-gray-950 rounded-lg p-4 font-mono text-sm text-gray-100 dark:text-gray-200 h-64 overflow-y-auto border border-gray-700&quot;&gt;&#10;                        &lt;template x-for=&quot;log in logs&quot; :key=&quot;log&quot;&gt;&#10;                            &lt;div x-text=&quot;log&quot; class=&quot;mb-1&quot;&gt;&lt;/div&gt;&#10;                        &lt;/template&gt;&#10;                        &lt;div x-show=&quot;logs.length === 0&quot; class=&quot;text-gray-500 dark:text-gray-400 text-center py-8&quot;&gt;&#10;                            No logs available&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Configuration Panel --&gt;&#10;            &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-8 transition-colors duration-300&quot;&gt;&#10;                &lt;div class=&quot;px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                    &lt;h2 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                        Configuration Settings&#10;                    &lt;/h2&gt;&#10;                    &lt;button @click=&quot;showConfigModal = true&quot; &#10;                            class=&quot;flex items-center px-3 py-1 text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Config&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Poll Interval&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-clock text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.poll_interval_seconds + ' seconds'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Auto Sync&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i :class=&quot;config.auto_sync ? 'fas fa-toggle-on text-green-500 dark:text-green-400' : 'fas fa-toggle-off text-gray-400 dark:text-gray-500'&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold&quot; :class=&quot;config.auto_sync ? 'text-green-600 dark:text-green-400' : 'text-gray-600 dark:text-gray-400'&quot; &#10;                                      x-text=&quot;config.auto_sync ? 'Enabled' : 'Disabled'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Max Concurrent Syncs&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-layer-group text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.max_concurrent_syncs&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Retry Attempts&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-redo text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.retry_attempts&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Retry Delay&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-hourglass-half text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.retry_delay_seconds + ' seconds'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Log Level&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-list-alt text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot; x-text=&quot;config.log_level || 'INFO'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div class=&quot;mt-6 pt-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                        &lt;div class=&quot;space-y-2&quot;&gt;&#10;                            &lt;label class=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;Snapshot Directory&lt;/label&gt;&#10;                            &lt;div class=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-folder text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                                &lt;span class=&quot;text-sm text-gray-600 dark:text-gray-300 font-mono bg-gray-50 dark:bg-gray-700 px-2 py-1 rounded&quot; &#10;                                      x-text=&quot;config.snapshot_directory || 'snapshots/'&quot;&gt;&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- Add EPIC Modal --&gt;&#10;        &lt;div x-show=&quot;showAddEpicModal&quot; &#10;             x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;             x-transition:enter-start=&quot;opacity-0&quot;&#10;             x-transition:enter-end=&quot;opacity-100&quot;&#10;             x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;             x-transition:leave-start=&quot;opacity-100&quot;&#10;             x-transition:leave-end=&quot;opacity-0&quot;&#10;             class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;            &lt;div class=&quot;relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div class=&quot;mt-3&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;Add New EPIC&lt;/h3&gt;&#10;                        &lt;button @click=&quot;showAddEpicModal = false&quot; &#10;                                class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;mb-4&quot;&gt;&#10;                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;EPIC ID&lt;/label&gt;&#10;                        &lt;input x-model=&quot;newEpicId&quot; &#10;                               type=&quot;text&quot; &#10;                               placeholder=&quot;Enter EPIC ID...&quot;&#10;                               class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;flex justify-end space-x-3&quot;&gt;&#10;                        &lt;button @click=&quot;showAddEpicModal = false&quot; &#10;                                class=&quot;px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 rounded-md hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors&quot;&gt;&#10;                            Cancel&#10;                        &lt;/button&gt;&#10;                        &lt;button @click=&quot;addEpic()&quot; &#10;                                :disabled=&quot;!newEpicId.trim() || loading&quot;&#10;                                class=&quot;px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                            Add EPIC&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;            &lt;!-- Configuration Edit Modal --&gt;&#10;            &lt;div x-show=&quot;showConfigModal&quot; &#10;                 x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                 x-transition:enter-start=&quot;opacity-0&quot;&#10;                 x-transition:enter-end=&quot;opacity-100&quot;&#10;                 x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                 x-transition:leave-start=&quot;opacity-100&quot;&#10;                 x-transition:leave-end=&quot;opacity-0&quot;&#10;                 class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;                &lt;div class=&quot;relative top-10 mx-auto p-6 border w-full max-w-3xl shadow-lg rounded-lg bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 m-4&quot;&gt;&#10;                    &lt;div class=&quot;mt-3&quot;&gt;&#10;                        &lt;div class=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;h3 class=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-cog text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                Edit Configuration&#10;                            &lt;/h3&gt;&#10;                            &lt;button @click=&quot;showConfigModal = false; resetConfigForm()&quot; &#10;                                    class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;space-y-8&quot;&gt;&#10;                            &lt;!-- Work Item Type Configuration --&gt;&#10;                            &lt;div class=&quot;bg-blue-50 dark:bg-blue-900 rounded-lg p-6&quot;&gt;&#10;                                &lt;h4 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-tasks text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                    Work Item Types&#10;                                &lt;/h4&gt;&#10;                                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-book text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                            Story Extraction Type&#10;                                        &lt;/label&gt;&#10;                                        &lt;select x-model=&quot;configForm.story_extraction_type&quot;&#10;                                                class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                            &lt;option value=&quot;User Story&quot;&gt;User Story&lt;/option&gt;&#10;                                            &lt;option value=&quot;Task&quot;&gt;Task&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Work item type for extracted stories&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div&gt;&#10;                                        &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-vial text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                            Test Case Extraction Type&#10;                                        &lt;/label&gt;&#10;                                        &lt;select x-model=&quot;configForm.test_case_extraction_type&quot;&#10;                                                class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                            &lt;option value=&quot;Issue&quot;&gt;Issue&lt;/option&gt;&#10;                                            &lt;option value=&quot;Test Case&quot;&gt;Test Case&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Work item type for extracted test cases&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Basic Settings --&gt;&#10;                            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-clock text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Poll Interval (seconds)&#10;                                    &lt;/label&gt;&#10;                                    &lt;input x-model=&quot;configForm.poll_interval_seconds&quot; &#10;                                           type=&quot;number&quot; &#10;                                           min=&quot;10&quot; &#10;                                           max=&quot;3600&quot;&#10;                                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;How often to check for changes (10-3600 seconds)&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;div&gt;&#10;                                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-redo text-gray-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Retry Attempts&#10;                                    &lt;/label&gt;&#10;                                    &lt;input x-model=&quot;configForm.retry_attempts&quot; &#10;                                           type=&quot;number&quot; &#10;                                           min=&quot;1&quot; &#10;                                           max=&quot;10&quot;&#10;                                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Number of retry attempts on failure&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Toggles --&gt;&#10;                            &lt;div class=&quot;space-y-4&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-sync text-blue-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Auto Sync&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Automatically sync changes when detected&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.auto_sync&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-magic text-purple-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Auto Extract New Epics&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Automatically extract stories from newly detected epics&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.auto_extract_new_epics&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-3&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-shield-alt text-green-500&quot;&gt;&lt;/i&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p class=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Skip Duplicate Check&lt;/p&gt;&#10;                                            &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;Skip checking for duplicate stories (may create duplicates)&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;label class=&quot;relative inline-flex items-center cursor-pointer&quot;&gt;&#10;                                        &lt;input x-model=&quot;configForm.skip_duplicate_check&quot; type=&quot;checkbox&quot; class=&quot;sr-only peer&quot;&gt;&#10;                                        &lt;div class=&quot;w-11 h-6 bg-gray-200 dark:bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600&quot;&gt;&lt;/div&gt;&#10;                                    &lt;/label&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Test Case Extraction Section --&gt;&#10;                            &lt;div class=&quot;bg-orange-50 dark:bg-orange-900 rounded-lg p-6&quot;&gt;&#10;                                &lt;h4 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-vial text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                                    Test Case Extraction&#10;                                &lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;&#10;                                        &lt;input x-model=&quot;testStoryId&quot;&#10;                                               type=&quot;text&quot;&#10;                                               placeholder=&quot;Enter Story/Work Item ID...&quot;&#10;                                               class=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&gt;&#10;                                        &lt;button @click=&quot;extractTestCases()&quot;&#10;                                                :disabled=&quot;!testStoryId.trim() || extractingTestCases&quot;&#10;                                                class=&quot;px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                            &lt;i :class=&quot;extractingTestCases ? 'fas fa-spinner fa-spin' : 'fas fa-search'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;extractingTestCases ? 'Extracting...' : 'Preview'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/button&gt;&#10;                                        &lt;button @click=&quot;extractAndUploadTestCases()&quot;&#10;                                                :disabled=&quot;!testStoryId.trim() || extractingTestCases&quot;&#10;                                                class=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                            &lt;i :class=&quot;extractingTestCases ? 'fas fa-spinner fa-spin' : 'fas fa-upload'&quot; class=&quot;mr-1&quot;&gt;&lt;/i&gt;&#10;                                            &lt;span x-text=&quot;extractingTestCases ? 'Processing...' : 'Extract &amp; Upload'&quot;&gt;&lt;/span&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Extracted Test Cases Preview --&gt;&#10;                                    &lt;div x-show=&quot;extractedTestCases.length &gt; 0&quot; class=&quot;mt-4 p-4 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                        &lt;h5 class=&quot;font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                            Extracted Test Cases (&lt;span x-text=&quot;extractedTestCases.length&quot;&gt;&lt;/span&gt;)&#10;                                        &lt;/h5&gt;&#10;                                        &lt;div class=&quot;max-h-48 overflow-y-auto space-y-2&quot;&gt;&#10;                                            &lt;template x-for=&quot;testCase in extractedTestCases&quot; :key=&quot;testCase.title&quot;&gt;&#10;                                                &lt;div class=&quot;text-sm p-2 bg-gray-50 dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                                    &lt;div class=&quot;font-medium text-gray-900 dark:text-white&quot; x-text=&quot;testCase.title&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                                        Type: &lt;span x-text=&quot;testCase.test_type || configForm.test_case_extraction_type&quot;&gt;&lt;/span&gt;&#10;                                                        &lt;span x-show=&quot;testCase.uploaded_id&quot; class=&quot;ml-2 text-green-600&quot;&gt;&#10;                                                            (Uploaded: #&lt;span x-text=&quot;testCase.uploaded_id&quot;&gt;&lt;/span&gt;)&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/template&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Warning --&gt;&#10;                            &lt;div class=&quot;bg-yellow-50 dark:bg-yellow-900 border-l-4 border-yellow-400 dark:border-yellow-500 p-4&quot;&gt;&#10;                                &lt;div class=&quot;flex&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-exclamation-triangle text-yellow-400 dark:text-yellow-300 mr-2 mt-0.5&quot;&gt;&lt;/i&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;h4 class=&quot;text-sm font-medium text-yellow-800 dark:text-yellow-200&quot;&gt;Configuration Update&lt;/h4&gt;&#10;                                        &lt;p class=&quot;text-sm text-yellow-700 dark:text-yellow-300 mt-1&quot;&gt;&#10;                                            Some changes may require restarting the monitor to take effect.&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;div class=&quot;flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;button @click=&quot;showConfigModal = false; resetConfigForm()&quot;&#10;                                    class=&quot;px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 rounded-md hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors&quot;&gt;&#10;                                Cancel&#10;                            &lt;/button&gt;&#10;                            &lt;button @click=&quot;updateConfig()&quot; &#10;                                    :disabled=&quot;loading&quot;&#10;                                    class=&quot;px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-save mr-1&quot;&gt;&lt;/i&gt;&#10;                                Save Configuration&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- EPIC Details Modal --&gt;&#10;            &lt;div x-show=&quot;showEpicDetailsModal&quot;&#10;                 x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                 x-transition:enter-start=&quot;opacity-0&quot;&#10;                 x-transition:enter-end=&quot;opacity-100&quot;&#10;                 x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                 x-transition:leave-start=&quot;opacity-100&quot;&#10;                 x-transition:leave-end=&quot;opacity-0&quot;&#10;                 class=&quot;fixed inset-0 bg-gray-600 bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50&quot;&gt;&#10;                &lt;div class=&quot;relative top-10 mx-auto p-6 border w-full max-w-4xl shadow-lg rounded-lg bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 m-4&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;h3 class=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-project-diagram text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                            EPIC Details: &lt;span x-text=&quot;selectedEpic?.id || 'N/A'&quot;&gt;&lt;/span&gt;&#10;                        &lt;/h3&gt;&#10;                        &lt;button @click=&quot;showEpicDetailsModal = false&quot; &#10;                                class=&quot;text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;!-- EPIC Overview --&gt;&#10;                    &lt;div class=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6&quot;&gt;&#10;                        &lt;div class=&quot;lg:col-span-2&quot;&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;Overview&lt;/h4&gt;&#10;                                &lt;div class=&quot;grid grid-cols-2 gap-4 text-sm&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Status:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium&quot; :class=&quot;selectedEpic?.status === 'active' ? 'text-green-600' : 'text-yellow-600'&quot; &#10;                                              x-text=&quot;selectedEpic?.status || 'monitoring'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Total Checks:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-gray-900 dark:text-white&quot; x-text=&quot;selectedEpic?.totalChecks || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Changes Detected:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-yellow-600&quot; x-text=&quot;selectedEpic?.changesCount || 0&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;span class=&quot;text-gray-600 dark:text-gray-300&quot;&gt;Last Updated:&lt;/span&gt;&#10;                                        &lt;span class=&quot;ml-2 font-medium text-gray-900 dark:text-white&quot; x-text=&quot;selectedEpic?.lastUpdate || 'Never'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;!-- Recent Activity --&gt;&#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;Recent Activity&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-3 max-h-64 overflow-y-auto&quot;&gt;&#10;                                    &lt;template x-for=&quot;activity in selectedEpic?.recentActivity || []&quot; :key=&quot;activity.timestamp&quot;&gt;&#10;                                        &lt;div class=&quot;flex items-start space-x-3 p-3 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-600&quot;&gt;&#10;                                            &lt;div :class=&quot;activity.type === 'change' ? 'bg-yellow-100 text-yellow-600' : 'bg-blue-100 text-blue-600'&quot; &#10;                                                 class=&quot;w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                                                &lt;i :class=&quot;activity.type === 'change' ? 'fas fa-exclamation' : 'fas fa-check'&quot; class=&quot;text-xs&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;flex-1&quot;&gt;&#10;                                                &lt;p class=&quot;text-sm text-gray-900 dark:text-white&quot; x-text=&quot;activity.message&quot;&gt;&lt;/p&gt;&#10;                                                &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400&quot; x-text=&quot;activity.timestamp&quot;&gt;&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/template&gt;&#10;                                    &lt;div x-show=&quot;!selectedEpic?.recentActivity?.length&quot; class=&quot;text-center py-8 text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-clock text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;No recent activity&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        &lt;!-- Statistics --&gt;&#10;                        &lt;div class=&quot;space-y-4&quot;&gt;&#10;                            &lt;div class=&quot;bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-4 text-white&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold mb-2&quot;&gt;Performance&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-2 text-sm&quot;&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Avg Response:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.avgResponseTime ? selectedEpic.avgResponseTime + 'ms' : 'N/A'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Success Rate:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.successRate ? selectedEpic.successRate + '%' : '100%'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;flex justify-between&quot;&gt;&#10;                                        &lt;span&gt;Uptime:&lt;/span&gt;&#10;                                        &lt;span x-text=&quot;selectedEpic?.uptime || '100%'&quot;&gt;&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &#10;                            &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                                &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;Actions&lt;/h4&gt;&#10;                                &lt;div class=&quot;space-y-2&quot;&gt;&#10;                                    &lt;button @click=&quot;forceCheckEpic(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 rounded hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-sync mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Force Check Now&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;downloadEpicReport(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 rounded hover:bg-green-200 dark:hover:bg-green-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-download mr-1&quot;&gt;&lt;/i&gt;&#10;                                        Download Report&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;viewEpicSnapshot(selectedEpic?.id)&quot; &#10;                                            class=&quot;w-full px-3 py-2 text-sm bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300 rounded hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-camera mr-1&quot;&gt;&lt;/i&gt;&#10;                                        View Snapshot&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;!-- Change History Chart --&gt;&#10;                    &lt;div class=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 class=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;Change History (7 days)&lt;/h4&gt;&#10;                        &lt;div class=&quot;h-64&quot;&gt;&#10;                            &lt;canvas :id=&quot;'epicChart' + selectedEpic?.id&quot;&gt;&lt;/canvas&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;        &lt;!-- Enhanced Toast Notifications --&gt;&#10;        &lt;div class=&quot;fixed top-4 right-4 z-50 space-y-3&quot;&gt;&#10;            &lt;template x-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot;&gt;&#10;                &lt;div x-show=&quot;notification.show&quot; &#10;                     x-transition:enter=&quot;transition ease-out duration-300&quot;&#10;                     x-transition:enter-start=&quot;opacity-0 transform translate-x-full&quot;&#10;                     x-transition:enter-end=&quot;opacity-100 transform translate-x-0&quot;&#10;                     x-transition:leave=&quot;transition ease-in duration-200&quot;&#10;                     x-transition:leave-start=&quot;opacity-100 transform translate-x-0&quot;&#10;                     x-transition:leave-end=&quot;opacity-0 transform translate-x-full&quot;&#10;                     class=&quot;min-w-80 max-w-md w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden&quot;&gt;&#10;                    &lt;div :class=&quot;getNotificationClass(notification.type)&quot; class=&quot;p-4&quot;&gt;&#10;                        &lt;div class=&quot;flex items-start&quot;&gt;&#10;                            &lt;div class=&quot;flex-shrink-0&quot;&gt;&#10;                                &lt;i :class=&quot;getNotificationIcon(notification.type)&quot; class=&quot;text-xl text-white&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;ml-3 flex-1 min-w-0&quot;&gt;&#10;                                &lt;p class=&quot;text-sm font-medium text-white&quot; x-text=&quot;notification.title || getNotificationTitle(notification.type)&quot;&gt;&lt;/p&gt;&#10;                                &lt;p class=&quot;mt-1 text-sm text-white opacity-90 break-words&quot; x-text=&quot;notification.message&quot;&gt;&lt;/p&gt;&#10;                                &lt;div class=&quot;mt-2&quot; x-show=&quot;notification.actions &amp;&amp; notification.actions.length&quot;&gt;&#10;                                    &lt;template x-for=&quot;action in notification.actions&quot;&gt;&#10;                                        &lt;button @click=&quot;action.handler(); dismissNotification(notification.id)&quot; &#10;                                                class=&quot;text-xs bg-white bg-opacity-20 hover:bg-opacity-30 rounded px-3 py-1 mr-2 transition-colors&quot;&#10;                                                x-text=&quot;action.label&quot;&gt;&lt;/button&gt;&#10;                                    &lt;/template&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;ml-3 flex-shrink-0&quot;&gt;&#10;                                &lt;button @click=&quot;dismissNotification(notification.id)&quot; &#10;                                        class=&quot;rounded-md inline-flex text-white hover:text-gray-200 focus:outline-none p-1&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;!-- Progress bar for timed notifications --&gt;&#10;                        &lt;div x-show=&quot;notification.autoClose&quot; class=&quot;mt-3&quot;&gt;&#10;                            &lt;div class=&quot;w-full bg-white bg-opacity-20 rounded-full h-1&quot;&gt;&#10;                                &lt;div class=&quot;bg-white h-1 rounded-full transition-all ease-linear&quot; &#10;                                     :style=&quot;'width: ' + (notification.progress || 100) + '%'&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/template&gt;&#10;        &lt;/div&gt;&#10;        &lt;/main&gt;&#10;&#10;        &lt;script&gt;&#10;        function dashboardData() {&#10;            return {&#10;                // Loading states&#10;                loading: false,&#10;                loadingLogs: false,&#10;                loadingAnalytics: false,&#10;                &#10;                // Theme&#10;                darkMode: localStorage.getItem('darkMode') === 'true' || false,&#10;                &#10;                // Data&#10;                monitorStatus: { is_running: false },&#10;                epics: [],&#10;                epicDetails: {},&#10;                config: {},&#10;                logs: [],&#10;                metrics: {&#10;                    avgResponseTime: 0,&#10;                    successRate: 100,&#10;                    changesDetected: 0,&#10;                    totalChecks: 0&#10;                },&#10;                &#10;                // UI State&#10;                lastUpdated: '',&#10;                tableView: localStorage.getItem('tableView') || 'table',&#10;                epicFilter: '',&#10;                &#10;                // Modals&#10;                showAddEpicModal: false,&#10;                newEpicId: '',&#10;                showConfigModal: false,&#10;                showEpicDetailsModal: false,&#10;                selectedEpic: null,&#10;                &#10;                // Configuration form&#10;                configForm: {&#10;                    poll_interval_seconds: 30,&#10;                    max_concurrent_syncs: 3,&#10;                    retry_attempts: 3,&#10;                    retry_delay_seconds: 10,&#10;                    auto_sync: true,&#10;                    epic_ids_text: '',&#10;                    log_level: 'INFO',&#10;                    snapshot_directory: 'snapshots/',&#10;                    story_extraction_type: 'User Story',&#10;                    test_case_extraction_type: 'Issue',&#10;                    auto_extract_new_epics: false,&#10;                    skip_duplicate_check: false&#10;                },&#10;                &#10;                // Enhanced notifications&#10;                notifications: [],&#10;                notificationId: 0,&#10;                &#10;                // Charts&#10;                activityChart: null,&#10;                statusChart: null,&#10;&#10;                // Test Case Management&#10;                testStoryId: '',&#10;                extractingTestCases: false,&#10;                extractedTestCases: [],&#10;&#10;                async init() {&#10;                    this.applyTheme();&#10;                    await this.refreshData();&#10;                    this.initCharts();&#10;                    this.startAutoRefresh();&#10;                    this.setupWebSocket();&#10;                },&#10;&#10;                startAutoRefresh() {&#10;                    setInterval(() =&gt; {&#10;                        this.refreshLogs();&#10;                    }, 10000); // Refresh logs every 10 seconds&#10;                },&#10;&#10;                toggleTheme() {&#10;                    this.darkMode = !this.darkMode;&#10;                    localStorage.setItem('darkMode', this.darkMode);&#10;                    this.applyTheme();&#10;                },&#10;&#10;                applyTheme() {&#10;                    if (this.darkMode) {&#10;                        document.documentElement.classList.add('dark');&#10;                    } else {&#10;                        document.documentElement.classList.remove('dark');&#10;                    }&#10;                },&#10;&#10;                toggleTableView() {&#10;                    this.tableView = this.tableView === 'table' ? 'grid' : 'table';&#10;                    localStorage.setItem('tableView', this.tableView);&#10;                },&#10;&#10;                get filteredEpics() {&#10;                    if (!this.epicFilter) return this.epics.map(id =&gt; ({ &#10;                        id, &#10;                        ...this.epicDetails[id],&#10;                        status: 'monitoring',&#10;                        changesCount: Math.floor(Math.random() * 10),&#10;                        avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                        lastCheck: new Date()&#10;                    }));&#10;                    &#10;                    return this.epics&#10;                        .filter(id =&gt; id.toLowerCase().includes(this.epicFilter.toLowerCase()))&#10;                        .map(id =&gt; ({ &#10;                            id, &#10;                            ...this.epicDetails[id],&#10;                            status: 'monitoring',&#10;                            changesCount: Math.floor(Math.random() * 10),&#10;                            avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                            lastCheck: new Date()&#10;                        }));&#10;                },&#10;&#10;                async refreshData() {&#10;                    this.loading = true;&#10;                    try {&#10;                        await Promise.all([&#10;                            this.fetchStatus(),&#10;                            this.fetchEpics(),&#10;                            this.fetchConfig(),&#10;                            this.refreshLogs(),&#10;                            this.fetchMetrics()&#10;                        ]);&#10;                        this.lastUpdated = new Date().toLocaleTimeString();&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to refresh data', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async fetchStatus() {&#10;                    const response = await fetch('/api/status');&#10;                    const data = await response.json();&#10;                    this.monitorStatus = data;&#10;                },&#10;&#10;                async fetchEpics() {&#10;                    const response = await fetch('/api/epics');&#10;                    const data = await response.json();&#10;                    this.epics = data.epics || [];&#10;                    this.epicDetails = data.details || {};&#10;                },&#10;&#10;                async fetchConfig() {&#10;                    const response = await fetch('/api/config');&#10;                    const data = await response.json();&#10;                    this.config = data.config || {};&#10;                    this.initConfigForm();&#10;                },&#10;&#10;                async fetchMetrics() {&#10;                    try {&#10;                        // Mock data for now - replace with actual API call&#10;                        this.metrics = {&#10;                            avgResponseTime: Math.floor(Math.random() * 300) + 100,&#10;                            successRate: Math.floor(Math.random() * 10) + 90,&#10;                            changesDetected: Math.floor(Math.random() * 50),&#10;                            totalChecks: Math.floor(Math.random() * 500) + 100&#10;                        };&#10;                    } catch (error) {&#10;                        console.error('Failed to fetch metrics:', error);&#10;                    }&#10;                },&#10;&#10;                initConfigForm() {&#10;                    this.configForm = {&#10;                        poll_interval_seconds: this.config.poll_interval_seconds || 300,&#10;                        retry_attempts: this.config.retry_attempts || 3,&#10;                        retry_delay_seconds: this.config.retry_delay_seconds || 60,&#10;                        auto_sync: this.config.auto_sync !== undefined ? this.config.auto_sync : true,&#10;                        story_extraction_type: this.config.story_extraction_type || 'User Story',&#10;                        test_case_extraction_type: this.config.test_case_extraction_type || 'Issue',&#10;                        auto_extract_new_epics: this.config.auto_extract_new_epics || false,&#10;                        skip_duplicate_check: this.config.skip_duplicate_check || false&#10;                    };&#10;                },&#10;&#10;                async refreshLogs() {&#10;                    this.loadingLogs = true;&#10;                    try {&#10;                        const response = await fetch('/api/logs?lines=50');&#10;                        const data = await response.json();&#10;                        this.logs = data.logs || [];&#10;                    } catch (error) {&#10;                        console.error('Failed to fetch logs:', error);&#10;                    } finally {&#10;                        this.loadingLogs = false;&#10;                    }&#10;                },&#10;&#10;                async refreshAnalytics() {&#10;                    this.loadingAnalytics = true;&#10;                    try {&#10;                        await this.fetchMetrics();&#10;                        this.updateCharts();&#10;                        this.showNotification('Analytics refreshed', 'success');&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to refresh analytics', 'error');&#10;                    } finally {&#10;                        this.loadingAnalytics = false;&#10;                    }&#10;                },&#10;&#10;                async clearLogs() {&#10;                    if (!confirm('Clear logs from display? (Log file will be preserved)')) return;&#10;                    &#10;                    this.loadingLogs = true;&#10;                    try {&#10;                        const response = await fetch('/api/logs/clear', { method: 'DELETE' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Logs cleared from display', 'success');&#10;                            this.logs = [];&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to clear logs', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to clear logs', 'error');&#10;                    } finally {&#10;                        this.loadingLogs = false;&#10;                    }&#10;                },&#10;&#10;                // Monitor control functions&#10;                async startMonitor() {&#10;                    console.log('startMonitor called');&#10;                    this.loading = true;&#10;                    try {&#10;                        console.log('Making API call to /api/start');&#10;                        const response = await fetch('/api/start', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        console.log('API response:', data);&#10;                        &#10;                        if (data.success) {&#10;                            console.log('Monitor started successfully, showing notification');&#10;                            this.showNotification('Monitor started successfully', 'success', 'Monitor Status');&#10;                            await this.fetchStatus();&#10;                        } else {&#10;                            console.log('Monitor start failed:', data.message);&#10;                            this.showNotification(data.message || 'Failed to start monitor', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error starting monitor:', error);&#10;                        this.showNotification('Failed to start monitor', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async stopMonitor() {&#10;                    console.log('stopMonitor called');&#10;                    this.loading = true;&#10;                    try {&#10;                        console.log('Making API call to /api/stop');&#10;                        const response = await fetch('/api/stop', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        console.log('API response:', data);&#10;                        &#10;                        if (data.success) {&#10;                            console.log('Monitor stopped successfully, showing notification');&#10;                            this.showNotification('Monitor stopped successfully', 'warning', 'Monitor Status');&#10;                            await this.fetchStatus();&#10;                        } else {&#10;                            console.log('Monitor stop failed:', data.message);&#10;                            this.showNotification(data.message || 'Failed to stop monitor', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error stopping monitor:', error);&#10;                        this.showNotification('Failed to stop monitor', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async forceCheck() {&#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch('/api/check', { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Force check completed', 'success');&#10;                            await Promise.all([this.refreshLogs(), this.fetchMetrics()]);&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to force check', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to force check', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                // EPIC management functions&#10;                async addEpic() {&#10;                    if (!this.newEpicId.trim()) return;&#10;                    &#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${this.newEpicId.trim()}`, { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`EPIC ${this.newEpicId} added successfully`, 'success', 'EPIC Management');&#10;                            this.newEpicId = '';&#10;                            this.showAddEpicModal = false;&#10;                            await this.fetchEpics();&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to add EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to add EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async removeEpic(epicId) {&#10;                    if (!confirm(`Are you sure you want to remove EPIC ${epicId}?`)) return;&#10;                    &#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${epicId}`, { method: 'DELETE' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`EPIC ${epicId} removed successfully`, 'success', 'EPIC Management');&#10;                            await this.fetchEpics();&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to remove EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to remove EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                viewEpicDetails(epicId) {&#10;                    this.selectedEpic = {&#10;                        id: epicId,&#10;                        status: 'active',&#10;                        totalChecks: Math.floor(Math.random() * 100) + 50,&#10;                        changesCount: Math.floor(Math.random() * 20),&#10;                        lastUpdate: new Date().toLocaleString(),&#10;                        avgResponseTime: Math.floor(Math.random() * 500) + 100,&#10;                        successRate: Math.floor(Math.random() * 10) + 90,&#10;                        uptime: '99.5%',&#10;                        recentActivity: [&#10;                            { type: 'change', message: 'New work item detected', timestamp: '2 minutes ago' },&#10;                            { type: 'check', message: 'Routine check completed', timestamp: '5 minutes ago' },&#10;                            { type: 'change', message: 'Work item status changed', timestamp: '15 minutes ago' }&#10;                        ]&#10;                    };&#10;                    this.showEpicDetailsModal = true;&#10;                },&#10;&#10;                async forceCheckEpic(epicId) {&#10;                    this.loading = true;&#10;                    try {&#10;                        const response = await fetch(`/api/epics/${epicId}/check`, { method: 'POST' });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification(`Force check completed for EPIC ${epicId}`, 'success');&#10;                        } else {&#10;                            this.showNotification(data.message || 'Failed to force check EPIC', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        this.showNotification('Failed to force check EPIC', 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                downloadEpicReport(epicId) {&#10;                    // Create a mock download&#10;                    const report = {&#10;                        epicId: epicId,&#10;                        generatedAt: new Date().toISOString(),&#10;                        summary: { totalChecks: 150, changes: 12, avgResponse: '250ms' }&#10;                    };&#10;                    &#10;                    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });&#10;                    const url = URL.createObjectURL(blob);&#10;                    const a = document.createElement('a');&#10;                    a.href = url;&#10;                    a.download = `epic-${epicId}-report.json`;&#10;                    a.click();&#10;                    URL.revokeObjectURL(url);&#10;                    &#10;                    this.showNotification(`Report downloaded for EPIC ${epicId}`, 'success');&#10;                },&#10;&#10;                viewEpicSnapshot(epicId) {&#10;                    // Mock functionality - would open snapshot viewer&#10;                    this.showNotification(`Opening snapshot for EPIC ${epicId}`, 'info');&#10;                },&#10;&#10;                // Configuration functions&#10;                async updateConfig() {&#10;                    this.loading = true;&#10;                    try {&#10;                        const configUpdate = {&#10;                            poll_interval_seconds: parseInt(this.configForm.poll_interval_seconds),&#10;                            retry_attempts: parseInt(this.configForm.retry_attempts),&#10;                            retry_delay_seconds: parseInt(this.configForm.retry_delay_seconds),&#10;                            auto_sync: this.configForm.auto_sync,&#10;                            story_extraction_type: this.configForm.story_extraction_type,&#10;                            test_case_extraction_type: this.configForm.test_case_extraction_type,&#10;                            auto_extract_new_epics: this.configForm.auto_extract_new_epics,&#10;                            skip_duplicate_check: this.configForm.skip_duplicate_check,&#10;                            log_level: this.configForm.log_level || 'INFO'&#10;                        };&#10;&#10;                        const response = await fetch('/api/config', {&#10;                            method: 'POST',&#10;                            headers: { 'Content-Type': 'application/json' },&#10;                            body: JSON.stringify(configUpdate)&#10;                        });&#10;                        &#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.showNotification('Configuration updated successfully', 'success', 'Configuration', [&#10;                                { label: 'Restart Monitor', handler: () =&gt; this.restartMonitor() }&#10;                            ]);&#10;                            this.showConfigModal = false;&#10;                            await this.fetchConfig();&#10;                        } else {&#10;                            this.showNotification(data.error || 'Failed to update configuration', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Configuration update error:', error);&#10;                        this.showNotification('Failed to update configuration: ' + error.message, 'error');&#10;                    } finally {&#10;                        this.loading = false;&#10;                    }&#10;                },&#10;&#10;                async restartMonitor() {&#10;                    await this.stopMonitor();&#10;                    setTimeout(() =&gt; this.startMonitor(), 2000);&#10;                },&#10;&#10;                // Enhanced notification system&#10;                showNotification(message, type = 'info', title = null, actions = null) {&#10;                    console.log('showNotification called:', { message, type, title, actions });&#10;                    &#10;                    const id = ++this.notificationId;&#10;                    const notification = {&#10;                        id,&#10;                        message,&#10;                        type,&#10;                        title,&#10;                        actions,&#10;                        show: true,&#10;                        autoClose: !actions,&#10;                        progress: 100&#10;                    };&#10;                    &#10;                    this.notifications.push(notification);&#10;                    console.log('Notification added. Total notifications:', this.notifications.length);&#10;                    &#10;                    if (notification.autoClose) {&#10;                        const interval = setInterval(() =&gt; {&#10;                            notification.progress -= 2;&#10;                            if (notification.progress &lt;= 0) {&#10;                                this.dismissNotification(id);&#10;                                clearInterval(interval);&#10;                            }&#10;                        }, 100);&#10;                    }&#10;                },&#10;&#10;                dismissNotification(id) {&#10;                    console.log('dismissNotification called for id:', id);&#10;                    const index = this.notifications.findIndex(n =&gt; n.id === id);&#10;                    if (index &gt; -1) {&#10;                        this.notifications[index].show = false;&#10;                        setTimeout(() =&gt; {&#10;                            this.notifications.splice(index, 1);&#10;                            console.log('Notification removed. Remaining:', this.notifications.length);&#10;                        }, 300);&#10;                    }&#10;                },&#10;&#10;                getNotificationClass(type) {&#10;                    const classes = {&#10;                        success: 'bg-gradient-to-r from-green-500 to-green-600',&#10;                        error: 'bg-gradient-to-r from-red-500 to-red-600',&#10;                        warning: 'bg-gradient-to-r from-yellow-500 to-orange-500',&#10;                        info: 'bg-gradient-to-r from-blue-500 to-blue-600'&#10;                    };&#10;                    return classes[type] || classes.info;&#10;                },&#10;&#10;                getNotificationIcon(type) {&#10;                    const icons = {&#10;                        success: 'fas fa-check-circle',&#10;                        error: 'fas fa-exclamation-triangle',&#10;                        warning: 'fas fa-exclamation-circle',&#10;                        info: 'fas fa-info-circle'&#10;                    };&#10;                    return icons[type] || icons.info;&#10;                },&#10;&#10;                getNotificationTitle(type) {&#10;                    const titles = {&#10;                        success: 'Success',&#10;                        error: 'Error',&#10;                        warning: 'Warning',&#10;                        info: 'Information'&#10;                    };&#10;                    return titles[type] || titles.info;&#10;                },&#10;&#10;                // Chart initialization and updates&#10;                initCharts() {&#10;                    this.$nextTick(() =&gt; {&#10;                        this.initActivityChart();&#10;                        this.initStatusChart();&#10;                    });&#10;                },&#10;&#10;                initActivityChart() {&#10;                    const ctx = document.getElementById('activityChart');&#10;                    if (!ctx) return;&#10;&#10;                    const hours = Array.from({length: 24}, (_, i) =&gt; `${i}:00`);&#10;                    const data = Array.from({length: 24}, () =&gt; Math.floor(Math.random() * 20));&#10;&#10;                    this.activityChart = new Chart(ctx, {&#10;                        type: 'line',&#10;                        data: {&#10;                            labels: hours,&#10;                            datasets: [{&#10;                                label: 'Checks',&#10;                                data: data,&#10;                                borderColor: '#3B82F6',&#10;                                backgroundColor: 'rgba(59, 130, 246, 0.1)',&#10;                                fill: true,&#10;                                tension: 0.4&#10;                            }]&#10;                        },&#10;                        options: {&#10;                            responsive: true,&#10;                            maintainAspectRatio: false,&#10;                            plugins: { legend: { display: false } },&#10;                            scales: {&#10;                                y: { beginAtZero: true }&#10;                            }&#10;                        }&#10;                    });&#10;                },&#10;&#10;                initStatusChart() {&#10;                    const ctx = document.getElementById('statusChart');&#10;                    if (!ctx) return;&#10;&#10;                    this.statusChart = new Chart(ctx, {&#10;                        type: 'doughnut',&#10;                        data: {&#10;                            labels: ['Active', 'Monitoring', 'Paused'],&#10;                            datasets: [{&#10;                                data: [12, 8, 2],&#10;                                backgroundColor: ['#10B981', '#3B82F6', '#F59E0B']&#10;                            }]&#10;                        },&#10;                        options: {&#10;                            responsive: true,&#10;                            maintainAspectRatio: false,&#10;                            plugins: {&#10;                                legend: { position: 'bottom' }&#10;                            }&#10;                        }&#10;                    });&#10;                },&#10;&#10;                updateCharts() {&#10;                    if (this.activityChart) {&#10;                        this.activityChart.data.datasets[0].data = Array.from({length: 24}, () =&gt; Math.floor(Math.random() * 20));&#10;                        this.activityChart.update();&#10;                    }&#10;                },&#10;&#10;                setupWebSocket() {&#10;                    // Disabled mock WebSocket setup - replace with real WebSocket when backend supports it&#10;                    // setInterval(() =&gt; {&#10;                    //     // Only show alerts if monitor is running and there are EPICs to monitor&#10;                    //     if (this.monitorStatus.is_running &amp;&amp; this.epics &amp;&amp; this.epics.length &gt; 0) {&#10;                    //         if (Math.random() &gt; 0.9) { // Reduced frequency for more realistic alerts&#10;                    //             const randomIndex = Math.floor(Math.random() * this.epics.length);&#10;                    //             let epicId;&#10;                    //             &#10;                    //             // Handle both string array and object array formats&#10;                    //             if (typeof this.epics[randomIndex] === 'string') {&#10;                    //                 epicId = this.epics[randomIndex];&#10;                    //             } else if (this.epics[randomIndex] &amp;&amp; this.epics[randomIndex].id) {&#10;                    //                 epicId = this.epics[randomIndex].id;&#10;                    //             }&#10;                    //             &#10;                    //             if (epicId) {&#10;                    //                 console.log('Simulated real-time alert for EPIC:', epicId);&#10;                    //                 this.showNotification(`Change detected in EPIC ${epicId}`, 'warning', 'Real-time Alert');&#10;                    //             }&#10;                    //         }&#10;                    //     }&#10;                    // }, 45000); // Increased interval to 45 seconds for less frequent alerts&#10;                    &#10;                    console.log('Real-time alerts disabled (mock data). Enable when real WebSocket backend is available.');&#10;                },&#10;&#10;                // Utility functions&#10;                getRelativeTime(date) {&#10;                    const now = new Date();&#10;                    const diff = now - date;&#10;                    const minutes = Math.floor(diff / 60000);&#10;                    &#10;                    if (minutes &lt; 1) return 'Just now';&#10;                    if (minutes === 1) return '1 minute ago';&#10;                    if (minutes &lt; 60) return `${minutes} minutes ago`;&#10;                    &#10;                    const hours = Math.floor(minutes / 60);&#10;                    if (hours === 1) return '1 hour ago';&#10;                    if (hours &lt; 24) return `${hours} hours ago`;&#10;                    &#10;                    return date.toLocaleDateString();&#10;                },&#10;&#10;                startAutoRefresh() {&#10;                    setInterval(() =&gt; {&#10;                        this.refreshLogs();&#10;                    }, 10000); // Refresh logs every 10 seconds&#10;                },&#10;&#10;                resetConfigForm() {&#10;                    this.initConfigForm();&#10;                },&#10;&#10;                // Test Case Management functions&#10;                async extractTestCases() {&#10;                    if (!this.testStoryId.trim()) return;&#10;                    &#10;                    this.extractingTestCases = true;&#10;                    try {&#10;                        const response = await fetch(`/api/stories/${this.testStoryId.trim()}/test-cases`, {&#10;                            method: 'POST',&#10;                            headers: {&#10;                                'Content-Type': 'application/json'&#10;                            }&#10;                        });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            this.extractedTestCases = data.test_cases;&#10;                            this.showNotification(`Successfully extracted ${data.total_test_cases} test cases for story ${this.testStoryId}`, 'success', 'Test Case Extraction');&#10;                        } else {&#10;                            this.showNotification(data.error || 'Failed to extract test cases', 'error');&#10;                            this.extractedTestCases = [];&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error extracting test cases:', error);&#10;                        this.showNotification('Failed to extract test cases', 'error');&#10;                        this.extractedTestCases = [];&#10;                    } finally {&#10;                        this.extractingTestCases = false;&#10;                    }&#10;                },&#10;&#10;                async extractAndUploadTestCases() {&#10;                    if (!this.testStoryId.trim()) return;&#10;                    &#10;                    this.extractingTestCases = true;&#10;                    try {&#10;                        const response = await fetch(`/api/stories/${this.testStoryId.trim()}/test-cases/upload`, {&#10;                            method: 'POST',&#10;                            headers: {&#10;                                'Content-Type': 'application/json'&#10;                            }&#10;                        });&#10;                        const data = await response.json();&#10;                        &#10;                        if (data.success) {&#10;                            const successMessage = `Successfully created ${data.total_uploaded} test cases in ADO for story ${this.testStoryId}`;&#10;                            const errorMessage = data.total_errors &gt; 0 ? ` (${data.total_errors} errors)` : '';&#10;                            &#10;                            this.showNotification(successMessage + errorMessage, data.total_errors &gt; 0 ? 'warning' : 'success', 'Test Case Upload');&#10;                            &#10;                            // Also show the extracted test cases&#10;                            this.extractedTestCases = data.uploaded_test_cases.map(tc =&gt; ({&#10;                                title: tc.title,&#10;                                test_type: tc.type,&#10;                                uploaded_id: tc.id&#10;                            }));&#10;                            &#10;                            // Clear the story ID after successful upload&#10;                            this.testStoryId = '';&#10;                        } else {&#10;                            this.showNotification(data.error || 'Failed to extract and upload test cases', 'error');&#10;                        }&#10;                    } catch (error) {&#10;                        console.error('Error extracting and uploading test cases:', error);&#10;                        this.showNotification('Failed to extract and upload test cases', 'error');&#10;                    } finally {&#10;                        this.extractingTestCases = false;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &lt;/script&gt;&#10;    &lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>